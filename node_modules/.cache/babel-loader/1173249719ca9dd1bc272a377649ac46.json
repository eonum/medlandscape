{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/ResultTable/ResultTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from './../../Table.js';\nimport './ResultTable.css';\n/**\n * Represents the part of the table which displays the results\n */\n\nvar ResultTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultTable, _Component);\n\n  function ResultTable(props) {\n    var _this;\n\n    _classCallCheck(this, ResultTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultTable).call(this, props));\n    _this.state = {\n      resultTableData: []\n    };\n    return _this;\n  }\n\n  _createClass(ResultTable, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var tableData = [];\n\n      if (this.props.dataLoaded) {\n        // check if all dropdowns selected something, else throw error\n        var shouldGenerate = true;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = this.props.selectedHospitals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _hosp = _step.value;\n\n            if (Object.keys(_hosp).length === 0 && _hosp.constructor === Object) {\n              shouldGenerate = false;\n              window.alert('please select something');\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (shouldGenerate) {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = this.props.selectedVariables[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var variable = _step2.value;\n\n              if (Object.keys(variable).length === 0 && variable.constructor === Object) {\n                shouldGenerate = false;\n                window.alert('please select something');\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        }\n\n        if (shouldGenerate) {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = this.props.selectedHospitals[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var hosp = _step3.value;\n              var newRow = [];\n              var currentHosp = void 0;\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = this.props.hospitalData[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var hosp2 = _step4.value;\n\n                  if (hosp.name === hosp2.name) {\n                    currentHosp = hosp2;\n                    break;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              var _iteratorNormalCompletion5 = true;\n              var _didIteratorError5 = false;\n              var _iteratorError5 = undefined;\n\n              try {\n                for (var _iterator5 = this.props.selectedVariables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                  var _variable = _step5.value;\n\n                  if (_variable.is_time_series) {\n                    var latestYear = Object.keys(currentHosp.attributes[_variable.name]).sort()[Object.keys(currentHosp.attributes[_variable.name]).length - 1];\n                    var obj = currentHosp.attributes[_variable.name];\n                    newRow.push(obj[latestYear]);\n                  } else {\n                    newRow.push(currentHosp.attributes[_variable.name]);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError5 = true;\n                _iteratorError5 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n                    _iterator5.return();\n                  }\n                } finally {\n                  if (_didIteratorError5) {\n                    throw _iteratorError5;\n                  }\n                }\n              }\n\n              tableData.push(newRow);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          this.setState({\n            resultTableData: tableData\n          });\n        }\n\n        this.props.dataGenerated();\n      }\n    }\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(Table, {\n        tableData: this.state.resultTableData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ResultTable;\n}(Component);\n/**\n* PropTypes\n*\n* selectedHospitals: array containing all selected hospitals\n* selectedVariables: array containing all selected variables\n* hospitals: array containing all hospitals and values of the selected variables\n*/\n\n\nResultTable.propTypes = {\n  selectedHospitals: PropTypes.array.isRequired,\n  selectedVariables: PropTypes.array.isRequired,\n  hospitalData: PropTypes.array.isRequired\n};\nexport default ResultTable;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/ResultTable/ResultTable.js"],"names":["React","Component","PropTypes","Table","ResultTable","props","state","resultTableData","tableData","dataLoaded","shouldGenerate","selectedHospitals","hosp","Object","keys","length","constructor","window","alert","selectedVariables","variable","newRow","currentHosp","hospitalData","hosp2","name","is_time_series","latestYear","attributes","sort","obj","push","setState","dataGenerated","propTypes","array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from './../../Table.js'\nimport './ResultTable.css';\n\n/**\n * Represents the part of the table which displays the results\n */\nclass ResultTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            resultTableData: []\n        }\n    }\n\n    componentDidUpdate() {\n        let tableData = [];\n        if (this.props.dataLoaded) {\n            // check if all dropdowns selected something, else throw error\n            let shouldGenerate = true;\n            for (let hosp of this.props.selectedHospitals) {\n                if (Object.keys(hosp).length === 0 && hosp.constructor === Object) {\n                    shouldGenerate = false;\n                    window.alert('please select something')\n                    break;\n                }\n            }\n            if (shouldGenerate) {\n                for (let variable of this.props.selectedVariables) {\n                    if (Object.keys(variable).length === 0 && variable.constructor === Object) {\n                        shouldGenerate = false;\n                        window.alert('please select something')\n                        break;\n                    }\n                }\n            }\n            if (shouldGenerate) {\n                for (let hosp of this.props.selectedHospitals) {\n                    let newRow = [];\n                    let currentHosp;\n                    for (let hosp2 of this.props.hospitalData) {\n                        if (hosp.name === hosp2.name) {\n                            currentHosp = hosp2;\n                            break;\n                        }\n                    }\n                    for (let variable of this.props.selectedVariables) {\n                        if (variable.is_time_series) {\n                            const latestYear = Object.keys(currentHosp.attributes[variable.name])\n                                .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n                            const obj = currentHosp.attributes[variable.name];\n                            newRow.push(obj[latestYear]);\n                        } else {\n                            newRow.push(currentHosp.attributes[variable.name]);\n                        }\n                    }\n                    tableData.push(newRow);\n                }\n                this.setState({\n                    resultTableData: tableData\n                })\n            }\n            this.props.dataGenerated();\n        }\n    }\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    render() {\n        return (\n            <div>\n                <Table tableData={this.state.resultTableData} />\n            </div>\n        );\n    }\n}\n\n/**\n* PropTypes\n*\n* selectedHospitals: array containing all selected hospitals\n* selectedVariables: array containing all selected variables\n* hospitals: array containing all hospitals and values of the selected variables\n*/\nResultTable.propTypes = {\n    selectedHospitals: PropTypes.array.isRequired,\n    selectedVariables: PropTypes.array.isRequired,\n    hospitalData: PropTypes.array.isRequired,\n}\n\nexport default ResultTable;\n"]},"metadata":{},"sourceType":"module"}