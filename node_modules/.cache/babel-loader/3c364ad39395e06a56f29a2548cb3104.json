{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/MapInfo/MapInfo.js\";\nimport React, { Component } from 'react';\nimport Control from 'react-leaflet-control';\nimport { withTranslation } from 'react-i18next';\nimport './mapInfo.css';\n\nvar MapInfo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapInfo, _Component);\n\n  function MapInfo() {\n    _classCallCheck(this, MapInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapInfo).apply(this, arguments));\n  }\n\n  _createClass(MapInfo, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mapView = _this$props.mapView,\n          year = _this$props.year,\n          selectedVariable = _this$props.selectedVariable,\n          nrOfObjects = _this$props.nrOfObjects,\n          t = _this$props.t;\n      var variableIsTypeHospital = selectedVariable.variable_model === \"Hospital\";\n      var selectedMap, selectedVar, mapInfo, yearInfo, filterInfo;\n      selectedMap = mapView === 1 ? t('mapInfo.hospitals') : t('mapInfo.cantons');\n      mapInfo = t('mapInfo.map') + \": \" + selectedMap;\n\n      if (mapView === 1 && variableIsTypeHospital || mapView === 2 && !variableIsTypeHospital) {\n        selectedVar = t('mapInfo.variable') + \": \" + selectedVariable.text;\n        yearInfo = t('mapInfo.year') + \": \" + year;\n        filterInfo = t('mapInfo.filter') + \" \" + selectedMap + \": \" + nrOfObjects;\n      } else {\n        selectedVar = t('mapInfo.noVariable');\n      }\n\n      return React.createElement(Control, {\n        position: \"topleft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mapInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, mapInfo), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, selectedVar), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, variableIsTypeHospital ? filterInfo : \"\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, yearInfo)));\n    }\n  }]);\n\n  return MapInfo;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedMapInfo = withTranslation()(MapInfo);\nexport default LocalizedMapInfo;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/MapInfo/MapInfo.js"],"names":["React","Component","Control","withTranslation","MapInfo","props","mapView","year","selectedVariable","nrOfObjects","t","variableIsTypeHospital","variable_model","selectedMap","selectedVar","mapInfo","yearInfo","filterInfo","text","LocalizedMapInfo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAO,eAAP;;IAEMC,O;;;;;;;;;;;;;6BAEO;AAAA,wBACqD,KAAKC,KAD1D;AAAA,UACEC,OADF,eACEA,OADF;AAAA,UACWC,IADX,eACWA,IADX;AAAA,UACiBC,gBADjB,eACiBA,gBADjB;AAAA,UACmCC,WADnC,eACmCA,WADnC;AAAA,UACgDC,CADhD,eACgDA,CADhD;AAGL,UAAIC,sBAAsB,GAAIH,gBAAgB,CAACI,cAAjB,KAAoC,UAAlE;AACA,UAAIC,WAAJ,EAAiBC,WAAjB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,UAAjD;AACAJ,MAAAA,WAAW,GAAIP,OAAO,KAAK,CAAb,GAAkBI,CAAC,CAAC,mBAAD,CAAnB,GAA2CA,CAAC,CAAC,iBAAD,CAA1D;AACAK,MAAAA,OAAO,GAAGL,CAAC,CAAC,aAAD,CAAD,GAAmB,IAAnB,GAA0BG,WAApC;;AAEA,UAAKP,OAAO,KAAK,CAAZ,IAAiBK,sBAAlB,IAA8CL,OAAO,KAAK,CAAZ,IAAiB,CAACK,sBAApE,EAA6F;AACzFG,QAAAA,WAAW,GAAGJ,CAAC,CAAC,kBAAD,CAAD,GAAyB,IAAzB,GAAgCF,gBAAgB,CAACU,IAA/D;AACAF,QAAAA,QAAQ,GAAGN,CAAC,CAAC,cAAD,CAAD,GAAoB,IAApB,GAA2BH,IAAtC;AACAU,QAAAA,UAAU,GAAGP,CAAC,CAAC,gBAAD,CAAD,GAAsB,GAAtB,GAA4BG,WAA5B,GAA0C,IAA1C,GAAiDJ,WAA9D;AACH,OAJD,MAIO;AACHK,QAAAA,WAAW,GAAGJ,CAAC,CAAC,oBAAD,CAAf;AACH;;AAED,aACI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKK,OAAL,CADV,EAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,WAAL,CAFV,EAGU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAMH,sBAAD,GAA2BM,UAA3B,GAAwC,EAA7C,CAHV,EAIU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,QAAL,CAJV,CADE,CADJ;AAUH;;;;EA5BiBf,S;AA+BtB;;;;;;AAIA,IAAMkB,gBAAgB,GAAGhB,eAAe,GAAGC,OAAH,CAAxC;AACA,eAAee,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Control from 'react-leaflet-control';\nimport { withTranslation } from 'react-i18next';\n\nimport './mapInfo.css';\n\nclass MapInfo extends Component {\n\n    render() {\n        const {mapView, year, selectedVariable, nrOfObjects, t} = this.props;\n\n        let variableIsTypeHospital = (selectedVariable.variable_model === \"Hospital\");\n        let selectedMap, selectedVar, mapInfo, yearInfo, filterInfo;\n        selectedMap = (mapView === 1) ? t('mapInfo.hospitals') : t('mapInfo.cantons');\n        mapInfo = t('mapInfo.map') + \": \" + selectedMap;\n\n        if ((mapView === 1 && variableIsTypeHospital) || (mapView === 2 && !variableIsTypeHospital)) {\n            selectedVar = t('mapInfo.variable') +  \": \" + selectedVariable.text;\n            yearInfo = t('mapInfo.year') + \": \" + year;\n            filterInfo = t('mapInfo.filter') + \" \" + selectedMap + \": \" + nrOfObjects;\n        } else {\n            selectedVar = t('mapInfo.noVariable');\n        }\n\n        return (\n            <Control position=\"topleft\">\n        \t\t<div className=\"mapInfo\">\n                    <h1>{mapInfo}</h1>\n                    <h2>{selectedVar}</h2>\n                    <h2>{(variableIsTypeHospital) ? filterInfo : \"\"}</h2>\n                    <h2>{yearInfo}</h2>\n        \t\t</div>\n            </Control>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedMapInfo = withTranslation()(MapInfo);\nexport default LocalizedMapInfo;\n"]},"metadata":{},"sourceType":"module"}