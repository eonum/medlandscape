{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/Maps.js\";\nimport React, { Component } from 'react';\nimport { Map, TileLayer, ZoomControl } from 'react-leaflet';\nimport './Maps.css';\nimport Control from 'react-leaflet-control';\nimport MapInfo from '../MapInfo/MapInfo.js';\nimport TestComponent from './TestComponent.js';\nimport HospitalMap from './HospitalMap.js';\nimport CantonMap from './CantonMap.js';\n/**\n* Maps is the entity we use to draw a map.\n* The rendered JSX also consists of the buttons and mapInfo that should be rendered.\n* The current position of the map center and zoom are stored in the state.\n*/\n\nvar Maps =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Maps, _Component);\n\n  function Maps() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Maps);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Maps)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      filteredObjects: [],\n      lat: 46.798473,\n      lng: 8.231726,\n      zoom: 8\n    };\n\n    _this.returnData = function (item) {\n      var varName = _this.props.variableInfo.name;\n      var values = item.attributes[varName];\n      var data = values[_this.props.year];\n      return data;\n    };\n\n    _this.setMaxAndMin = function () {\n      var min = 1000000000000,\n          max = 0,\n          sum = 0,\n          counter = 0;\n\n      _this.state.filteredObjects.map(function (obj) {\n        var val = _this.returnData(obj);\n\n        if (obj.name !== \"Ganze Schweiz\") {\n          max = max < val ? val : max;\n          min = min > val ? val : min;\n          sum += val;\n          counter++;\n        }\n      });\n\n      var mean = sum / counter;\n      sum = 0;\n\n      _this.state.filteredObjects.map(function (obj) {\n        var val = _this.returnData(obj);\n\n        if (obj.name !== \"Ganze Schweiz\") {\n          var squareDif = Math.pow(val - mean, 2);\n          sum += squareDif;\n        }\n      });\n\n      var meanSquareDif = sum / counter;\n      var std = Math.sqrt(meanSquareDif);\n      return {\n        mean: mean,\n        std: std,\n        max: max,\n        min: min\n      };\n    };\n\n    _this.isNormable = function () {\n      var type = _this.props.variableInfo.variable_type;\n      return type === \"float\" || type === \"number\" || type === \"percentage\" || type === \"relevance\";\n    };\n\n    _this.resetView = function () {\n      _this.setState({\n        lat: 46.798473 + 0.1 * Math.random(),\n        lng: 8.231726 + 0.1 * Math.random(),\n        zoom: 8\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Maps, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (this.props.variableInfo !== prevProps.variableInfo && this.props.objects.length !== 0) {\n        console.log(\"updated\");\n        var filteredObjects = this.props.objects.filter(function (object) {\n          return _this2.returnData(object);\n        });\n        console.log(\"objects: \" + this.props.objects.length);\n        console.log(\"after filter: \" + filteredObjects.length);\n        this.setState({\n          filteredObjects: filteredObjects\n        });\n      }\n    }\n    /**\n        * Returns the values stored in a this.props.objects canton/hospital\n        * @param  {Canton || Hospital Object} item The object to extract the values from\n        * @return {int || float || string} The selected entry in the item.values object\n        */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          variableInfo = _this$props.variableInfo,\n          view = _this$props.view,\n          mapView = _this$props.mapView,\n          year = _this$props.year,\n          objects = _this$props.objects,\n          hasLoaded = _this$props.hasLoaded;\n      var _this$state = this.state,\n          filteredObjects = _this$state.filteredObjects,\n          lat = _this$state.lat,\n          lng = _this$state.lng,\n          zoom = _this$state.zoom;\n      var variableIsTypeHospital = variableInfo.variable_model === \"Hospital\";\n      var componentToRender = null;\n      var mapInfo = null;\n      var ready = hasLoaded;\n      var maxAndMin = this.isNormable() ? this.setMaxAndMin() : 0;\n      var hospitalObjects = variableIsTypeHospital ? filteredObjects : [];\n      var cantonObjects = !variableIsTypeHospital ? filteredObjects : [];\n\n      if (ready && view === 1) {\n        mapInfo = React.createElement(MapInfo, {\n          mapView: mapView,\n          year: year,\n          selectedVariable: variableInfo,\n          nrOfObjects: filteredObjects.length,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        });\n        componentToRender = mapView === 1 ? React.createElement(HospitalMap, {\n          data: hospitalObjects,\n          returnData: this.returnData,\n          maxAndMin: maxAndMin,\n          variableInfo: variableInfo,\n          year: year,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }) : React.createElement(CantonMap, {\n          data: cantonObjects,\n          returnData: this.returnData,\n          maxAndMin: this.setMaxAndMin(),\n          variableInfo: variableInfo,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Map // set up map\n      , {\n        className: \"map\",\n        center: [lat, lng],\n        zoom: this.state.zoom,\n        minZoom: 8 // set minimum zoom level\n        ,\n        maxZoom: 16 // set maximum zoom level\n        ,\n        zoomControl: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(ZoomControl, {\n        style: \"borderRadius=25px;\",\n        position: \"topright\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(Control, {\n        position: \"topright\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"rV\",\n        className: \"resetView\",\n        onClick: function onClick() {\n          return _this3.resetView();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })), React.createElement(TileLayer // add background layer\n      , {\n        attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://api.mapbox.com/styles/v1/nathi/cjf8cggx93p3u2qrqrgwoh5nh/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibmF0aGkiLCJhIjoiY2pmOGJ4ZXJmMXMyZDJ4bzRoYWRxbzhteCJ9.x2dbGjsVZTA9HLw6VWaQow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }), mapInfo, componentToRender);\n    }\n  }]);\n\n  return Maps;\n}(Component);\n\nexport default Maps;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/Maps.js"],"names":["React","Component","Map","TileLayer","ZoomControl","Control","MapInfo","TestComponent","HospitalMap","CantonMap","Maps","state","filteredObjects","lat","lng","zoom","returnData","item","varName","props","variableInfo","name","values","attributes","data","year","setMaxAndMin","min","max","sum","counter","map","obj","val","mean","squareDif","Math","pow","meanSquareDif","std","sqrt","isNormable","type","variable_type","resetView","setState","random","prevProps","objects","length","console","log","filter","object","view","mapView","hasLoaded","variableIsTypeHospital","variable_model","componentToRender","mapInfo","ready","maxAndMin","hospitalObjects","cantonObjects"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Map, TileLayer, ZoomControl } from 'react-leaflet'\nimport './Maps.css';\nimport Control from 'react-leaflet-control';\nimport MapInfo from '../MapInfo/MapInfo.js';\nimport TestComponent from './TestComponent.js';\nimport HospitalMap from './HospitalMap.js';\nimport CantonMap from './CantonMap.js';\n\n/**\n* Maps is the entity we use to draw a map.\n* The rendered JSX also consists of the buttons and mapInfo that should be rendered.\n* The current position of the map center and zoom are stored in the state.\n*/\nclass Maps extends Component {\n\tstate = {\n\t\tfilteredObjects : [],\n\t\tlat : 46.798473,\n\t\tlng : 8.231726,\n\t\tzoom : 8,\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.variableInfo !== prevProps.variableInfo && this.props.objects.length !== 0) {\n\t\t\tconsole.log(\"updated\");\n\t\t\tlet filteredObjects = this.props.objects.filter((object) => {\n\t\t\t\treturn (this.returnData(object));\n\t\t\t});\n\t\t\tconsole.log(\"objects: \" + this.props.objects.length);\n\t\t\tconsole.log(\"after filter: \" + filteredObjects.length);\n\n\t\t\tthis.setState({\n\t\t\t\tfilteredObjects : filteredObjects,\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n     * Returns the values stored in a this.props.objects canton/hospital\n     * @param  {Canton || Hospital Object} item The object to extract the values from\n     * @return {int || float || string} The selected entry in the item.values object\n     */\n\treturnData = (item) => {\n        let varName = this.props.variableInfo.name;\n\t\tlet values = item.attributes[varName];\n\t\tlet data = (values[this.props.year]);\n\t\treturn data;\n\t}\n\n\t/**\n   * Iterates through this.props.objects and finds mean, standard deviation, max and min values.\n   * @return {Object} Object.min minimum, Object.max maximum, Object.mean mean, Object.std standard deviation,\n \t*/\n\tsetMaxAndMin = () => {\n        let min = 1000000000000, max = 0, sum = 0, counter = 0;\n\n        this.state.filteredObjects.map((obj) => {\n            let val = this.returnData(obj);\n\n            if (obj.name !== \"Ganze Schweiz\") {\n                max = (max < val) ? val : max;\n                min = (min > val) ? val : min;\n                sum += val;\n                counter++;\n            }\n        })\n\n        const mean = sum/counter;\n        sum = 0;\n\n        this.state.filteredObjects.map((obj) => {\n            let val = this.returnData(obj);\n            if (obj.name !== \"Ganze Schweiz\") {\n                const squareDif = Math.pow(val - mean, 2);\n                sum += squareDif;\n            }\n        })\n\n        const meanSquareDif = sum/counter;\n        const std = Math.sqrt(meanSquareDif);\n\n        return {\n            mean: mean,\n            std: std,\n            max: max,\n            min: min\n        }\n\t}\n\n\t/**\n\t* Checks if the selected Variable passed through this.props.varInfo\n\t* is normable (a number or similar).\n\t* @return {Boolean}\n\t*/\n\tisNormable = () => {\n\t\tlet type = this.props.variableInfo.variable_type;\n\t\treturn (type === \"float\" || type === \"number\" || type === \"percentage\" || type === \"relevance\");\n\t}\n\n\t/**\n\t* Resets view to original position.\n\t* Math.random is needed so react does detect a state change and re-renders.\n\t*/\n \tresetView = () => {\n\t\tthis.setState({\n\t\t\tlat : 46.798473 + 0.1 * Math.random(),\n\t\t\tlng : 8.231726 + 0.1 * Math.random(),\n\t\t\tzoom : 8,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst {variableInfo, view, mapView, year, objects, hasLoaded} = this.props;\n\t\tconst {filteredObjects, lat, lng, zoom} = this.state;\n\t\tlet variableIsTypeHospital = (variableInfo.variable_model === \"Hospital\");\n\n\t\tlet componentToRender = null;\n\t\tlet mapInfo = null;\n\n        let ready = (hasLoaded);\n\n\t\tlet maxAndMin = (this.isNormable()) ? this.setMaxAndMin() : 0;\n\n\t\tlet hospitalObjects = (variableIsTypeHospital) ? filteredObjects : [];\n\t\tlet cantonObjects = (!variableIsTypeHospital) ? filteredObjects : [];\n\n        if (ready && view === 1) {\n            mapInfo = (\n                <MapInfo\n\t\t\t\t\tmapView={mapView}\n                    year={year}\n                    selectedVariable={variableInfo}\n                    nrOfObjects={filteredObjects.length}\n                />\n            )\n            componentToRender = (mapView === 1)\n            ? (\n\t\t\t\t<HospitalMap data={hospitalObjects}\n\t\t\t\t\treturnData={this.returnData}\n\t\t\t\t\tmaxAndMin={maxAndMin}\n\t\t\t\t\tvariableInfo={variableInfo}\n\t\t\t\t\tyear={year}\n\t\t\t\t/>\n            )\n            : (\n\t\t\t\t<CantonMap\n\t\t\t\t\tdata={cantonObjects}\n\t\t\t\t\treturnData={this.returnData}\n\t\t\t\t\tmaxAndMin={this.setMaxAndMin()}\n\t\t\t\t\tvariableInfo={variableInfo}\n\t\t\t\t/>\n            );\n        }\n\n        return (\n        \t<Map // set up map\n                className=\"map\"\n        \t\tcenter={[lat, lng]}\n        \t\tzoom={this.state.zoom}\n        \t\tminZoom={8} // set minimum zoom level\n        \t\tmaxZoom={16} // set maximum zoom level\n\t\t\t\tzoomControl={false}\n        \t>\n\t\t\t\t<ZoomControl\n\t\t\t\t\tstyle=\"borderRadius=25px;\"\n\t\t\t\t\tposition=\"topright\"\n\t\t\t\t/>\n\n\t\t\t\t<Control position=\"topright\">\n\t\t\t          \t<div\n\t\t\t\t\t\t\tid=\"rV\"\n\t\t\t\t\t\t\tclassName=\"resetView\"\n\t\t\t\t\t\t\tonClick={() => this.resetView()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t</div>\n\t\t      \t</Control>\n        \t\t<TileLayer // add background layer\n        \t\t\tattribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        \t\t\turl=\"https://api.mapbox.com/styles/v1/nathi/cjf8cggx93p3u2qrqrgwoh5nh/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibmF0aGkiLCJhIjoiY2pmOGJ4ZXJmMXMyZDJ4bzRoYWRxbzhteCJ9.x2dbGjsVZTA9HLw6VWaQow\"\n        \t\t/>\n                {mapInfo}\n        \t\t{componentToRender}\n        \t</Map>\n        )\n\t}\n}\n\nexport default Maps;\n"]},"metadata":{},"sourceType":"module"}