{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/DropdownMenu/DropdownMenu.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './DropdownMenu.css';\nimport { withTranslation } from \"react-i18next\";\n/**\n* DropdownMenu-Component that contains a search bar to filter the displayed\n*  list items.\n*\n* Required properties: see PropTypes section below\n*/\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownMenu, _Component);\n\n  function DropdownMenu() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropdownMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.selectItem = function (item) {\n      _this.props.selectItem(item, _this.props.id);\n\n      _this.toggleDropdown();\n    };\n\n    _this.searchFunction = function () {\n      var input, filter, a, i, div, txtValue;\n      input = document.getElementById(_this.props.id).querySelector('.searchbar');\n      filter = input.value.toUpperCase();\n      div = document.getElementById(_this.props.id);\n      a = div.getElementsByClassName('dropdownElem');\n\n      for (i = 0; i < a.length; i++) {\n        txtValue = a[i].textContent || a[i].innerText;\n\n        if (txtValue.toUpperCase().indexOf(filter) > -1) {\n          a[i].style.display = \"\";\n        } else {\n          a[i].style.display = \"none\";\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DropdownMenu, [{\n    key: \"toggleDropdown\",\n\n    /**\n    * toggleDropdown - toggles whether the DropdownMenu is opened or closed\n    */\n    value: function toggleDropdown() {\n      var allDropDowns = document.getElementsByClassName('dropdown-content');\n      var thisDropDown = document.getElementById(this.props.id);\n\n      for (var i = 0; i < allDropDowns.length; i++) {\n        if (allDropDowns[i] === thisDropDown) {\n          allDropDowns[i].classList.toggle('show');\n        } else {\n          allDropDowns[i].classList.remove('show');\n        }\n      }\n\n      if (thisDropDown.classList.contains('show')) {\n        thisDropDown.firstChild.focus();\n      }\n    }\n    /**\n    * selectItem - informs this.props.selectItem about the item that has been\n    * selected from the list. Also closes the menu.\n    *\n    * @param  {Object} item the list item that was selected\n    */\n\n  }, {\n    key: \"render\",\n\n    /**\n    * render - renders the component: A button to open and close the menu, a\n    * div that contains an input-textfield (for filtering) and every list item\n    * from the prop \"listItems\".\n    *\n    * @return {JSX}  JSX-Code of components\n    */\n    value: function render() {\n      var _this2 = this;\n\n      var varText = \"\";\n      var _this$props = this.props,\n          t = _this$props.t,\n          selectedItem = _this$props.selectedItem,\n          defaultText = _this$props.defaultText;\n      console.log(\"selected Item:\");\n      console.log(selectedItem);\n\n      if (selectedItem) {\n        if (selectedItem.text) {\n          varText = selectedItem.text;\n        } else {\n          // if contains cantons / variables\n          varText = selectedItem.name;\n        }\n      } else {\n        varText = defaultText ? defaultText : t('dropDowns.fallback');\n      }\n\n      if (varText.length > 30) {\n        varText = varText.substring(0, 27) + \"...\";\n      }\n\n      return React.createElement(\"div\", {\n        className: \"dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.toggleDropdown.bind(this),\n        className: \"dropbtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, varText, \" \\u25BC\"), React.createElement(\"div\", {\n        id: this.props.id,\n        className: \"dropdown-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: t('dropDowns.search'),\n        className: \"searchbar\",\n        onKeyUp: this.searchFunction.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"dropdown-options\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, this.props.listItems.map(function (item) {\n        return React.createElement(\"div\", {\n          className: \"dropdownElem\",\n          key: _this2.props.listItems.indexOf(item),\n          onClick: _this2.selectItem.bind(_this2, item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, item.text ? item.text : item.name);\n      }))));\n    }\n  }]);\n\n  return DropdownMenu;\n}(Component);\n/**\n* PropTypes\n*\n* listItems: an array containing all list items of the menu\n* selectItem: a function that will be called to inform the parent of the item\n*  that was selected\n* selectedItem: an object that represents the selected item\n*/\n\n\nDropdownMenu.propTypes = {\n  listItems: PropTypes.array.isRequired,\n  selectItem: PropTypes.func.isRequired\n};\nvar LocalizedDropdownMenu = withTranslation()(DropdownMenu);\nexport default LocalizedDropdownMenu;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/DropdownMenu/DropdownMenu.js"],"names":["React","Component","PropTypes","withTranslation","DropdownMenu","selectItem","item","props","id","toggleDropdown","searchFunction","input","filter","a","i","div","txtValue","document","getElementById","querySelector","value","toUpperCase","getElementsByClassName","length","textContent","innerText","indexOf","style","display","allDropDowns","thisDropDown","classList","toggle","remove","contains","firstChild","focus","varText","t","selectedItem","defaultText","console","log","text","name","substring","bind","listItems","map","propTypes","array","isRequired","func","LocalizedDropdownMenu"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './DropdownMenu.css';\nimport { withTranslation } from \"react-i18next\";\n\n/**\n* DropdownMenu-Component that contains a search bar to filter the displayed\n*  list items.\n*\n* Required properties: see PropTypes section below\n*/\nclass DropdownMenu extends Component {\n\n    /**\n    * toggleDropdown - toggles whether the DropdownMenu is opened or closed\n    */\n    toggleDropdown() {\n        let allDropDowns = document.getElementsByClassName('dropdown-content');\n        let thisDropDown = document.getElementById(this.props.id);\n        for (let i = 0; i < allDropDowns.length; i++) {\n            if (allDropDowns[i] === thisDropDown) {\n                allDropDowns[i].classList.toggle('show');\n            } else {\n                allDropDowns[i].classList.remove('show');\n            }\n        }\n        if (thisDropDown.classList.contains('show')) {\n            thisDropDown.firstChild.focus();\n        }\n    }\n\n    /**\n    * selectItem - informs this.props.selectItem about the item that has been\n    * selected from the list. Also closes the menu.\n    *\n    * @param  {Object} item the list item that was selected\n    */\n    selectItem = (item) => {\n        this.props.selectItem(item, this.props.id);\n        this.toggleDropdown();\n    }\n\n    /**\n    * searchFunction - filters the displayed listitems using input from the\n    * textfield\n    */\n    searchFunction = () => {\n        let input, filter, a, i, div, txtValue;\n        input = document.getElementById(this.props.id).querySelector('.searchbar');\n        filter = input.value.toUpperCase();\n        div = document.getElementById(this.props.id);\n        a = div.getElementsByClassName('dropdownElem');\n\n        for (i = 0; i < a.length; i++) {\n            txtValue = a[i].textContent || a[i].innerText;\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\n                a[i].style.display = \"\";\n            } else {\n                a[i].style.display = \"none\";\n            }\n        }\n    }\n\n    /**\n    * render - renders the component: A button to open and close the menu, a\n    * div that contains an input-textfield (for filtering) and every list item\n    * from the prop \"listItems\".\n    *\n    * @return {JSX}  JSX-Code of components\n    */\n    render() {\n        let varText = \"\";\n        const {t, selectedItem, defaultText} = this.props;\n        console.log(\"selected Item:\");\n        console.log(selectedItem);\n\n        if (selectedItem) {\n            if (selectedItem.text) {\n                varText = selectedItem.text;\n            } else { // if contains cantons / variables\n                varText = selectedItem.name;\n            }\n        } else {\n            varText = (defaultText) ? defaultText : t('dropDowns.fallback');\n        }\n\n        if (varText.length > 30) {\n            varText = varText.substring(0, 27) + \"...\"\n        }\n\n        return (\n            <div className=\"dropdown\">\n                <button onClick={this.toggleDropdown.bind(this)} className=\"dropbtn\">{varText} ▼</button>\n                <div id={this.props.id} className=\"dropdown-content\">\n                    <input type=\"text\" placeholder={t('dropDowns.search')} className=\"searchbar\" onKeyUp={this.searchFunction.bind(this)} />\n                    <div className=\"dropdown-options\">\n                    {\n                        this.props.listItems.map((item) => (\n                            <div className=\"dropdownElem\" key={this.props.listItems.indexOf(item)} onClick={this.selectItem.bind(this, item)}>{item.text ? item.text : item.name}</div>\n                        ))\n                    }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n* PropTypes\n*\n* listItems: an array containing all list items of the menu\n* selectItem: a function that will be called to inform the parent of the item\n*  that was selected\n* selectedItem: an object that represents the selected item\n*/\nDropdownMenu.propTypes = {\n    listItems: PropTypes.array.isRequired,\n    selectItem: PropTypes.func.isRequired,\n}\n\nconst LocalizedDropdownMenu = withTranslation()(DropdownMenu);\nexport default LocalizedDropdownMenu;\n"]},"metadata":{},"sourceType":"module"}