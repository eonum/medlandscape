{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/CentralPanel/CentralPanel.js\";\nimport React, { Component } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport InteractiveTable from '../InteractiveTable/InteractiveTable.js';\nimport BoxPlot from '../Graphs/BoxPlot.js';\nimport LinearRegression from '../Graphs/LinearRegression.js';\nimport './centralPanel.css';\n/**\n* CentralPanel-Component that contains a field which is used to displayed\n* the InteractiveTable, BoxPlot and LinearRegression\n*\n*/\n\nvar CentralPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CentralPanel, _Component);\n\n  function CentralPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CentralPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CentralPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tableDataLoaded: false\n      /* requests the Data tha is going to be used in the table component, depending on the selected Variable */\n\n    };\n\n    _this.requestTableData = function (vars, callback) {\n      var requestedVars = \"\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = vars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var variable = _step.value;\n          requestedVars += variable.name + '$';\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      requestedVars = requestedVars.substring(0, requestedVars.length - 1);\n      var query = \"hospitals?variables=\" + requestedVars;\n      console.log(\"FETCHING from CentralPanel\");\n\n      _this.props.fetchData(query).then(function () {\n        _this.setState({\n          tableDataLoaded: true\n        }, function () {\n          if (callback) {\n            callback();\n          }\n        });\n      });\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.retriggerTableGeneration = function () {\n      _this.setState({\n        tableDataLoaded: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CentralPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          objects = _this$props.objects,\n          hasLoaded = _this$props.hasLoaded,\n          selectedVariable = _this$props.selectedVariable,\n          year = _this$props.year,\n          setVariable = _this$props.setVariable;\n      var tableDataLoaded = this.state.tableDataLoaded;\n      var hospitalVars = this.props.variables.filter(function (variable) {\n        return variable.variable_model === \"Hospital\";\n      });\n      var tableView = React.createElement(InteractiveTable, {\n        variables: hospitalVars,\n        hospitals: objects,\n        requestData: this.requestTableData,\n        tableDataLoaded: tableDataLoaded,\n        tableDataGenerated: this.tableDataGenerated,\n        retriggerTableGeneration: this.retriggerTableGeneration,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      });\n      var boxPlot = React.createElement(BoxPlot, {\n        objects: objects,\n        selectedVariable: selectedVariable,\n        year: year,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n      var linReg = React.createElement(LinearRegression, {\n        hospitals: objects,\n        setVariable: setVariable,\n        requestData: this.requestTableData,\n        tableDataLoaded: tableDataLoaded,\n        tableDataGenerated: this.tableDataGenerated,\n        variables: hospitalVars,\n        year: year,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n      var graphView = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.props.graphView === 1 ? boxPlot : linReg);\n      var mainView;\n\n      switch (this.props.view) {\n        case 2:\n          mainView = tableView;\n          break;\n\n        case 3:\n          mainView = graphView;\n          break;\n\n        default:\n          mainView = null;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"central-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, mainView);\n    }\n  }]);\n\n  return CentralPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedCentralPanel = withTranslation()(CentralPanel);\nexport default LocalizedCentralPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/CentralPanel/CentralPanel.js"],"names":["React","Component","withTranslation","InteractiveTable","BoxPlot","LinearRegression","CentralPanel","state","tableDataLoaded","requestTableData","vars","callback","requestedVars","variable","name","substring","length","query","console","log","props","fetchData","then","setState","tableDataGenerated","retriggerTableGeneration","objects","hasLoaded","selectedVariable","year","setVariable","hospitalVars","variables","filter","variable_model","tableView","boxPlot","linReg","graphView","mainView","view","LocalizedCentralPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withTranslation } from 'react-i18next';\nimport InteractiveTable from '../InteractiveTable/InteractiveTable.js';\nimport BoxPlot from '../Graphs/BoxPlot.js';\nimport LinearRegression from '../Graphs/LinearRegression.js';\nimport './centralPanel.css'\n\n/**\n* CentralPanel-Component that contains a field which is used to displayed\n* the InteractiveTable, BoxPlot and LinearRegression\n*\n*/\n\nclass CentralPanel extends Component {\n\n    state = {\n        tableDataLoaded : false\n    }\n\n\t/* requests the Data tha is going to be used in the table component, depending on the selected Variable */\n    requestTableData = (vars, callback) => {\n        let requestedVars = \"\";\n\n        for (let variable of vars) {\n            requestedVars += variable.name + '$';\n        }\n\n        requestedVars = requestedVars.substring(0, requestedVars.length - 1);\n\n        let query = \"hospitals?variables=\" + requestedVars;\n\n        console.log(\"FETCHING from CentralPanel\");\n        this.props.fetchData(query).then(() => {\n            this.setState({\n                tableDataLoaded : true\n            }, () => { if (callback) { callback(); }});\n        })\n    }\n\n\t/*sets the state of the generated to \"not loaded\"*/\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\t/*sets the state of the generated to \"loaded\"*/\n    retriggerTableGeneration = () => {\n        this.setState({\n            tableDataLoaded : true\n        });\n    }\n\n    render() {\n        const { objects, hasLoaded, selectedVariable, year, setVariable } = this.props;\n        const { tableDataLoaded, } = this.state;\n        let hospitalVars = this.props.variables.filter(variable => {\n            return (variable.variable_model === \"Hospital\")\n        });\n        let tableView = (\n            <InteractiveTable\n                variables={hospitalVars}\n                hospitals={objects}\n                requestData={this.requestTableData}\n                tableDataLoaded={tableDataLoaded}\n                tableDataGenerated={this.tableDataGenerated}\n                retriggerTableGeneration={this.retriggerTableGeneration}\n                hasLoaded={hasLoaded}\n            />\n        );\n\n        let boxPlot = (\n            <BoxPlot\n                objects={objects}\n                selectedVariable={selectedVariable}\n                year={year}\n                hasLoaded={hasLoaded}\n            />\n        )\n\n        let linReg = (\n            <LinearRegression\n                hospitals={objects}\n                setVariable={setVariable}\n                requestData={this.requestTableData}\n                tableDataLoaded={tableDataLoaded}\n                tableDataGenerated={this.tableDataGenerated}\n                variables={hospitalVars}\n                year={year}\n                hasLoaded={hasLoaded}\n            />\n        )\n\n\t\tlet graphView = (\n\t\t\t<div>\n                {\n                    (this.props.graphView === 1)\n                    ? boxPlot\n                    : linReg\n                }\n\t\t\t</div>\n\t\t);\n\n        let mainView;\n        switch (this.props.view) {\n            case 2:\n                mainView = tableView;\n                break;\n            case 3:\n                mainView = graphView;\n                break;\n            default:\n                mainView = null;\n        }\n\n        return (\n\t\t\t<div className={\"central-panel\"}>\n            \t{mainView}\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedCentralPanel = withTranslation()(CentralPanel);\nexport default LocalizedCentralPanel;\n"]},"metadata":{},"sourceType":"module"}