{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js';\nimport CentralPanel from './components/CentralPanel/CentralPanel.js';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      hospitals: [],\n      cantons: [],\n      // different variables applied to the different views\n      hospitalMapSelectedVariable: {},\n      cantonMapSelectedVariable: {},\n      boxPlotSelectedVariable: {},\n      // different hospital results stored per view\n      mapHospitals: [],\n      tableHospitals: [],\n      boxPlotHospitals: [],\n      regressionHospitals: [],\n      // results of the different filters\n      hospitalsByEnums: [],\n      hospitalsByType: [],\n      unfilteredHospitals: [],\n      filteredHospitals: [],\n      years: [],\n      selectedYear: \"\",\n      view: 1,\n      mapView: 1,\n      graphView: 1,\n      lastQuery: \"\",\n      hasLoaded: false,\n      tableDataLoaded: false\n      /**\n      * Calls the API with specific query.\n      * @param  {String} query The specific query to use for the API call.\n      */\n\n    };\n\n    _this.applyVariables = function (query) {\n      console.log(\"FETCHING DATA, QUERY: \" + query);\n      var key;\n      return _this.apiCall(query).then(function (results) {\n        var _this$setState;\n\n        console.log(\"DATA FETCHED\");\n\n        if (_this.state.view === 1) {\n          key = _this.state.mapView === 1 ? \"mapHospitals\" : \"cantons\";\n        } else if (_this.state.view === 2) {\n          key = \"tableHospitals\";\n        } else {\n          key = _this.state.graphView === 1 ? \"boxPlotHospitals\" : \"regressionHospitals\";\n        }\n\n        _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"lastQuery\", query), _defineProperty(_this$setState, \"hasLoaded\", _this.state.view !== 1), _this$setState), function () {\n          if (_this.state.view === 1) {\n            if (_this.state.mapView === 1) {\n              // only needed for hospitals while on the map View\n              _this.filterHospitals();\n            } else {\n              _this.getYears();\n            }\n          }\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + _this.props.i18n.language + apiRequest + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.changeLanguage = function () {\n      //this.initApiCall();\n      var _this$state = _this.state,\n          view = _this$state.view,\n          mapView = _this$state.mapView,\n          hospitalMapSelectedVariable = _this$state.hospitalMapSelectedVariable,\n          cantonMapSelectedVariable = _this$state.cantonMapSelectedVariable,\n          boxPlotSelectedVariable = _this$state.boxPlotSelectedVariable,\n          mapHospitals = _this$state.mapHospitals,\n          tableHospitals = _this$state.tableHospitals,\n          boxPlotHospitals = _this$state.boxPlotHospitals,\n          regressionHospitals = _this$state.regressionHospitals,\n          cantons = _this$state.cantons;\n\n      _this.apiCall(\"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        });\n\n        var typeVar = result.filter(function (variable) {\n          return variable.name === \"Typ\";\n        }); // // different variables applied to the different views\n        // cantonMapSelectedVariable : {},\n        // boxPlotSelectedVariable : {},\n        //\n        // // different hospital results stored per view\n        // mapHospitals : [],\n        // tableHospitals : [],\n        // boxPlotHospitals : [],\n        // regressionHospitals : [],\n\n        var hMSV, cMSV, bPSV, mH, tH, bH, rH, can;\n\n        for (var i = 0; i < result.length; i++) {\n          if (result[i].name === hospitalMapSelectedVariable) {\n            hMSV = result[i];\n            var query = \"hospitals?variables=\";\n            query += encodeURIComponent(hMSV.name + \"$\" + typeVar[0].name);\n            mH = _this.apiCall(query);\n          } else if (result[i].name === cantonMapSelectedVariable) {\n            cMSV = result[i];\n            var _query = \"cantons?variables=\";\n            _query += encodeURIComponent(cMSV.name);\n            can = _this.apiCall(_query);\n          } else if (result[i].name === boxPlotSelectedVariable) {\n            bPSV = result[i];\n            var _query2 = \"hospitals?variables=\";\n            _query2 += encodeURIComponent(bPSV.name);\n            can = _this.apiCall(_query2);\n          }\n        }\n\n        _this.setState({});\n\n        if (mapView === 1 && view === 1) {}\n      }); // implement resendLastCall to avoid resetting when changing the language\n\n    };\n\n    _this.resendLastCall = function () {\n      _this.applyVariables(_this.state.lastQuery);\n    };\n\n    _this.initApiCall = function () {\n      // fetching all hospitals from the API\n      _this.apiCall(\"hospitals\").then(function (result) {\n        _this.setState({\n          hospitals: result\n        });\n      }); // fetches all Variables from the API\n\n\n      _this.apiCall(\"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        }); // the \"type\" variable which is loaded with every request\n\n\n        var typeVar = result.filter(function (variable) {\n          return variable.name === \"Typ\";\n        }); // the default variable chosen when loading the app\n\n        _this.setVariable(result[1]);\n\n        var query = \"hospitals?variables=\";\n        query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n\n        _this.applyVariables(query);\n      });\n    };\n\n    _this.setVariable = function (item) {\n      console.log(\"============================\");\n      console.log(\"SETTING variable to \" + item.name);\n\n      var key = _this.getViewSpecificVariable();\n\n      if (_this.state[key] !== item) {\n        var _this$setState2;\n\n        _this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, key, item), _defineProperty(_this$setState2, \"hasLoaded\", false), _this$setState2));\n      } else {\n        console.log(\"Same Variable selected, nothing to change.\");\n      }\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.filterHospitals = function () {\n      // console.log(\"FILTERING has started\");\n      var _this$state2 = _this.state,\n          hospitalsByEnums = _this$state2.hospitalsByEnums,\n          hospitalsByType = _this$state2.hospitalsByType,\n          mapHospitals = _this$state2.mapHospitals; // console.log(\"hospitals by enums: \" + hospitalsByEnums.length);\n      // console.log(\"hospital by type: \" + hospitalsByType.length);\n\n      var filteredHospitals = [],\n          intersectingHospitals = []; // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n\n      if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n        // in case of no matches, there would be no need to do intersection\n        if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n          // we have to compare names because the attribute of each hospital has a different length\n          for (var i = 0; i < hospitalsByType.length; i++) {\n            for (var j = 0; j < hospitalsByEnums.length; j++) {\n              if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                intersectingHospitals.push(hospitalsByEnums[j]);\n              }\n            }\n          }\n        } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n          intersectingHospitals = hospitalsByType > hospitalsByEnums ? hospitalsByType : hospitalsByEnums;\n        } else {\n          filteredHospitals = mapHospitals;\n        }\n\n        if (intersectingHospitals.length > 0) {\n          for (var _i = 0; _i < intersectingHospitals.length; _i++) {\n            for (var _j = 0; _j < mapHospitals.length; _j++) {\n              if (intersectingHospitals[_i].name === mapHospitals[_j].name) {\n                filteredHospitals.push(mapHospitals[_j]);\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"DATA FILTERED\");\n      var unfiltered = mapHospitals;\n\n      _this.setState({\n        filteredHospitals: filteredHospitals,\n        unfilteredHospitals: unfiltered\n      }, function () {\n        _this.getYears();\n      });\n    };\n\n    _this.getYears = function () {\n      var name = _this.state[_this.getViewSpecificVariable()].name;\n\n      var objects;\n\n      switch (_this.state.view) {\n        case 1:\n          objects = _this.state.mapView === 1 ? _this.state.mapHospitals : _this.state.cantons;\n          break;\n\n        case 3:\n          objects = _this.state.graphView === 1 ? _this.state.boxPlotHospitals : _this.state.regressionHospitals;\n          break;\n\n        default:\n          objects = [];\n      }\n\n      var maxYears = [0],\n          years;\n\n      if (objects.length > 0) {\n        for (var i = 0; i < objects.length; i++) {\n          years = Object.keys(objects[i].attributes[name]);\n          maxYears = years.length > maxYears.length ? years : maxYears;\n        }\n      }\n\n      _this.setState({\n        years: maxYears,\n        selectedYear: maxYears[0],\n        hasLoaded: true\n      });\n    };\n\n    _this.getViewSpecificVariable = function () {\n      var v;\n\n      switch (_this.state.view) {\n        case 1:\n          v = _this.state.mapView === 1 ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\";\n          break;\n\n        case 3:\n          v = \"boxPlotSelectedVariable\";\n          break;\n\n        default:\n          v = \"hospitalMapSelectedVariable\";\n      }\n\n      return v;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.setView = function (view) {\n      console.log(\"SWITCHING TABVIEW\");\n\n      _this.setState({\n        view: view,\n        hasLoaded: false\n      }, function () {\n        _this.getYears();\n      });\n    };\n\n    _this.setMapView = function (view) {\n      console.log(\"SWITCHING MAPVIEW\");\n\n      _this.setState({\n        mapView: view,\n        hasLoaded: false\n      }, function () {\n        _this.getYears();\n      });\n    };\n\n    _this.setGraphView = function (view) {\n      console.log(\"SWITCHING GRAPHVIEW\");\n\n      _this.setState({\n        graphView: view,\n        hasLoaded: false\n      });\n    };\n\n    _this.setHospitalsByEnums = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByEnums: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n\n        _this.filterHospitals();\n      });\n    };\n\n    _this.setHospitalsByType = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByType: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n\n        _this.filterHospitals();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          variables = _this$state3.variables,\n          hospitals = _this$state3.hospitals,\n          cantons = _this$state3.cantons,\n          hospitalMapSelectedVariable = _this$state3.hospitalMapSelectedVariable,\n          cantonMapSelectedVariable = _this$state3.cantonMapSelectedVariable,\n          boxPlotSelectedVariable = _this$state3.boxPlotSelectedVariable,\n          mapHospitals = _this$state3.mapHospitals,\n          tableHospitals = _this$state3.tableHospitals,\n          boxPlotHospitals = _this$state3.boxPlotHospitals,\n          regressionHospitals = _this$state3.regressionHospitals,\n          unfilteredHospitals = _this$state3.unfilteredHospitals,\n          filteredHospitals = _this$state3.filteredHospitals,\n          years = _this$state3.years,\n          selectedYear = _this$state3.selectedYear,\n          view = _this$state3.view,\n          mapView = _this$state3.mapView,\n          graphView = _this$state3.graphView,\n          hasLoaded = _this$state3.hasLoaded;\n      var viewSpecificObjects;\n      var viewSpecificVariable;\n\n      switch (view) {\n        case 1:\n          viewSpecificObjects = mapView === 1 ? filteredHospitals : cantons;\n          viewSpecificVariable = mapView === 1 ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n          break;\n\n        case 2:\n          // use hospitals if tableHospitals not yet set\n          viewSpecificObjects = tableHospitals.length > 0 ? tableHospitals : hospitals;\n          break;\n\n        case 3:\n          viewSpecificObjects = graphView === 1 ? boxPlotHospitals : regressionHospitals;\n          viewSpecificVariable = boxPlotSelectedVariable;\n          break;\n\n        default:\n          viewSpecificObjects = mapHospitals;\n          viewSpecificVariable = hospitalMapSelectedVariable;\n          break;\n      }\n\n      var centralPanel = view !== 1 ? React.createElement(CentralPanel, {\n        view: view,\n        graphView: graphView,\n        variables: variables,\n        hasLoaded: hasLoaded,\n        fetchData: this.applyVariables,\n        objects: viewSpecificObjects,\n        variableInfo: viewSpecificVariable,\n        year: selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        },\n        __self: this\n      }) : null;\n      var slider;\n\n      if (hasLoaded) {\n        console.log(\"DATA READY\");\n        console.log(\"SAMPLE:\");\n        console.log(viewSpecificObjects[0]);\n\n        if (years.length > 1 && view === 1 && viewSpecificObjects.length > 0) {\n          slider = React.createElement(Slider, {\n            years: years,\n            selectedYear: selectedYear,\n            setYear: this.setYear,\n            hasLoaded: hasLoaded,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 449\n            },\n            __self: this\n          });\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }, React.createElement(Maps, {\n        objects: viewSpecificObjects,\n        selectedVariable: viewSpecificVariable,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        mapView: mapView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463\n        },\n        __self: this\n      }, React.createElement(ControlPanel, {\n        variables: variables,\n        setVariable: this.setVariable,\n        selectedVariable: viewSpecificVariable,\n        fetchData: this.applyVariables,\n        unfilteredHospitals: unfilteredHospitals,\n        filterByEnum: this.setHospitalsByEnums,\n        filterByType: this.setHospitalsByType,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        setView: this.setView,\n        mapView: mapView,\n        setMapView: this.setMapView,\n        graphView: graphView,\n        setGraphView: this.setGraphView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }), centralPanel, React.createElement(LanguagePicker, {\n        changeAPILang: this.changeLanguage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482\n        },\n        __self: this\n      }), slider));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","Maps","withTranslation","ControlPanel","CentralPanel","LanguagePicker","Slider","apiURL","apiRequest","App","state","variables","hospitals","cantons","hospitalMapSelectedVariable","cantonMapSelectedVariable","boxPlotSelectedVariable","mapHospitals","tableHospitals","boxPlotHospitals","regressionHospitals","hospitalsByEnums","hospitalsByType","unfilteredHospitals","filteredHospitals","years","selectedYear","view","mapView","graphView","lastQuery","hasLoaded","tableDataLoaded","applyVariables","query","console","log","key","apiCall","then","results","setState","filterHospitals","getYears","fetch","props","i18n","language","res","json","changeLanguage","result","typeVar","filter","variable","name","hMSV","cMSV","bPSV","mH","tH","bH","rH","can","i","length","encodeURIComponent","resendLastCall","initApiCall","setVariable","item","getViewSpecificVariable","tableDataGenerated","intersectingHospitals","j","push","unfiltered","objects","maxYears","Object","keys","attributes","v","setYear","year","setView","setMapView","setGraphView","setHospitalsByEnums","selectedHospitals","setHospitalsByType","viewSpecificObjects","viewSpecificVariable","centralPanel","slider","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js'\nimport CentralPanel from './components/CentralPanel/CentralPanel.js'\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js'\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables : [],\n        hospitals : [],\n        cantons : [],\n\n        // different variables applied to the different views\n        hospitalMapSelectedVariable : {},\n        cantonMapSelectedVariable : {},\n        boxPlotSelectedVariable : {},\n\n        // different hospital results stored per view\n        mapHospitals : [],\n        tableHospitals : [],\n        boxPlotHospitals : [],\n        regressionHospitals : [],\n\n        // results of the different filters\n        hospitalsByEnums : [],\n        hospitalsByType : [],\n        unfilteredHospitals : [],\n        filteredHospitals : [],\n\n        years : [],\n        selectedYear : \"\",\n\n        view : 1,\n        mapView : 1,\n        graphView : 1,\n        lastQuery : \"\",\n\n        hasLoaded : false,\n        tableDataLoaded : false\n    }\n\n    /**\n    * Calls the API with specific query.\n    * @param  {String} query The specific query to use for the API call.\n    */\n    applyVariables = (query) => {\n        console.log(\"FETCHING DATA, QUERY: \" + query);\n        let key;\n        return this.apiCall(query).then((results) => {\n            console.log(\"DATA FETCHED\");\n            if (this.state.view === 1) {\n                key = (this.state.mapView === 1) ? \"mapHospitals\" : \"cantons\";\n            } else if (this.state.view === 2) {\n                key = \"tableHospitals\";\n            } else {\n                key = (this.state.graphView === 1) ? \"boxPlotHospitals\" : \"regressionHospitals\";\n            }\n\n            this.setState({\n                [key] : results,\n                lastQuery : query,\n                hasLoaded : (this.state.view !== 1)\n            }, () => {\n                if (this.state.view === 1) {\n                    if (this.state.mapView === 1) {\n                        // only needed for hospitals while on the map View\n                        this.filterHospitals();\n                    } else {\n                        this.getYears()\n                    }\n                }\n            })\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + this.props.i18n.language + apiRequest + query).then(res => res.json());\n    }\n\n    changeLanguage = () => {\n        //this.initApiCall();\n        const {view, mapView, hospitalMapSelectedVariable, cantonMapSelectedVariable, boxPlotSelectedVariable, mapHospitals, tableHospitals, boxPlotHospitals, regressionHospitals, cantons} = this.state;\n        this.apiCall(\"variables\").then((result) => {\n            this.setState({\n                variables : result,\n            });\n\n            let typeVar = result.filter((variable) => {\n                return (variable.name === \"Typ\");\n            })\n\n            // // different variables applied to the different views\n            // cantonMapSelectedVariable : {},\n            // boxPlotSelectedVariable : {},\n            //\n            // // different hospital results stored per view\n            // mapHospitals : [],\n            // tableHospitals : [],\n            // boxPlotHospitals : [],\n            // regressionHospitals : [],\n            let hMSV, cMSV, bPSV, mH, tH, bH, rH, can;\n\n            for (var i = 0; i < result.length; i++) {\n                if (result[i].name === hospitalMapSelectedVariable) {\n                    hMSV = result[i];\n                    let query = \"hospitals?variables=\";\n                    query += encodeURIComponent(hMSV.name + \"$\" + typeVar[0].name);\n                    mH = this.apiCall(query);\n                } else if (result[i].name === cantonMapSelectedVariable) {\n                    cMSV = result[i];\n                    let query = \"cantons?variables=\";\n                    query += encodeURIComponent(cMSV.name);\n                    can = this.apiCall(query);\n                } else if (result[i].name === boxPlotSelectedVariable) {\n                    bPSV = result[i];\n                    let query = \"hospitals?variables=\";\n                    query += encodeURIComponent(bPSV.name);\n                    can = this.apiCall(query);\n                }\n            }\n\n            this.setState({})\n\n            if (mapView === 1 && view === 1) {\n\n            }\n        });\n        // implement resendLastCall to avoid resetting when changing the language\n    }\n\n    resendLastCall = () => {\n        this.applyVariables(this.state.lastQuery);\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        // fetching all hospitals from the API\n        this.apiCall(\"hospitals\").then((result) => {\n            this.setState({\n                hospitals : result\n            });\n        })\n\n        // fetches all Variables from the API\n        this.apiCall(\"variables\").then((result) => {\n            this.setState({\n                variables : result\n            });\n\n            // the \"type\" variable which is loaded with every request\n            let typeVar = result.filter((variable) => {\n                return (variable.name === \"Typ\");\n            })\n\n            // the default variable chosen when loading the app\n            this.setVariable(result[1]);\n            let query = \"hospitals?variables=\";\n            query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n            this.applyVariables(query);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * @param  {Variable object} item The selected variable.\n    */\n    setVariable = (item) => {\n        console.log(\"============================\");\n        console.log(\"SETTING variable to \" + item.name);\n        let key = this.getViewSpecificVariable();\n\n        if (this.state[key] !== item) {\n            this.setState({\n                [key] : item,\n                hasLoaded : false\n            });\n        } else {\n            console.log(\"Same Variable selected, nothing to change.\");\n        }\n    }\n\n    /**\n     * Comment here please\n     */\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    /**\n     * Determines which Hospitals to display on the map according to fitlers.\n     * @return {Array} The array of hospitals to display.\n     */\n    filterHospitals = () => {\n        // console.log(\"FILTERING has started\");\n        const {hospitalsByEnums, hospitalsByType, mapHospitals} = this.state;\n        // console.log(\"hospitals by enums: \" + hospitalsByEnums.length);\n        // console.log(\"hospital by type: \" + hospitalsByType.length);\n        let filteredHospitals = [], intersectingHospitals = [];\n        // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n        if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n\n            // in case of no matches, there would be no need to do intersection\n            if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n                // we have to compare names because the attribute of each hospital has a different length\n                for (let i = 0; i < hospitalsByType.length; i++) {\n                    for (let j = 0; j < hospitalsByEnums.length; j++) {\n                        if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                            intersectingHospitals.push(hospitalsByEnums[j]);\n                        }\n                    }\n                }\n            } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n                intersectingHospitals = (hospitalsByType > hospitalsByEnums) ? hospitalsByType : hospitalsByEnums;\n            } else {\n                filteredHospitals = mapHospitals;\n            }\n\n            if (intersectingHospitals.length > 0) {\n                for (let i = 0; i < intersectingHospitals.length; i++) {\n                    for (let j = 0; j < mapHospitals.length; j++) {\n                        if (intersectingHospitals[i].name === mapHospitals[j].name) {\n                            filteredHospitals.push(mapHospitals[j]);\n                        }\n                    }\n                }\n            }\n        }\n        console.log(\"DATA FILTERED\");\n        let unfiltered = mapHospitals;\n        this.setState({\n            filteredHospitals : filteredHospitals,\n            unfilteredHospitals : unfiltered,\n        }, () => {\n            this.getYears();\n        });\n    }\n\n    /**\n     * Returns list of available years for selected Variable.\n     * @return {Array} The available years.\n     */\n    getYears = () => {\n        const {name} = this.state[this.getViewSpecificVariable()];\n\n        let objects;\n\n        switch (this.state.view) {\n            case 1:\n                objects = (this.state.mapView === 1) ? this.state.mapHospitals : this.state.cantons;\n                break;\n            case 3:\n                objects = (this.state.graphView === 1) ? this.state.boxPlotHospitals : this.state.regressionHospitals;\n                break;\n            default:\n                objects = [];\n        }\n\n        let maxYears = [0], years;\n\n        if (objects.length > 0) {\n            for (let i = 0; i < objects.length; i++) {\n                years = Object.keys(objects[i].attributes[name]);\n                maxYears = (years.length > maxYears.length) ? years : maxYears;\n            }\n        }\n\n        this.setState({\n            years : maxYears,\n            selectedYear : maxYears[0],\n            hasLoaded : true\n        })\n    }\n\n    getViewSpecificVariable = () => {\n        let v;\n        switch (this.state.view) {\n            case 1:\n                v = (this.state.mapView === 1) ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\"\n                break;\n            case 3:\n                v = \"boxPlotSelectedVariable\";\n                break;\n            default:\n                v = \"hospitalMapSelectedVariable\";\n        }\n        return v;\n    }\n\n    /**\n     * Setter for the selectedYear state variable.\n     * @param {String} year The selected year.\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year\n        })\n    }\n\n    /**\n     * Setter for the view state variable.\n     * @param {int} view The selected view.\n     */\n    setView = (view) => {\n        console.log(\"SWITCHING TABVIEW\");\n\n        this.setState({\n            view : view,\n            hasLoaded : false\n        }, () => {\n            this.getYears();\n        });\n    }\n\n    setMapView = (view) => {\n        console.log(\"SWITCHING MAPVIEW\");\n\n        this.setState({\n            mapView : view,\n            hasLoaded : false\n        }, () => {\n            this.getYears();\n        });\n    }\n\n    setGraphView = (view) => {\n        console.log(\"SWITCHING GRAPHVIEW\");\n\n        this.setState({\n            graphView : view,\n            hasLoaded : false\n        });\n    }\n\n    /**\n     * Set hospitalsByEnums to the selected Hospital Variable\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByEnums = (selectedHospitals) => {\n        this.setState({\n            hospitalsByEnums : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n            this.filterHospitals();\n        })\n    }\n\n    /**\n     * Set hospitalsByType to selected Hospital Type\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByType = (selectedHospitals) => {\n        this.setState({\n            hospitalsByType : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n            this.filterHospitals();\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        const {\n            variables,\n            hospitals,\n            cantons,\n            hospitalMapSelectedVariable,\n            cantonMapSelectedVariable,\n            boxPlotSelectedVariable,\n            mapHospitals,\n            tableHospitals,\n            boxPlotHospitals,\n            regressionHospitals,\n            unfilteredHospitals,\n            filteredHospitals,\n            years,\n            selectedYear,\n            view,\n            mapView,\n            graphView,\n            hasLoaded\n        } = this.state;\n\n        let viewSpecificObjects;\n        let viewSpecificVariable;\n\n        switch (view) {\n            case 1:\n                viewSpecificObjects = (mapView === 1) ? filteredHospitals : cantons;\n                viewSpecificVariable = (mapView === 1) ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n                break;\n            case 2:\n                // use hospitals if tableHospitals not yet set\n                viewSpecificObjects = (tableHospitals.length > 0) ? tableHospitals : hospitals;\n                break;\n            case 3:\n                viewSpecificObjects = (graphView === 1) ? boxPlotHospitals : regressionHospitals;\n                viewSpecificVariable = boxPlotSelectedVariable;\n                break;\n            default:\n                viewSpecificObjects = mapHospitals;\n                viewSpecificVariable = hospitalMapSelectedVariable;\n                break;\n        }\n\n        let centralPanel = (view !== 1)\n            ? (\n                <CentralPanel\n                    view={view}\n                    graphView={graphView}\n                    variables={variables}\n                    hasLoaded={hasLoaded}\n                    fetchData={this.applyVariables}\n\t\t\t\t\tobjects={viewSpecificObjects}\n                    variableInfo={viewSpecificVariable}\n                    year={selectedYear}\n                />\n            )\n            : null\n        ;\n\n        let slider;\n\n        if (hasLoaded) {\n            console.log(\"DATA READY\");\n            console.log(\"SAMPLE:\");\n            console.log(viewSpecificObjects[0]);\n            if (years.length > 1 && view === 1 && viewSpecificObjects.length > 0) {\n                slider = (<Slider years={years} selectedYear={selectedYear} setYear={this.setYear} hasLoaded={hasLoaded}/>);\n            }\n        }\n\n        return (\n\t\t\t<div className=\"App\">\n                <Maps\n                    objects={viewSpecificObjects}\n                    selectedVariable={viewSpecificVariable}\n                    year={selectedYear}\n                    hasLoaded={hasLoaded}\n                    view={view}\n                    mapView={mapView}\n                />\n                <div className=\"grid-container\">\n                    <ControlPanel\n                        variables={variables}\n                        setVariable={this.setVariable}\n                        selectedVariable={viewSpecificVariable}\n                        fetchData={this.applyVariables}\n                        unfilteredHospitals={unfilteredHospitals}\n                        filterByEnum={this.setHospitalsByEnums}\n                        filterByType={this.setHospitalsByType}\n                        year={selectedYear}\n                        hasLoaded={hasLoaded}\n                        view={view}\n                        setView={this.setView}\n                        mapView={mapView}\n                        setMapView={this.setMapView}\n                        graphView={graphView}\n                        setGraphView={this.setGraphView}\n                    />\n                    {centralPanel}\n                    <LanguagePicker changeAPILang={this.changeLanguage} />\n                    {slider}\n                </div>\n\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}