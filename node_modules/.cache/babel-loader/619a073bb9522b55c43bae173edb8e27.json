{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/FilterEditor/FilterEditor.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport CheckboxList from '../CheckboxList/CheckboxList.js';\nimport { withTranslation } from 'react-i18next';\nimport './FilterEditor.css';\n/*\n* A component to filter different Variables and Filters, defined through\n* Dropdowns or CheckboxLists\n*/\n\nvar FilterEditor =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FilterEditor, _Component);\n\n  function FilterEditor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FilterEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FilterEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedValues: [],\n      titles: []\n    };\n\n    _this.dropdownSelectItem = function (item) {\n      var titles = [];\n\n      for (var i = 0; i < item.values.length; i++) {\n        titles.push(item.values[i] + \": \" + item.values_text[i]);\n      }\n\n      console.log(\"============================\");\n      console.log(\"CHOOSING FILTER VAR\");\n\n      _this.props.setEnum(item).then(function () {\n        _this.setState({\n          selectedValues: [],\n          titles: titles\n        });\n      });\n    };\n\n    _this.checkboxSelectItem = function (item) {\n      if (Object.keys(_this.props.selectedEnum).length > 0) {\n        // removes item if in selectedValues\n        var values = _this.state.selectedValues.filter(function (value) {\n          return value !== item;\n        }); // adds item if not in selectedValues\n\n\n        if (values.length === _this.state.selectedValues.length) {\n          values.push(item);\n        }\n\n        console.log(\"============================\");\n        console.log(\"CHOOSING FILTER CB\");\n\n        _this.setState({\n          selectedValues: values\n        });\n\n        _this.filter(values);\n      }\n    };\n\n    _this.filter = function (selectedValues) {\n      var _this$props = _this.props,\n          selectedYear = _this$props.selectedYear,\n          hospitals = _this$props.hospitals;\n      var name = _this.props.selectedEnum.name;\n      var filteredHospitals = []; // type of filtering (inclusive:true = OR)\n\n      var inclusive = name === \"KT\" || name === \"LA\" || name === \"RForm\" || name === \"Typ\";\n\n      if (selectedValues.length > 0) {\n        filteredHospitals = hospitals.filter(function (hospital) {\n          // Enum variables to be filtered with \"OR\"\n          if (inclusive) {\n            var counter = 0;\n\n            if (selectedYear in hospital.attributes[name]) {\n              var values = hospital.attributes[name][selectedYear];\n\n              for (var i = 0; i < selectedValues.length; i++) {\n                if (values.includes(selectedValues[i])) {\n                  counter++;\n                }\n              }\n            }\n\n            if (counter === 0) {\n              return false;\n            }\n          } else {\n            // Enum variables to be filtered with \"AND\"\n            if (selectedYear in hospital.attributes[name]) {\n              var _values = hospital.attributes[name][selectedYear];\n\n              for (var _i = 0; _i < selectedValues.length; _i++) {\n                if (!_values.includes(selectedValues[_i])) {\n                  return false;\n                }\n              }\n            } else {\n              return false;\n            }\n          }\n\n          return true;\n        });\n\n        if (filteredHospitals.length === 0) {\n          // no hits\n          filteredHospitals[0] = 0;\n        }\n      } else {\n        // if nothing is selected, return all of the hospitals\n        filteredHospitals = hospitals;\n      }\n\n      _this.props.filter(filteredHospitals);\n    };\n\n    return _this;\n  }\n\n  _createClass(FilterEditor, [{\n    key: \"componentDidUpdate\",\n    // filters again when a new selectedVariable has been selected, with the same selected Enum as before the change.\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.hasLoaded && this.props.hospitals !== prevProps.hospitals) {\n        //\n        if (this.props.selectedEnum === prevProps.selectedEnum && Object.keys(prevProps.selectedEnum).length > 0) {\n          console.log(\"FILTEREDITOR didUpdate\");\n          this.filter(this.state.selectedValues);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // this doesn't work because it triggers filterhospitals from setHospitalsByEnums\n      this.props.setEnum({});\n      this.props.filter([]);\n    }\n    /**\n    *Called when a variable is selected in a dropdown\n       *Gets the titles of the items, that have been selected in the dropdowns\n       */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          t = _this$props2.t,\n          hasLoaded = _this$props2.hasLoaded;\n      return React.createElement(\"div\", {\n        className: \"filter-editor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: \"filterDropDown\",\n        listItems: this.props.variables,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: this.props.selectedEnum,\n        defaultText: t('dropDowns.filterFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), Object.keys(this.props.selectedEnum).length > 0 && this.props.hasLoaded ? React.createElement(\"div\", {\n        className: \"filterCheckbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(CheckboxList, {\n        items: this.props.selectedEnum.values,\n        checkboxSelectItem: this.checkboxSelectItem,\n        titles: this.state.titles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })) : null);\n    }\n  }]);\n\n  return FilterEditor;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedFilterEditor = withTranslation()(FilterEditor);\nexport default LocalizedFilterEditor;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/FilterEditor/FilterEditor.js"],"names":["React","Component","DropdownMenu","CheckboxList","withTranslation","FilterEditor","state","selectedValues","titles","dropdownSelectItem","item","i","values","length","push","values_text","console","log","props","setEnum","then","setState","checkboxSelectItem","Object","keys","selectedEnum","filter","value","selectedYear","hospitals","name","filteredHospitals","inclusive","hospital","counter","attributes","includes","prevProps","hasLoaded","t","variables","LocalizedFilterEditor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport CheckboxList from '../CheckboxList/CheckboxList.js';\nimport { withTranslation } from 'react-i18next';\nimport './FilterEditor.css'\n\n\n/*\n* A component to filter different Variables and Filters, defined through\n* Dropdowns or CheckboxLists\n*/\n\nclass FilterEditor extends Component {\n\tstate = {\n        selectedValues : [],\n\t\ttitles : [],\n\t};\n\n\t// filters again when a new selectedVariable has been selected, with the same selected Enum as before the change.\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.hasLoaded && this.props.hospitals !== prevProps.hospitals) { //\n\t\t \tif (this.props.selectedEnum === prevProps.selectedEnum && Object.keys(prevProps.selectedEnum).length > 0) {\n\t\t\t\tconsole.log(\"FILTEREDITOR didUpdate\");\n\t\t\t\tthis.filter(this.state.selectedValues);\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\t// this doesn't work because it triggers filterhospitals from setHospitalsByEnums\n\t\tthis.props.setEnum({});\n\t\tthis.props.filter([]);\n\t}\n\n\t/**\n\t*Called when a variable is selected in a dropdown\n    *Gets the titles of the items, that have been selected in the dropdowns\n    */\n    dropdownSelectItem = (item) => {\n\t\tlet titles = [];\n\t\tfor (let i = 0; i < item.values.length; i++)\n\t\ttitles.push(item.values[i] + \": \" + item.values_text[i]);\n\n\t\tconsole.log(\"============================\");\n\t\tconsole.log(\"CHOOSING FILTER VAR\");\n\t\tthis.props.setEnum(item).then(() => {\n\t\t\tthis.setState({\n\t\t\t\tselectedValues : [],\n\t\t\t\ttitles : titles,\n\t\t\t});\n\t\t});\n\n\t}\n\n    /**\n     *Called when a variable is selected in a Checkboxlist\n     * @param  {Filter Object} item the selected filter object to apply to Hospitals\n     *\n     */\n    checkboxSelectItem = (item) => {\n\n\t\tif (Object.keys(this.props.selectedEnum).length > 0) {\n\t\t\t// removes item if in selectedValues\n\t\t\tlet values = this.state.selectedValues.filter((value) => {\n\t\t\t\treturn (value !== item)\n\t\t\t});\n\n\t\t\t// adds item if not in selectedValues\n\t\t\tif (values.length === this.state.selectedValues.length) {\n\t\t\t\tvalues.push(item);\n\t\t\t}\n\n\t\t\tconsole.log(\"============================\");\n\t\t\tconsole.log(\"CHOOSING FILTER CB\");\n\n\t\t\tthis.setState({\n\t\t\t\tselectedValues : values\n\t\t\t});\n\n\t\t\tthis.filter(values);\n\t\t}\n\n    }\n\n    /**\n     * Called when different values have been selected in the filter\n     * @param  {Variable Object} selectedValues the selected filter object to apply to Hospitals\n     */\n\tfilter = (selectedValues) => {\n\t\tconst {selectedYear, hospitals} = this.props;\n        const {name} = this.props.selectedEnum;\n\n\t\tlet filteredHospitals =  [];\n\n\t\t// type of filtering (inclusive:true = OR)\n\t\tlet inclusive = (name === \"KT\" || name === \"LA\" || name === \"RForm\" || name === \"Typ\");\n\n\t\tif (selectedValues.length > 0) {\n\t\t\tfilteredHospitals = hospitals.filter((hospital) => {\n\t\t\t\t// Enum variables to be filtered with \"OR\"\n\t\t\t\tif (inclusive) {\n\t\t\t\t\tlet counter = 0;\n\t\t\t\t\tif (selectedYear in hospital.attributes[name]) {\n\t\t\t\t\t\tconst values = hospital.attributes[name][selectedYear];\n\t\t\t\t\t\tfor (let i = 0; i < selectedValues.length; i++) {\n\t\t\t\t\t\t\tif (values.includes(selectedValues[i])) {\n\t\t\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (counter === 0) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else { // Enum variables to be filtered with \"AND\"\n\t\t\t\t\tif (selectedYear in hospital.attributes[name]) {\n\t\t\t\t\t\tconst values = hospital.attributes[name][selectedYear];\n\t\t\t\t\t\tfor (let i = 0; i < selectedValues.length; i++) {\n\t\t\t\t\t\t\tif (!values.includes(selectedValues[i])) {\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tif (filteredHospitals.length === 0) {\n\t\t\t\t// no hits\n\t\t\t\tfilteredHospitals[0] = 0;\n\t\t\t}\n\t\t} else {\n\t\t\t// if nothing is selected, return all of the hospitals\n\t\t\tfilteredHospitals = hospitals;\n\t\t}\n\n\t\tthis.props.filter(filteredHospitals);\n\t}\n\n    render () {\n        const { t, hasLoaded } = this.props;\n        return (\n\t\t\t<div className=\"filter-editor\">\n\t\t\t\t<DropdownMenu\n\t\t\t\t\tid=\"filterDropDown\"\n\t\t\t\t\tlistItems={this.props.variables}\n\t\t\t\t\tselectItem={this.dropdownSelectItem}\n\t\t\t\t\tselectedItem={this.props.selectedEnum}\n\t\t\t\t\tdefaultText={t('dropDowns.filterFallback')}\n\t\t\t\t/>\n                {\n\t\t\t\t\t(Object.keys(this.props.selectedEnum).length > 0 && this.props.hasLoaded)\n\t\t\t\t\t?\n\t\t\t\t\t<div className=\"filterCheckbox\">\n\t\t\t\t\t\t<CheckboxList\n\t\t\t\t\t\t\titems={this.props.selectedEnum.values}\n\t\t\t\t\t\t\tcheckboxSelectItem={this.checkboxSelectItem}\n\t\t\t\t\t\t\ttitles={this.state.titles}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedFilterEditor = withTranslation()(FilterEditor);\nexport default LocalizedFilterEditor;\n"]},"metadata":{},"sourceType":"module"}