{"ast":null,"code":"(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['d3', 'd3-tip'], factory);\n  } else {\n    if (d3 && d3.tip) d3.exploding_boxplot = factory(d3, d3.tip);else d3.exploding_boxplot = factory(d3);\n  }\n})(function (d3, d3tip) {\n  var default_colors = [\"#a6cee3\", \"#ff7f00\", \"#b2df8a\", \"#1f78b4\", \"#fdbf6f\", \"#33a02c\", \"#cab2d6\", \"#6a3d9a\", \"#fb9a99\", \"#e31a1c\", \"#ffff99\", \"#b15928\"];\n\n  var compute_boxplot = function compute_boxplot(data, iqr_k, value) {\n    iqr_k = iqr_k || 1.5;\n    value = value || Number;\n    var seriev = data.map(functorkey(value)).sort(d3.ascending);\n    var quartiles = [d3.quantile(seriev, 0.25), d3.quantile(seriev, 0.5), d3.quantile(seriev, 0.75)];\n    var iqr = (quartiles[2] - quartiles[0]) * iqr_k; //group by outlier or not\n\n    var max = Number.MIN_VALUE;\n    var min = Number.MAX_VALUE;\n    var box_data = d3.nest().key(function (d) {\n      d = functorkey(value)(d);\n      var type = d < quartiles[0] - iqr || d > quartiles[2] + iqr ? 'outlier' : 'normal';\n\n      if (type == 'normal' && (d < min || d > max)) {\n        max = Math.max(max, d);\n        min = Math.min(min, d);\n      }\n\n      return type;\n    }).map(data);\n    if (!box_data.outlier) box_data.outlier = [];\n    box_data.quartiles = quartiles;\n    box_data.iqr = iqr;\n    box_data.max = max;\n    box_data.min = min;\n    return box_data;\n  };\n\n  var exploding_boxplot = function exploding_boxplot(data, aes) {\n    //defaults\n    var iqr = 1.5;\n    var height = 480;\n    var width = 600;\n    var boxpadding = 0.2;\n    var margin = {\n      top: 10,\n      bottom: 30,\n      left: 40,\n      right: 10\n    };\n    var rotateXLabels = false;\n    aes.color = aes.color || aes.group;\n    aes.radius = aes.radius || d3.functor(3);\n    aes.label = aes.label || d3.functor('aes.label undefined');\n    var ylab = typeof aes.y === \"string\" ? aes.y : \"\";\n    var xlab = typeof aes.group === \"string\" ? aes.group : \"\";\n    var yscale = d3.scale.linear().domain(d3.extent(data.map(functorkey(aes.y)))).nice().range([height - margin.top - margin.bottom, 0]);\n    var groups;\n\n    if (aes.group) {\n      groups = d3.nest().key(functorkey(aes.group)).entries(data);\n    } else {\n      groups = [{\n        key: '',\n        values: data\n      }];\n    }\n\n    var xscale = d3.scale.ordinal().domain(groups.map(function (d) {\n      return d.key;\n    })).rangeRoundBands([0, width - margin.left - margin.right], boxpadding);\n    var colorscale = d3.scale.ordinal().domain(d3.set(data.map(functorkey(aes.color))).values()).range(default_colors); //create boxplot data\n\n    groups = groups.map(function (g) {\n      var o = compute_boxplot(g.values, iqr, aes.y);\n      o['group'] = g.key;\n      return o;\n    });\n\n    var tickFormat = function tickFormat(n) {\n      return n.toLocaleString();\n    }; //default tool tip function\n\n\n    var _tipFunction = function _tipFunction(d) {\n      return ' <span style=\"color:' + colorscale(functorkey(aes.color)(d)) + '\">' + functorkey(aes.label)(d) + '</span><span style=\"color:#DDDDDD;\" > : ' + tickFormat(functorkey(aes.y)(d)) + '</span>';\n    };\n\n    var svg, container, tip;\n\n    var chart = function chart(elem) {\n      svg = d3.select(elem).append('svg').attr('width', width).attr('height', height);\n      svg.append('g').append('rect').attr('width', width).attr('height', height).style('color', 'white').style('opacity', 0).on('dblclick', implode_boxplot);\n      container = svg.append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      var xAxis = d3.svg.axis().scale(xscale).orient('bottom');\n      var yAxis = d3.svg.axis().scale(yscale).orient('left').tickFormat(tickFormat);\n      var xaxisG = container.append('g').attr('class', 'd3-exploding-boxplot x axis').attr(\"transform\", \"translate(0,\" + (height - margin.top - margin.bottom) + \")\").call(xAxis);\n\n      if (rotateXLabels) {\n        xaxisG.selectAll('text').attr(\"transform\", \"rotate(90)\").attr(\"dy\", \".35em\").attr(\"x\", \"9\").attr(\"y\", \"0\").style(\"text-anchor\", \"start\");\n      }\n\n      xaxisG.append(\"text\").attr(\"x\", (width - margin.left - margin.right) / 2).attr(\"dy\", \".71em\").attr('y', margin.bottom - 14).style(\"text-anchor\", \"middle\").text(xlab);\n      container.append('g').attr('class', 'd3-exploding-boxplot y axis').call(yAxis).append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"x\", -margin.top - d3.mean(yscale.range())).attr(\"dy\", \".71em\").attr('y', -margin.left + 5).style(\"text-anchor\", \"middle\").text(ylab);\n      container = container.insert('g', '.axis');\n      draw();\n    };\n\n    var create_jitter = function create_jitter(g, i) {\n      d3.select(this).append('g').attr('class', 'd3-exploding-boxplot outliers-points').selectAll('.point').data(g.outlier).enter().append('circle').call(init_jitter).call(draw_jitter);\n      d3.select(this).append('g').attr('class', 'd3-exploding-boxplot normal-points');\n    };\n\n    var init_jitter = function init_jitter(s) {\n      s.attr('class', 'd3-exploding-boxplot point').attr('r', functorkey(aes.radius)).attr('fill', function (d) {\n        return colorscale(functorkey(aes.color)(d));\n      }).call(function (s) {\n        if (!s.empty()) tip(s);\n      }).on('mouseover', tip.show).on('mouseout', tip.hide);\n    };\n\n    var draw_jitter = function draw_jitter(s) {\n      s.attr('cx', function (d) {\n        var w = xscale.rangeBand();\n        return Math.floor(Math.random() * w);\n      }).attr('cy', function (d) {\n        return yscale(functorkey(aes.y)(d));\n      });\n    };\n\n    var create_boxplot = function create_boxplot(g, i) {\n      var s = d3.select(this).append('g').attr('class', 'd3-exploding-boxplot box').on('click', function (d) {\n        explode_boxplot(this.parentNode, g);\n      }).selectAll('.box').data([g]).enter(); //box\n\n      s.append('rect').attr('class', 'd3-exploding-boxplot box').attr('fill', function (d) {\n        return colorscale(functorkey(aes.color)(d.normal[0]));\n      }); //median line\n\n      s.append('line').attr('class', 'd3-exploding-boxplot median line'); //min line\n\n      s.append('line').attr('class', 'd3-exploding-boxplot min line hline'); //min vline\n\n      s.append('line').attr('class', 'd3-exploding-boxplot line min vline'); //max line\n\n      s.append('line').attr('class', 'd3-exploding-boxplot max line hline'); //max vline\n\n      s.append('line').attr('class', 'd3-exploding-boxplot line max vline');\n    };\n\n    var draw_boxplot = function draw_boxplot(s) {\n      //box\n      s.select('rect.box').attr('x', 0).attr('width', xscale.rangeBand()).attr('y', function (d) {\n        return yscale(d.quartiles[2]);\n      }).attr('height', function (d) {\n        return yscale(d.quartiles[0]) - yscale(d.quartiles[2]);\n      }); //median line\n\n      s.select('line.median').attr('x1', 0).attr('x2', xscale.rangeBand()).attr('y1', function (d) {\n        return yscale(d.quartiles[1]);\n      }).attr('y2', function (d) {\n        return yscale(d.quartiles[1]);\n      }); //min line\n\n      s.select('line.min.hline').attr('x1', xscale.rangeBand() * 0.25).attr('x2', xscale.rangeBand() * 0.75).attr('y1', function (d) {\n        return yscale(Math.min(d.min, d.quartiles[0]));\n      }).attr('y2', function (d) {\n        return yscale(Math.min(d.min, d.quartiles[0]));\n      }); //min vline\n\n      s.select('line.min.vline').attr('x1', xscale.rangeBand() * 0.5).attr('x2', xscale.rangeBand() * 0.5).attr('y1', function (d) {\n        return yscale(Math.min(d.min, d.quartiles[0]));\n      }).attr('y2', function (d) {\n        return yscale(d.quartiles[0]);\n      }); //max line\n\n      s.select('line.max.hline').attr('x1', xscale.rangeBand() * 0.25).attr('x2', xscale.rangeBand() * 0.75).attr('y1', function (d) {\n        return yscale(Math.max(d.max, d.quartiles[2]));\n      }).attr('y2', function (d) {\n        return yscale(Math.max(d.max, d.quartiles[2]));\n      }); //max vline\n\n      s.select('line.max.vline').attr('x1', xscale.rangeBand() * 0.5).attr('x2', xscale.rangeBand() * 0.5).attr('y1', function (d) {\n        return yscale(d.quartiles[2]);\n      }).attr('y2', function (d) {\n        return yscale(Math.max(d.max, d.quartiles[2]));\n      });\n    };\n\n    var hide_boxplot = function hide_boxplot(g, i) {\n      var s = this;\n      s.select('rect.box').attr('x', xscale.rangeBand() * 0.5).attr('width', 0).attr('y', function (d) {\n        return yscale(d.quartiles[1]);\n      }).attr('height', 0); //median line\n\n      s.selectAll('line').attr('x1', xscale.rangeBand() * 0.5).attr('x2', xscale.rangeBand() * 0.5).attr('y1', function (d) {\n        return yscale(d.quartiles[1]);\n      }).attr('y2', function (d) {\n        return yscale(d.quartiles[1]);\n      });\n    };\n\n    var explode_boxplot = function explode_boxplot(elem, g) {\n      d3.select(elem).select('g.box').transition().ease(d3.ease('back-in')).duration(300).call(hide_boxplot);\n      d3.select(elem).selectAll('.normal-points').selectAll('.point').data(g.normal).enter().append('circle').attr('cx', xscale.rangeBand() * 0.5).attr('cy', yscale(g.quartiles[1])).call(init_jitter).transition().ease(d3.ease('back-out')).delay(function () {\n        return 300 + 100 * Math.random();\n      }).duration(function () {\n        return 300 + 300 * Math.random();\n      }).call(draw_jitter);\n    };\n\n    var implode_boxplot = function implode_boxplot(elem, g) {\n      container.selectAll('.normal-points').each(function (g) {\n        d3.select(this).selectAll('circle').transition().ease(d3.ease('back-out')).duration(function () {\n          return 300 + 300 * Math.random();\n        }).attr('cx', xscale.rangeBand() * 0.5).attr('cy', yscale(g.quartiles[1])).remove();\n      });\n      container.selectAll('.boxcontent').transition().ease(d3.ease('back-out')).duration(300).delay(200).call(draw_boxplot);\n    };\n\n    var create_tip = function create_tip() {\n      tip = d3tip().attr('class', 'd3-exploding-boxplot tip').direction('n').html(_tipFunction);\n      return tip;\n    };\n\n    function draw() {\n      tip = tip || create_tip();\n      chart.tip = tip;\n      var boxContent = container.selectAll('.boxcontent').data(groups).enter().append('g').attr('class', 'd3-exploding-boxplot boxcontent').attr('transform', function (d) {\n        return 'translate(' + xscale(d.group) + ',0)';\n      }).each(create_jitter).each(create_boxplot).call(draw_boxplot);\n    }\n\n    ;\n\n    chart.iqr = function (_) {\n      if (!arguments.length) return iqr;\n      iqr = _;\n      return chart;\n    };\n\n    chart.width = function (_) {\n      if (!arguments.length) return width;\n      width = _;\n      xscale.rangeRoundBands([0, width - margin.left - margin.right], boxpadding);\n      return chart;\n    };\n\n    chart.height = function (_) {\n      if (!arguments.length) return height;\n      height = _;\n      yscale.range([height - margin.top - margin.bottom, 0]);\n      return chart;\n    };\n\n    chart.margin = function (_) {\n      if (!arguments.length) return margin;\n      margin = _; //update scales\n\n      xscale.rangeRoundBands([0, width - margin.left - margin.right], boxpadding);\n      yscale.range([height - margin.top - margin.bottom, 0]);\n      return chart;\n    };\n\n    chart.xlab = function (_) {\n      if (!arguments.length) return xlab;\n      xlab = _;\n      return chart;\n    };\n\n    chart.ylab = function (_) {\n      if (!arguments.length) return ylab;\n      ylab = _;\n      return chart;\n    };\n\n    chart.ylimit = function (_) {\n      if (!arguments.length) return yscale.domain();\n      yscale.domain(_.sort(d3.ascending));\n      return chart;\n    };\n\n    chart.yscale = function (_) {\n      if (!arguments.length) return yscale;\n      yscale = _;\n      return chart;\n    };\n\n    chart.xscale = function (_) {\n      if (!arguments.length) return xscale;\n      xscale = _;\n      return chart;\n    };\n\n    chart.tickFormat = function (_) {\n      if (!arguments.length) return tickFormat;\n      tickFormat = _;\n      return chart;\n    };\n\n    chart.colors = function (_) {\n      if (!arguments.length) return colorscale.range();\n      colorscale.range(_);\n      return chart;\n    };\n\n    chart.rotateXLabels = function (_) {\n      if (!arguments.length) return rotateXLabels;\n      rotateXLabels = _;\n      return chart;\n    };\n\n    return chart;\n  };\n\n  function functorkey(v) {\n    return typeof v === \"function\" ? v : function (d) {\n      return d[v];\n    };\n  } //i want arrows function...\n\n\n  function fk(v) {\n    return function (d) {\n      return d[v];\n    };\n  }\n\n  exploding_boxplot.compute_boxplot = compute_boxplot;\n  return exploding_boxplot;\n});","map":null,"metadata":{},"sourceType":"script"}