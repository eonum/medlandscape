{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/LanguagePicker/LanguagePicker.js\";\nimport React, { Component } from 'react';\nimport { withTranslation } from \"react-i18next\";\nimport './LanguagePicker.css';\n/**\n* Basic component for selecting the active language\n*/\n\nvar LanguagePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LanguagePicker, _Component);\n\n  function LanguagePicker() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LanguagePicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LanguagePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onLanguageChange = function (code) {\n      _this.props.i18n.changeLanguage(code).then(function () {\n        _this.props.resendInitApiCall();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LanguagePicker, [{\n    key: \"render\",\n\n    /**\n    * render - rendes the component\n    *\n    * @return {JSX}  Component in JSX format\n    */\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"languagePicker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, this.props.t('language_picker.info'), \":\"), React.createElement(\"div\", {\n        className: \"btnContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"langBtn\",\n        onClick: function onClick() {\n          return _this2.onLanguageChange('de');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"DE\"), React.createElement(\"button\", {\n        className: \"langBtn\",\n        onClick: function onClick() {\n          return _this2.onLanguageChange('fr');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"FR\")));\n    }\n  }]);\n\n  return LanguagePicker;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedLanguagePicker = withTranslation()(LanguagePicker);\nexport default LocalizedLanguagePicker;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/LanguagePicker/LanguagePicker.js"],"names":["React","Component","withTranslation","LanguagePicker","onLanguageChange","code","props","i18n","changeLanguage","then","resendInitApiCall","t","LocalizedLanguagePicker"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAO,sBAAP;AAEA;;;;IAGMC,c;;;;;;;;;;;;;;;;;;UAMFC,gB,GAAmB,UAACC,IAAD,EAAU;AACzB,YAAKC,KAAL,CAAWC,IAAX,CAAgBC,cAAhB,CAA+BH,IAA/B,EAAqCI,IAArC,CAA0C,YAAM;AAC5C,cAAKH,KAAL,CAAWI,iBAAX;AACH,OAFD;AAGH,K;;;;;;;;AAGD;;;;;6BAKU;AAAA;;AACN,aACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKJ,KAAL,CAAWK,CAAX,CAAa,sBAAb,CAAJ,MADJ,EAEI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACP,gBAAL,CAAsB,IAAtB,CAAN;AAAA,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAA4B,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACA,gBAAL,CAAsB,IAAtB,CAAN;AAAA,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CAFJ,CADJ;AASH;;;;EA5BwBH,S;AA+B7B;;;;;;AAIA,IAAMW,uBAAuB,GAAGV,eAAe,GAAGC,cAAH,CAA/C;AACA,eAAeS,uBAAf","sourcesContent":["import React, { Component } from 'react';\nimport { withTranslation } from \"react-i18next\";\nimport './LanguagePicker.css'\n\n/**\n* Basic component for selecting the active language\n*/\nclass LanguagePicker extends Component {\n\n    /**\n    * onLanguageChange - Changes the language, and after that resends the\n    * initApiCall to retrieve the correct variable names.\n    */\n    onLanguageChange = (code) => {\n        this.props.i18n.changeLanguage(code).then(() => {\n            this.props.resendInitApiCall();\n        });\n    }\n\n\n    /**\n    * render - rendes the component\n    *\n    * @return {JSX}  Component in JSX format\n    */\n    render () {\n        return (\n            <div className=\"languagePicker\">\n                <p>{this.props.t('language_picker.info')}:</p>\n                <div className=\"btnContainer\">\n                    <button className=\"langBtn\" onClick={() => this.onLanguageChange('de')}>DE</button>\n                    <button className=\"langBtn\" onClick={() => this.onLanguageChange('fr')}>FR</button>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedLanguagePicker = withTranslation()(LanguagePicker)\nexport default LocalizedLanguagePicker;\n"]},"metadata":{},"sourceType":"module"}