{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport { withTranslation } from 'react-i18next';\nimport { CSVLink } from \"react-csv\";\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\n\nvar InteractiveTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InteractiveTable, _Component);\n\n  /**\n   * constructor - initializes the component by calling the superclass's\n   *  constructor and setting the inital state\n   *\n   * @param  {ojbect} props props handed over by parent component\n   */\n  function InteractiveTable(_props) {\n    var _this;\n\n    _classCallCheck(this, InteractiveTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InteractiveTable).call(this, _props));\n\n    _this.updateAllDropdowns = function (newProps) {\n      var props = _this.props;\n\n      if (newProps) {\n        props = newProps;\n      }\n\n      var newHospitalDropdowns = _this.state.hospitalDropdowns;\n\n      for (var i = 0; i < _this.state.hospitalDropdowns.length; i++) {\n        newHospitalDropdowns = update(newHospitalDropdowns, _defineProperty({}, i, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  listItems: {\n                    $set: props.hospitals\n                  }\n                }\n              }\n            }\n          }\n        }));\n      }\n\n      var newVariableDropdowns = _this.state.variableDropdowns;\n\n      for (var _i = 0; _i < _this.state.variableDropdowns.length; _i++) {\n        newVariableDropdowns = update(newVariableDropdowns, _defineProperty({}, _i, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  listItems: {\n                    $set: props.variables\n                  }\n                }\n              }\n            }\n          }\n        }));\n      }\n\n      _this.setState({\n        hospitalDropdowns: newHospitalDropdowns,\n        variableDropdowns: newVariableDropdowns,\n        dropdownsNeedUpdate: false,\n        dropdownsForceUpdate: false\n      });\n    };\n\n    _this.addHospital = function () {\n      var nextHospId = _this.state.nextHospitalId + \"\";\n\n      var hosp = _this.createNewHospital(undefined, nextHospId); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n\n      var hosp_id_parts = nextHospId.split(\"-\");\n      nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n      var newSelectedHospitals = [].concat(_toConsumableArray(_this.state.selectedHospitals), [hosp[0]]);\n      var newDropdowns = [].concat(_toConsumableArray(_this.state.hospitalDropdowns), [hosp[1]]);\n\n      _this.setState({\n        hospitalDropdowns: newDropdowns,\n        selectedHospitals: newSelectedHospitals,\n        nextHospitalId: nextHospId\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.addAllHospitals = function () {\n      var hospDropdowns = [];\n      var selectedHosps = [];\n      var nextHospId = _this.state.nextHospitalId + \"\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.props.hospitals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var hosp = _step.value;\n\n          var data = _this.createNewHospital(hosp, nextHospId);\n\n          selectedHosps.push(hosp);\n          hospDropdowns.push(data[1]); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n          var hosp_id_parts = nextHospId.split(\"-\");\n          nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        hospitalDropdowns: hospDropdowns,\n        selectedHospitals: selectedHosps,\n        nextHospitalId: nextHospId\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.createNewHospital = function (selectedHosp, id) {\n      var newSelectedHospital = undefined;\n\n      if (selectedHosp) {\n        newSelectedHospital = selectedHosp;\n      }\n\n      var newDropdown = React.createElement(\"div\", {\n        className: \"hospitalDropdown\",\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: id,\n        listItems: _this.props.hospitals,\n        selectItem: _this.selectHospital,\n        selectedItem: newSelectedHospital,\n        defaultText: _this.props.t('dropDowns.hospitalFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnSubtractHospital\",\n        onClick: function onClick() {\n          return _this.subtractHospital(id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"X\"));\n      return [newSelectedHospital, newDropdown];\n    };\n\n    _this.subtractHospital = function (senderId) {\n      var index;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _this.state.hospitalDropdowns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var hD = _step2.value;\n\n          if (hD.props.children[0].props.id === senderId) {\n            index = _this.state.hospitalDropdowns.indexOf(hD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var updSelHos1 = _this.state.selectedHospitals.slice(0, index);\n\n      var updSelHos2 = _this.state.selectedHospitals.slice(index + 1, _this.state.selectedHospitals.length);\n\n      var updSelHos = updSelHos1.concat(updSelHos2);\n\n      var updHosDrp1 = _this.state.hospitalDropdowns.slice(0, index);\n\n      var updHosDrp2 = _this.state.hospitalDropdowns.slice(index + 1, _this.state.hospitalDropdowns.length);\n\n      var updHosDrp = updHosDrp1.concat(updHosDrp2);\n\n      _this.setState({\n        selectedHospitals: updSelHos,\n        hospitalDropdowns: updHosDrp\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.selectHospital = function (item, senderId) {\n      var index;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = _this.state.hospitalDropdowns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var hD = _step3.value;\n\n          if (hD.props.children[0].props.id === senderId) {\n            index = _this.state.hospitalDropdowns.indexOf(hD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      _this.setState({\n        // selectedHospitals : newList\n        selectedHospitals: update(_this.state.selectedHospitals, _defineProperty({}, index, {\n          $set: item\n        })),\n        hospitalDropdowns: update(_this.state.hospitalDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  selectedItem: {\n                    $set: item\n                  }\n                }\n              }\n            }\n          }\n        }))\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.addVariable = function () {\n      var newVariables = [];\n      var newSelectedVariables = [];\n      var newSelectedYears = [];\n      var nextVariableId = _this.state.nextVariableId + \"\";\n      var newDrp = React.createElement(\"div\", {\n        className: \"variableDropdown\",\n        key: _this.state.nextVariableId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: _this.state.nextVariableId,\n        listItems: _this.props.variables,\n        selectItem: _this.selectVariable,\n        defaultText: _this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnSubtractVariable\",\n        onClick: function onClick() {\n          return _this.subtractVariable(nextVariableId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"button\", {\n        className: \"btnSortAsc\",\n        onClick: function onClick() {\n          return _this.sortHospitals(nextVariableId, 'asc');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, _this.props.t('tableView.sortAsc')), React.createElement(\"button\", {\n        className: \"btnSortDesc\",\n        onClick: function onClick() {\n          return _this.sortHospitals(nextVariableId, 'desc');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, _this.props.t('tableView.sortDesc')), React.createElement(\"div\", {\n        className: \"yearDropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: _this.state.nextYearId,\n        listItems: [],\n        selectItem: _this.selectYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }))); // splits the next id ('var-x') into 'var' and 'x' and increments 'x' for vars and years\n\n      var id_parts = _this.state.nextVariableId.split(\"-\");\n\n      var nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n      id_parts = _this.state.nextYearId.split(\"-\");\n      var nextYearIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n      newVariables = [].concat(_toConsumableArray(_this.state.variableDropdowns), [newDrp]);\n      newSelectedVariables = [].concat(_toConsumableArray(_this.state.selectedVariables), [{}]);\n      newSelectedYears = [].concat(_toConsumableArray(_this.state.selectedYears), [{}]);\n\n      _this.setState({\n        nextVariableId: nextVariableIdInc,\n        nextYearId: nextYearIdInc,\n        selectedYears: newSelectedYears,\n        variableDropdowns: newVariables,\n        selectedVariables: newSelectedVariables\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.selectionChanged = function () {\n      _this.setState({\n        selectionChanged: true\n      });\n\n      var yearDropdowns = document.getElementsByClassName('yearDropdown');\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = yearDropdowns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var d = _step4.value;\n          d.classList.remove('showYearDropdown');\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    };\n\n    _this.selectYear = function (item, senderId) {\n      var index;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = _this.state.variableDropdowns[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var yD = _step5.value;\n\n          if (yD.props.children[4].props.children.props.id === senderId) {\n            index = _this.state.variableDropdowns.indexOf(yD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      var selectedYear;\n\n      if (_this.state.selectedVariables[index].is_time_series) {\n        selectedYear = Number(item.name);\n      } else {\n        selectedYear = item.name;\n      }\n\n      var updatedYears = update(_this.state.selectedYears, _defineProperty({}, index, {\n        $set: selectedYear\n      }));\n      var updatedDropdowns = update(_this.state.variableDropdowns, _defineProperty({}, index, {\n        props: {\n          children: {\n            4: {\n              props: {\n                children: {\n                  props: {\n                    selectedItem: {\n                      $set: item\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }));\n\n      _this.setState({\n        selectedYears: updatedYears,\n        variableDropdowns: updatedDropdowns\n      }, function () {\n        _this.props.retriggerTableGeneration();\n      });\n    };\n\n    _this.subtractVariable = function (senderId) {\n      var index;\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = _this.state.variableDropdowns[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var vD = _step6.value;\n\n          if (vD.props.children[0].props.id === senderId) {\n            index = _this.state.variableDropdowns.indexOf(vD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      var updSelVar1 = _this.state.selectedVariables.slice(0, index);\n\n      var updSelVar2 = _this.state.selectedVariables.slice(index + 1, _this.state.selectedVariables.length);\n\n      var updSelVar = updSelVar1.concat(updSelVar2);\n\n      var updVarDrp1 = _this.state.variableDropdowns.slice(0, index);\n\n      var updVarDrp2 = _this.state.variableDropdowns.slice(index + 1, _this.state.variableDropdowns.length);\n\n      var updVarDrp = updVarDrp1.concat(updVarDrp2);\n\n      _this.setState({\n        selectedVariables: updSelVar,\n        variableDropdowns: updVarDrp\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.canTableBeSorted = function (shouldCheckForLoadedData) {\n      var shouldGenerate = true; // check if in each hospital dropdown something was selected\n\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = _this.state.selectedHospitals[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var hosp = _step7.value;\n\n          if (!hosp || Object.keys(hosp).length === 0 && hosp.constructor === Object) {\n            shouldGenerate = false;\n            break;\n          }\n        } // check the same for variables\n\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      if (shouldGenerate) {\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = _this.state.selectedVariables[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var variable = _step8.value;\n\n            if (!variable || Object.keys(variable).length === 0 && variable.constructor === Object) {\n              shouldGenerate = false;\n              break;\n            }\n\n            if (shouldCheckForLoadedData) {\n              // also check if for the selected variables the data was fetched\n              if (typeof _this.props.hospitals[0].attributes[variable.name] === 'undefined') {\n                shouldGenerate = false;\n                break;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n      }\n\n      if (!shouldGenerate) {\n        window.alert(_this.props.t('tableView.missingData'));\n      }\n\n      return shouldGenerate;\n    };\n\n    _this.sortHospitals = function (senderId, order) {\n      // first get the whole variable object using the senderId\n      var senderIndex;\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = _this.state.variableDropdowns[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var vD = _step9.value;\n\n          if (vD.props.children[0].props.id === senderId) {\n            senderIndex = _this.state.variableDropdowns.indexOf(vD);\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      var variable = _this.state.selectedVariables[senderIndex]; // then create an array containing arrays of length 2 that contain the\n      // index of the selectedHospital and its value on the variable\n\n      var selectedHospitals = _this.state.selectedHospitals;\n      var referenceArr = [];\n\n      if (_this.canTableBeSorted(true)) {\n        for (var i = 0; i < selectedHospitals.length; i++) {\n          var currentHosp = void 0;\n          var _iteratorNormalCompletion10 = true;\n          var _didIteratorError10 = false;\n          var _iteratorError10 = undefined;\n\n          try {\n            for (var _iterator10 = _this.props.hospitals[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n              var hosp = _step10.value;\n\n              if (hosp.name === selectedHospitals[i].name) {\n                currentHosp = hosp;\n                break;\n              }\n            } // const latestYear = Object.keys(currentHosp.attributes[variable.name])\n            //     .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n\n          } catch (err) {\n            _didIteratorError10 = true;\n            _iteratorError10 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n                _iterator10.return();\n              }\n            } finally {\n              if (_didIteratorError10) {\n                throw _iteratorError10;\n              }\n            }\n          }\n\n          var year = _this.state.selectedYears[senderIndex];\n          var attributes = currentHosp.attributes[variable.name];\n          var value = '';\n\n          if (typeof attributes[year] !== 'undefined') {\n            value = attributes[year];\n          }\n\n          referenceArr.push([i, value]);\n        } // then sort this array according to the value on the variable\n\n\n        var sortFunction = function sortFunction(a, b) {\n          if (a[1] === b[1]) {\n            return 0;\n          } else {\n            if (order === 'asc') {\n              return a[1] < b[1] ? -1 : 1;\n            } else {\n              return a[1] > b[1] ? -1 : 1;\n            }\n          }\n        };\n\n        referenceArr.sort(sortFunction); // according to the indices in the referenceArr, fill new sorted arrays\n        // for dropdowns and selected hospitals\n\n        var newHospitalDropdowns = [];\n        var newSelectedHospitals = [];\n\n        for (var _i2 = 0; _i2 < referenceArr.length; _i2++) {\n          var index = referenceArr[_i2][0];\n          newSelectedHospitals.push(selectedHospitals[index]);\n          newHospitalDropdowns.push(_this.state.hospitalDropdowns[index]);\n        } // then set the state\n\n\n        _this.setState({\n          hospitalDropdowns: newHospitalDropdowns,\n          selectedHospitals: newSelectedHospitals\n        });\n\n        _this.props.retriggerTableGeneration();\n      }\n    };\n\n    _this.selectVariable = function (item, senderId) {\n      var index;\n      var _iteratorNormalCompletion11 = true;\n      var _didIteratorError11 = false;\n      var _iteratorError11 = undefined;\n\n      try {\n        for (var _iterator11 = _this.state.variableDropdowns[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n          var vD = _step11.value;\n\n          if (vD.props.children[0].props.id === senderId) {\n            index = _this.state.variableDropdowns.indexOf(vD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError11 = true;\n        _iteratorError11 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n            _iterator11.return();\n          }\n        } finally {\n          if (_didIteratorError11) {\n            throw _iteratorError11;\n          }\n        }\n      }\n\n      _this.setState({\n        selectedVariables: update(_this.state.selectedVariables, _defineProperty({}, index, {\n          $set: item\n        })),\n        variableDropdowns: update(_this.state.variableDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  selectedItem: {\n                    $set: item\n                  }\n                }\n              }\n            }\n          }\n        }))\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.submitTableData = function (data) {\n      var _this$state = _this.state,\n          selectedVariables = _this$state.selectedVariables,\n          selectedHospitals = _this$state.selectedHospitals,\n          selectedYears = _this$state.selectedYears;\n      var namedData = [];\n      var headers = [];\n      headers.push(\"Variable\");\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = selectedVariables[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var v = _step12.value;\n          headers.push(v.text);\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n\n      namedData.push(headers);\n      var years = [];\n      years.push(\"Year\");\n      var _iteratorNormalCompletion13 = true;\n      var _didIteratorError13 = false;\n      var _iteratorError13 = undefined;\n\n      try {\n        for (var _iterator13 = selectedYears[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n          var y = _step13.value;\n          years.push(y);\n        }\n      } catch (err) {\n        _didIteratorError13 = true;\n        _iteratorError13 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n            _iterator13.return();\n          }\n        } finally {\n          if (_didIteratorError13) {\n            throw _iteratorError13;\n          }\n        }\n      }\n\n      namedData.push(years);\n\n      for (var i = 0; i < data.length; i++) {\n        var row = [selectedHospitals[i].name].concat(data[i]);\n        namedData.push(row);\n      }\n\n      _this.setState({\n        csvData: namedData\n      });\n    };\n\n    _this.dataFetched = function () {\n      if (true) {\n        var updatedDropdowns = _this.state.variableDropdowns;\n        var updatedYears = _this.state.selectedYears;\n\n        for (var i = 0; i < _this.state.variableDropdowns.length; i++) {\n          // let dropdown = this.state.variableDropdowns[i];\n          var selectedVariable = _this.state.selectedVariables[i];\n          var years = new Set();\n          var _iteratorNormalCompletion14 = true;\n          var _didIteratorError14 = false;\n          var _iteratorError14 = undefined;\n\n          try {\n            for (var _iterator14 = _this.state.selectedHospitals[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n              var selectedHospital = _step14.value;\n              var hospital = {};\n              var _iteratorNormalCompletion16 = true;\n              var _didIteratorError16 = false;\n              var _iteratorError16 = undefined;\n\n              try {\n                for (var _iterator16 = _this.props.hospitals[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n                  var hosp = _step16.value;\n\n                  if (selectedHospital.name === hosp.name) {\n                    hospital = hosp;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError16 = true;\n                _iteratorError16 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion16 && _iterator16.return != null) {\n                    _iterator16.return();\n                  }\n                } finally {\n                  if (_didIteratorError16) {\n                    throw _iteratorError16;\n                  }\n                }\n              }\n\n              if (selectedVariable.is_time_series) {\n                var _arr = Object.keys(hospital.attributes[selectedVariable.name]);\n\n                for (var _i3 = 0; _i3 < _arr.length; _i3++) {\n                  var year = _arr[_i3];\n                  years.add(year);\n                }\n              } else {\n                years.add(_this.props.t('tableView.noTimeData'));\n              }\n            }\n          } catch (err) {\n            _didIteratorError14 = true;\n            _iteratorError14 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n                _iterator14.return();\n              }\n            } finally {\n              if (_didIteratorError14) {\n                throw _iteratorError14;\n              }\n            }\n          }\n\n          years = Array.from(years);\n          var selectedYear = years.sort()[years.length - 1];\n          var selectedItem = {\n            name: selectedYear\n          };\n          var yearsForDropdown = [];\n          var _iteratorNormalCompletion15 = true;\n          var _didIteratorError15 = false;\n          var _iteratorError15 = undefined;\n\n          try {\n            for (var _iterator15 = years[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n              var _year = _step15.value;\n              yearsForDropdown.push({\n                name: _year\n              });\n            }\n          } catch (err) {\n            _didIteratorError15 = true;\n            _iteratorError15 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion15 && _iterator15.return != null) {\n                _iterator15.return();\n              }\n            } finally {\n              if (_didIteratorError15) {\n                throw _iteratorError15;\n              }\n            }\n          }\n\n          yearsForDropdown.reverse();\n          updatedYears = update(updatedYears, _defineProperty({}, i, {\n            $set: selectedYear\n          }));\n          updatedDropdowns = update(updatedDropdowns, _defineProperty({}, i, {\n            props: {\n              children: {\n                4: {\n                  props: {\n                    children: {\n                      props: {\n                        listItems: {\n                          $set: yearsForDropdown\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }));\n          updatedDropdowns = update(updatedDropdowns, _defineProperty({}, i, {\n            props: {\n              children: {\n                4: {\n                  props: {\n                    children: {\n                      props: {\n                        selectedItem: {\n                          $set: selectedItem\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }));\n        }\n\n        _this.setState({\n          variableDropdowns: updatedDropdowns,\n          selectedYears: updatedYears\n        }, function () {\n          _this.props.retriggerTableGeneration();\n\n          var yearDropdowns = document.getElementsByClassName('yearDropdown');\n          var _iteratorNormalCompletion17 = true;\n          var _didIteratorError17 = false;\n          var _iteratorError17 = undefined;\n\n          try {\n            for (var _iterator17 = yearDropdowns[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n              var d = _step17.value;\n              d.classList.toggle('showYearDropdown');\n            }\n          } catch (err) {\n            _didIteratorError17 = true;\n            _iteratorError17 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion17 && _iterator17.return != null) {\n                _iterator17.return();\n              }\n            } finally {\n              if (_didIteratorError17) {\n                throw _iteratorError17;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    _this.resultTableAcknowledgedChange = function () {\n      _this.setState({\n        selectionChanged: false\n      });\n    };\n\n    _this.state = {\n      nextVariableId: 'var-' + 0,\n      variableDropdowns: [],\n      selectedVariables: [],\n      nextYearId: 'yea-' + 0,\n      selectedYears: [],\n      nextHospitalId: 'hos-' + 0,\n      hospitalDropdowns: [],\n      selectedHospitals: [],\n      dropdownsNeedUpdate: true,\n      csvData: [],\n      previousLanguage: _props.i18n.language,\n      selectionChanged: false\n    };\n    return _this;\n  }\n  /**\n   * componentDidUpdate - updates the dropdowns if needed and checks if the\n   *  language has changed -> if yes, the table is cleared\n   */\n\n\n  _createClass(InteractiveTable, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      if (this.props.hasLoaded && this.state.dropdownsNeedUpdate) {\n        this.updateAllDropdowns();\n      }\n\n      if (this.state.previousLanguage !== this.props.i18n.language) {\n        this.setState({\n          nextVariableId: 'var-' + 0,\n          variableDropdowns: [],\n          selectedVariables: [],\n          nextHospitalId: 'hos-' + 0,\n          hospitalDropdowns: [],\n          selectedHospitals: [],\n          previousLanguage: this.props.i18n.language,\n          languageDidChange: true\n        }, function () {\n          _this2.addHospital();\n\n          _this2.addVariable();\n        });\n      }\n    }\n    /**\n     * updateAllDropdowns - Fills the dropdown-lists that were present before\n     *  the api request was complete with the correct data. Otherwise they\n     *  would be empty lists.\n     *\n     * @param {Object} newProps if provided, these will be used to update the\n     *  dropdowns instead of this.props\n     */\n\n  }, {\n    key: \"componentWillReceiveProps\",\n\n    /**\n     * componentWillReceiveProps - when the language was changed, the listItems\n     *  of the existing dropdowns need an update to display the correct items\n     */\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.state.languageDidChange) {\n        if (this.props.variables[0].text !== nextProps.variables[0].text) {\n          this.setState({\n            languageDidChange: false\n          });\n          this.updateAllDropdowns(nextProps);\n        }\n      }\n    }\n    /**\n     * componentDidMount - Adds a dropdown on each dimension by default.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.addHospital();\n      this.addVariable();\n    }\n    /**\n     * addHospital - Creates a new dropdown menu to select a hospital to\n     *  display, with a new unique id. Then updates the state accordingly.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          variables = _this$props.variables,\n          hospitals = _this$props.hospitals,\n          tableDataLoaded = _this$props.tableDataLoaded,\n          tableDataGenerated = _this$props.tableDataGenerated;\n      var _this$state2 = this.state,\n          hospitalDropdowns = _this$state2.hospitalDropdowns,\n          variableDropdowns = _this$state2.variableDropdowns,\n          selectedHospitals = _this$state2.selectedHospitals,\n          selectedVariables = _this$state2.selectedVariables,\n          selectedYears = _this$state2.selectedYears,\n          selectionChanged = _this$state2.selectionChanged,\n          csvData = _this$state2.csvData;\n      return React.createElement(\"div\", {\n        className: \"interactiveTable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"btnCreateCSV\",\n        onClick: function onClick() {\n          return _this3.csvLink.link.click();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 660\n        },\n        __self: this\n      }, t('tableView.btnCreateCSV')), React.createElement(VariableSelector, {\n        className: \"variableSelector\",\n        variables: variables,\n        variableDropdowns: variableDropdowns,\n        addVariable: this.addVariable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664\n        },\n        __self: this\n      }), React.createElement(HospitalSelector, {\n        className: \"hospitalSelector\",\n        hospitals: hospitals,\n        hospitalDropdowns: hospitalDropdowns,\n        selectedHospitals: selectedHospitals,\n        addHospital: this.addHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670\n        },\n        __self: this\n      }), React.createElement(ResultTable, {\n        className: \"resultTable\",\n        selectedHospitals: selectedHospitals,\n        selectedVariables: selectedVariables,\n        selectedYears: selectedYears,\n        hospitalData: hospitals,\n        dataLoaded: tableDataLoaded,\n        dataGenerated: tableDataGenerated,\n        submitTableData: this.submitTableData,\n        selectionChanged: selectionChanged,\n        changeAcknowledged: this.resultTableAcknowledgedChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677\n        },\n        __self: this\n      }), React.createElement(CSVLink, {\n        data: csvData,\n        filename: \"medlandscapeCSV.csv\",\n        className: \"CSVButton\",\n        ref: function ref(r) {\n          return _this3.csvLink = r;\n        },\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnGenerateTable\",\n        onClick: function onClick() {\n          if (_this3.canTableBeSorted(false)) {\n            _this3.props.requestData(selectedVariables, _this3.dataFetched);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 696\n        },\n        __self: this\n      }, t('tableView.btnCreateTable')), React.createElement(\"button\", {\n        className: \"btnAddAllHospitals\",\n        onClick: function onClick() {\n          return _this3.addAllHospitals();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 704\n        },\n        __self: this\n      }, t('tableView.btnAddAllHospitals')));\n    }\n  }]);\n\n  return InteractiveTable;\n}(Component);\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n * requestData: function that will be called to download the requested data\n * hasLoaded: bool that will be true if the data is loaded\n * retriggerTableGeneration: will cause resultTable to regenerate its table\n *  without resending a request\n * tableDataGenerated: will notify parent that ResultTable has finished\n *  generating the table (called from ResultTable)\n * tableDataLoaded: boolean that is true when the parent finished the request\n *  and false when not (will be set to false again by ResultTable after it\n *  finished table generation)\n */\n\n\nInteractiveTable.propTypes = {\n  variables: PropTypes.array.isRequired,\n  hospitals: PropTypes.array.isRequired,\n  requestData: PropTypes.func.isRequired,\n  hasLoaded: PropTypes.bool.isRequired,\n  retriggerTableGeneration: PropTypes.func.isRequired,\n  tableDataGenerated: PropTypes.func.isRequired,\n  tableDataLoaded: PropTypes.bool.isRequired\n};\nvar LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js"],"names":["React","Component","PropTypes","HospitalSelector","VariableSelector","DropdownMenu","ResultTable","update","withTranslation","CSVLink","InteractiveTable","props","updateAllDropdowns","newProps","newHospitalDropdowns","state","hospitalDropdowns","i","length","children","listItems","$set","hospitals","newVariableDropdowns","variableDropdowns","variables","setState","dropdownsNeedUpdate","dropdownsForceUpdate","addHospital","nextHospId","nextHospitalId","hosp","createNewHospital","undefined","hosp_id_parts","split","Number","newSelectedHospitals","selectedHospitals","newDropdowns","selectionChanged","addAllHospitals","hospDropdowns","selectedHosps","data","push","selectedHosp","id","newSelectedHospital","newDropdown","selectHospital","t","subtractHospital","senderId","index","hD","indexOf","updSelHos1","slice","updSelHos2","updSelHos","concat","updHosDrp1","updHosDrp2","updHosDrp","item","selectedItem","addVariable","newVariables","newSelectedVariables","newSelectedYears","nextVariableId","newDrp","selectVariable","subtractVariable","sortHospitals","nextYearId","selectYear","id_parts","nextVariableIdInc","nextYearIdInc","selectedVariables","selectedYears","yearDropdowns","document","getElementsByClassName","d","classList","remove","yD","selectedYear","is_time_series","name","updatedYears","updatedDropdowns","retriggerTableGeneration","vD","updSelVar1","updSelVar2","updSelVar","updVarDrp1","updVarDrp2","updVarDrp","canTableBeSorted","shouldCheckForLoadedData","shouldGenerate","Object","keys","constructor","variable","attributes","window","alert","order","senderIndex","referenceArr","currentHosp","year","value","sortFunction","a","b","sort","submitTableData","namedData","headers","v","text","years","y","row","csvData","dataFetched","selectedVariable","Set","selectedHospital","hospital","add","Array","from","yearsForDropdown","reverse","toggle","resultTableAcknowledgedChange","previousLanguage","i18n","language","hasLoaded","languageDidChange","nextProps","tableDataLoaded","tableDataGenerated","csvLink","link","click","r","requestData","propTypes","array","isRequired","func","bool","LocalizedInteractiveTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport { withTranslation } from 'react-i18next';\nimport { CSVLink } from \"react-csv\";\n\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\nclass InteractiveTable extends Component {\n\n    /**\n     * constructor - initializes the component by calling the superclass's\n     *  constructor and setting the inital state\n     *\n     * @param  {ojbect} props props handed over by parent component\n     */\n    constructor(props) {\n        super(props)\n        this.state = {\n\t\t\tnextVariableId : 'var-' + 0,\n\t\t\tvariableDropdowns : [],\n            selectedVariables : [],\n\n            nextYearId : 'yea-' + 0,\n            selectedYears : [],\n\n            nextHospitalId : 'hos-' + 0,\n            hospitalDropdowns : [],\n            selectedHospitals : [],\n\n            dropdownsNeedUpdate : true,\n\t\t\tcsvData : [],\n\n            previousLanguage : props.i18n.language,\n            selectionChanged: false\n        }\n    }\n\n    /**\n     * componentDidUpdate - updates the dropdowns if needed and checks if the\n     *  language has changed -> if yes, the table is cleared\n     */\n    componentDidUpdate() {\n        if ((this.props.hasLoaded && this.state.dropdownsNeedUpdate)) {\n            this.updateAllDropdowns();\n        }\n\n        if (this.state.previousLanguage !== this.props.i18n.language) {\n\n            this.setState({\n                nextVariableId : 'var-' + 0,\n    \t\t\tvariableDropdowns : [],\n                selectedVariables : [],\n\n                nextHospitalId : 'hos-' + 0,\n                hospitalDropdowns : [],\n                selectedHospitals : [],\n\n                previousLanguage: this.props.i18n.language,\n\n                languageDidChange: true\n            }, () => {\n                this.addHospital();\n                this.addVariable();\n            });\n\n        }\n    }\n\n    /**\n     * updateAllDropdowns - Fills the dropdown-lists that were present before\n     *  the api request was complete with the correct data. Otherwise they\n     *  would be empty lists.\n     *\n     * @param {Object} newProps if provided, these will be used to update the\n     *  dropdowns instead of this.props\n     */\n    updateAllDropdowns = (newProps) => {\n        let props = this.props;\n        if (newProps) {\n            props = newProps;\n        }\n\n        let newHospitalDropdowns = this.state.hospitalDropdowns;\n        for (let i = 0; i < this.state.hospitalDropdowns.length; i++) {\n            newHospitalDropdowns = update(newHospitalDropdowns, {[i]: {props: {children: {0: {props: {listItems: {$set: props.hospitals}}}}}}});\n        }\n        let newVariableDropdowns = this.state.variableDropdowns;\n        for (let i = 0; i < this.state.variableDropdowns.length; i++) {\n            newVariableDropdowns = update(newVariableDropdowns, {[i]: {props: {children: {0: {props: {listItems: {$set: props.variables}}}}}}});\n        }\n        this.setState({\n            hospitalDropdowns : newHospitalDropdowns,\n            variableDropdowns : newVariableDropdowns,\n            dropdownsNeedUpdate : false,\n            dropdownsForceUpdate : false\n        });\n    }\n\n    /**\n     * componentWillReceiveProps - when the language was changed, the listItems\n     *  of the existing dropdowns need an update to display the correct items\n     */\n    componentWillReceiveProps(nextProps) {\n        if (this.state.languageDidChange) {\n            if (this.props.variables[0].text !== nextProps.variables[0].text) {\n                this.setState({\n                    languageDidChange : false\n                });\n                this.updateAllDropdowns(nextProps);\n            }\n        }\n    }\n\n\n    /**\n     * componentDidMount - Adds a dropdown on each dimension by default.\n     */\n    componentDidMount() {\n        this.addHospital();\n        this.addVariable();\n    }\n\n    /**\n     * addHospital - Creates a new dropdown menu to select a hospital to\n     *  display, with a new unique id. Then updates the state accordingly.\n     */\n    addHospital = () => {\n        let nextHospId = this.state.nextHospitalId + \"\";\n        let hosp = this.createNewHospital(undefined, nextHospId);\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n        let hosp_id_parts = nextHospId.split(\"-\");\n        nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n\n        let newSelectedHospitals = [...this.state.selectedHospitals, hosp[0]];\n        let newDropdowns = [...this.state.hospitalDropdowns, hosp[1]];\n\n        this.setState({\n            hospitalDropdowns : newDropdowns,\n            selectedHospitals : newSelectedHospitals,\n            nextHospitalId : nextHospId\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * addAllHospitals - Adds all hospitals available in this.props.hospitals to\n     *  the table, deleting existing ones.\n     */\n    addAllHospitals = () => {\n        let hospDropdowns = [];\n        let selectedHosps = [];\n\n        let nextHospId = this.state.nextHospitalId + \"\";\n\n        for (let hosp of this.props.hospitals) {\n            let data = this.createNewHospital(hosp, nextHospId);\n\n            selectedHosps.push(hosp);\n            hospDropdowns.push(data[1]);\n\n            // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n            let hosp_id_parts = nextHospId.split(\"-\");\n            nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n        }\n\n        this.setState({\n            hospitalDropdowns : hospDropdowns,\n            selectedHospitals : selectedHosps,\n            nextHospitalId : nextHospId\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * createNewHospital - creates a new hospitalDropdown and the according\n     *  selectedVariable which is undefined by default, but can be set using\n     *  the parameter selectedHosp\n     *\n     * @param {Object} selectedHosp the hospital that will be selected by default\n     *\n     * @return {Array} Array containing the selectedHospital variable at index 0\n     *  and the new dropdown at index 1\n     */\n    createNewHospital = (selectedHosp, id) => {\n        let newSelectedHospital = undefined;\n        if (selectedHosp) {\n            newSelectedHospital = selectedHosp;\n        }\n        let newDropdown = (\n            <div className='hospitalDropdown' key={id}>\n                <DropdownMenu id={id}\n                    listItems={this.props.hospitals}\n                    selectItem={this.selectHospital}\n                    selectedItem={newSelectedHospital}\n                    defaultText={this.props.t('dropDowns.hospitalFallback')}\n                />\n                <button className=\"btnSubtractHospital\" onClick={() => this.subtractHospital(id)}>X</button>\n            </div>\n        );\n        return [newSelectedHospital, newDropdown];\n    }\n\n    /**\n     * subtractHospital - Gets called when the remove button is clicked. Removes\n     *  the according dropdown from state.\n     *\n     * @param {String} senderId Id of the dropdown that should be removed\n     */\n    subtractHospital = (senderId) => {\n        let index;\n\n\t\tfor (let hD of this.state.hospitalDropdowns) {\n\t\t\tif (hD.props.children[0].props.id === senderId) {\n\t\t\t\tindex = this.state.hospitalDropdowns.indexOf(hD);\n                break;\n\t\t\t}\n\t\t}\n\n        let updSelHos1 = this.state.selectedHospitals.slice(0, index);\n        let updSelHos2 = this.state.selectedHospitals.slice(index + 1, this.state.selectedHospitals.length);\n        let updSelHos = updSelHos1.concat(updSelHos2);\n\n        let updHosDrp1 = this.state.hospitalDropdowns.slice(0, index);\n        let updHosDrp2 = this.state.hospitalDropdowns.slice(index + 1, this.state.hospitalDropdowns.length);\n        let updHosDrp = updHosDrp1.concat(updHosDrp2);\n\n        this.setState({\n\t\t\tselectedHospitals: updSelHos,\n\t\t\thospitalDropdowns: updHosDrp\n\t\t});\n        this.selectionChanged();\n    }\n\n    /**\n     * selectHospital - Called when a hospital is selected on a dropdown menu.\n     *  It uses the id of the dropdown that called this function to identify it's\n     *  index in the dropdowns array and update its displayed text. The index is\n     *  as well used to identify the according object in the array of selected\n     *  items and update it. Immutabilit-helper is used for that.\n     *\n     * @param {Object} item the selected item\n     * @param {String} senderId Id of the dropdown that selected something\n     */\n    selectHospital = (item, senderId) => {\n        let index;\n\n        for (let hD of this.state.hospitalDropdowns) {\n            if (hD.props.children[0].props.id === senderId) {\n                index = this.state.hospitalDropdowns.indexOf(hD);\n                break;\n            }\n        }\n\n        this.setState({\n            // selectedHospitals : newList\n            selectedHospitals: update(this.state.selectedHospitals, {[index]: {$set: item}}),\n            hospitalDropdowns: update(this.state.hospitalDropdowns, {[index]: {props: {children: {0: {props: {selectedItem: {$set: item}}}}}}})\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * addVariable - Creates a new dropdown menu to select a variable to display,\n     *  with a new unique id. Then updates the state accordingly.\n     */\n\taddVariable = () => {\n        let newVariables = [];\n        let newSelectedVariables = [];\n        let newSelectedYears = [];\n\n        let nextVariableId = this.state.nextVariableId + \"\";\n\n        let newDrp = (\n            <div className=\"variableDropdown\" key={this.state.nextVariableId}>\n                <DropdownMenu id={this.state.nextVariableId}\n                    listItems={this.props.variables}\n                    selectItem={this.selectVariable}\n                    defaultText={this.props.t('dropDowns.variablesFallback')}\n                />\n                <button className=\"btnSubtractVariable\" onClick={() => this.subtractVariable(nextVariableId)}>X</button>\n                <button className=\"btnSortAsc\" onClick={() => this.sortHospitals(nextVariableId, 'asc')}>{this.props.t('tableView.sortAsc')}</button>\n                <button className=\"btnSortDesc\" onClick={() => this.sortHospitals(nextVariableId, 'desc')}>{this.props.t('tableView.sortDesc')}</button>\n                <div className=\"yearDropdown\">\n                    <DropdownMenu id={this.state.nextYearId}\n                            listItems={[]}\n                            selectItem={this.selectYear}\n                        />\n                </div>\n            </div>\n        );\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x' for vars and years\n        let id_parts = this.state.nextVariableId.split(\"-\");\n        let nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n\n        id_parts = this.state.nextYearId.split(\"-\");\n        let nextYearIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n\n        newVariables = [...this.state.variableDropdowns, newDrp];\n        newSelectedVariables = [...this.state.selectedVariables, {}];\n        newSelectedYears = [...this.state.selectedYears, {}];\n\n        this.setState({\n            nextVariableId: nextVariableIdInc,\n            nextYearId: nextYearIdInc,\n            selectedYears: newSelectedYears,\n            variableDropdowns : newVariables,\n            selectedVariables : newSelectedVariables\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * selectionChanged - called when the selected variables or hospitals change.\n     *  This will notify the ResultTable to wipe itself (via props) and wait\n     *  for regeneration.\n     */\n    selectionChanged = () => {\n        this.setState({\n            selectionChanged: true\n        });\n        let yearDropdowns = document.getElementsByClassName('yearDropdown');\n        for(let d of yearDropdowns) {\n            d.classList.remove('showYearDropdown');\n        }\n    }\n\n    /**\n     * selectYear - called when something is selected in a yearDropdown. updates\n     *  the state and retriggers table generation.\n     */\n    selectYear = (item, senderId) => {\n        let index;\n        for (let yD of this.state.variableDropdowns) {\n            if (yD.props.children[4].props.children.props.id === senderId) {\n                index = this.state.variableDropdowns.indexOf(yD);\n                break;\n            }\n        }\n        let selectedYear;\n        if (this.state.selectedVariables[index].is_time_series) {\n            selectedYear = Number(item.name);\n        } else {\n            selectedYear = item.name;\n        }\n        let updatedYears = update(this.state.selectedYears, {[index]: {$set: selectedYear}});\n        let updatedDropdowns = update(this.state.variableDropdowns, { [index]: {props: {children: {4: {props: {children: {props: {selectedItem: {$set: item}}}}}}}}});\n        this.setState({\n            selectedYears: updatedYears,\n            variableDropdowns: updatedDropdowns\n        }, () => {\n            this.props.retriggerTableGeneration();\n        });\n    }\n\n    /**\n     * subtractVariable - Gets called when the remove button is clicked.\n     *  Removes the according dropdown from state.\n     *\n     * @param {String} senderId Id of the dropdown that should be removed\n     */\n    subtractVariable = (senderId) => {\n        let index;\n\n\t\tfor (let vD of this.state.variableDropdowns) {\n\t\t\tif (vD.props.children[0].props.id === senderId) {\n\t\t\t\tindex = this.state.variableDropdowns.indexOf(vD);\n                break;\n\t\t\t}\n\t\t}\n\n        let updSelVar1 = this.state.selectedVariables.slice(0, index);\n        let updSelVar2 = this.state.selectedVariables.slice(index + 1, this.state.selectedVariables.length);\n        let updSelVar = updSelVar1.concat(updSelVar2);\n\n        let updVarDrp1 = this.state.variableDropdowns.slice(0, index);\n        let updVarDrp2 = this.state.variableDropdowns.slice(index + 1, this.state.variableDropdowns.length);\n        let updVarDrp = updVarDrp1.concat(updVarDrp2);\n\n        this.setState({\n\t\t\tselectedVariables: updSelVar,\n\t\t\tvariableDropdowns: updVarDrp\n\t\t});\n        this.selectionChanged();\n    }\n\n    /**\n     * canTableBeSorted - checks if in each dropdown something is selected,\n     *  and if the data has been fetched for these selected things.\n     *\n     * @return {bool} true, if everything is selected and the data is loaded,\n     *  false otherwise\n     */\n    canTableBeSorted = (shouldCheckForLoadedData) => {\n        let shouldGenerate = true;\n\n        // check if in each hospital dropdown something was selected\n        for (let hosp of this.state.selectedHospitals) {\n            if (!hosp || (Object.keys(hosp).length === 0 && hosp.constructor === Object)) {\n                shouldGenerate = false;\n                break;\n            }\n        }\n        // check the same for variables\n        if (shouldGenerate) {\n            for (let variable of this.state.selectedVariables) {\n                if (!variable || (Object.keys(variable).length === 0 && variable.constructor === Object)) {\n                    shouldGenerate = false;\n                    break;\n                }\n                if (shouldCheckForLoadedData) {\n                    // also check if for the selected variables the data was fetched\n                    if (typeof(this.props.hospitals[0].attributes[variable.name]) === 'undefined') {\n                        shouldGenerate = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if (!shouldGenerate) {\n            window.alert(this.props.t('tableView.missingData'));\n        }\n\n        return shouldGenerate;\n    }\n\n    /**\n     * sortHospitals - Sorts selectedHospitals and hospitalDropdowns according\n     *  to their value on the variable with senderId.\n     *\n     * @param {String} senderId the id of the variable according to which the\n     *  hospitals should be sorted\n     * @param {String} order either 'asc' for sorting in ascending order or 'desc'\n     *  for sorting in descending order\n     */\n    sortHospitals = (senderId, order) => {\n        // first get the whole variable object using the senderId\n        let senderIndex;\n\n\t\tfor (let vD of this.state.variableDropdowns) {\n\t\t\tif (vD.props.children[0].props.id === senderId) {\n\t\t\t\tsenderIndex = this.state.variableDropdowns.indexOf(vD);\n\t\t\t}\n\t\t}\n\n        let variable = this.state.selectedVariables[senderIndex];\n\n        // then create an array containing arrays of length 2 that contain the\n        // index of the selectedHospital and its value on the variable\n        let selectedHospitals = this.state.selectedHospitals;\n        let referenceArr = [];\n\n        if (this.canTableBeSorted(true)) {\n            for (let i = 0; i < selectedHospitals.length; i++) {\n                let currentHosp;\n                for (let hosp of this.props.hospitals) {\n                    if (hosp.name === selectedHospitals[i].name) {\n                        currentHosp = hosp;\n                        break;\n                    }\n                }\n                // const latestYear = Object.keys(currentHosp.attributes[variable.name])\n                //     .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n                const year = this.state.selectedYears[senderIndex];\n                const attributes = currentHosp.attributes[variable.name];\n                let value = '';\n                if (typeof attributes[year] !== 'undefined') {\n                    value = attributes[year];\n                }\n                referenceArr.push([i, value]);\n            }\n\n            // then sort this array according to the value on the variable\n            const sortFunction = (\n                function sortFunction(a, b) {\n                    if (a[1] === b[1]) { return 0; }\n                    else {\n                        if (order === 'asc') {\n                            return (a[1] < b[1]) ? -1 : 1;\n                        }\n                        else {\n                            return (a[1] > b[1]) ? -1 : 1;\n                        }\n                    }\n                }\n            );\n\n            referenceArr.sort(sortFunction);\n\n            // according to the indices in the referenceArr, fill new sorted arrays\n            // for dropdowns and selected hospitals\n            let newHospitalDropdowns = [];\n            let newSelectedHospitals = [];\n\n            for (let i = 0; i < referenceArr.length; i++) {\n                let index = referenceArr[i][0];\n                newSelectedHospitals.push(selectedHospitals[index]);\n                newHospitalDropdowns.push(this.state.hospitalDropdowns[index]);\n            }\n\n            // then set the state\n            this.setState({\n                hospitalDropdowns : newHospitalDropdowns,\n                selectedHospitals : newSelectedHospitals\n            });\n\n            this.props.retriggerTableGeneration();\n        }\n    }\n\n    /**\n     * selectVariable - Called when a variable is selected on a dropdown menu.\n     *  It uses the id of the dropdown that called this function to identify it's\n     *  index in the dropdowns array and update its displayed text. The index is\n     *  as well used to identify the according object in the array of selected\n     *  items and update it. Immutabilit-helper is used for that.\n     *\n     * @param {Object} item the selected item\n     * @param {String} senderId Id of the dropdown that selected something\n     */\n\tselectVariable = (item, senderId) => {\n\t\tlet index;\n\n\t\tfor (let vD of this.state.variableDropdowns) {\n\t\t\tif (vD.props.children[0].props.id === senderId) {\n\t\t\t\tindex = this.state.variableDropdowns.indexOf(vD);\n                break;\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tselectedVariables: update(this.state.selectedVariables, {[index]: {$set: item}}),\n\t\t\tvariableDropdowns: update(this.state.variableDropdowns, {[index]: {props: {children: {0: {props: {selectedItem: {$set: item}}}}}}})\n        });\n        this.selectionChanged();\n\t}\n\n    /**\n     * submitTableData - Called when the ResultTable finished generating.\n     * Adds row and column names to the array for CSV export.\n     *\n     * @param {Object} data the generated 2D array\n     */\n    submitTableData = (data) => {\n        const {selectedVariables, selectedHospitals, selectedYears} = this.state;\n\n        let namedData = [];\n\n        let headers = [];\n        headers.push(\"Variable\");\n        for (let v of selectedVariables) {\n            headers.push(v.text);\n        }\n        namedData.push(headers);\n\n        let years = [];\n        years.push(\"Year\");\n        for (let y of selectedYears) {\n            years.push(y);\n        }\n        namedData.push(years);\n\n        for (let i = 0; i < data.length; i++) {\n            let row = [selectedHospitals[i].name].concat(data[i]);\n            namedData.push(row);\n        }\n\n        this.setState({\n            csvData : namedData\n        });\n    }\n\n    /**\n     * dataFetched - Called when the API-Request is completed. Collects all the\n     *  years for that data exist for all selected hospitals and updates the\n     *  according yearDropdowns\n     */\n    dataFetched = () => {\n        if (true) {\n            let updatedDropdowns = this.state.variableDropdowns;\n            let updatedYears = this.state.selectedYears;\n            for (let i = 0; i < this.state.variableDropdowns.length; i++) {\n                // let dropdown = this.state.variableDropdowns[i];\n                let selectedVariable = this.state.selectedVariables[i];\n                let years = new Set();\n                for (let selectedHospital of this.state.selectedHospitals) {\n                    let hospital = {};\n                    for (let hosp of this.props.hospitals) {\n                        if (selectedHospital.name === hosp.name) {\n                            hospital = hosp;\n                        }\n                    }\n                    if (selectedVariable.is_time_series) {\n                        for (let year of Object.keys(hospital.attributes[selectedVariable.name])){\n                            years.add(year);\n                        }\n                    } else {\n                        years.add(this.props.t('tableView.noTimeData'))\n                    }\n                }\n                years = Array.from(years);\n                const selectedYear = years.sort()[years.length - 1];\n                const selectedItem = { name: selectedYear };\n                let yearsForDropdown = [];\n                for (let year of years) {\n                    yearsForDropdown.push({ name: year});\n                }\n                yearsForDropdown.reverse();\n                updatedYears = update(updatedYears, {[i]: {$set: selectedYear}});\n                updatedDropdowns = update(updatedDropdowns, {[i]: {props: {children: {4: {props: {children: {props: {listItems: {$set: yearsForDropdown}}}}}}}}});\n                updatedDropdowns = update(updatedDropdowns, {[i]: {props: {children: {4: {props: {children: {props: {selectedItem: {$set: selectedItem}}}}}}}}});\n            }\n            this.setState({\n                variableDropdowns: updatedDropdowns,\n                selectedYears: updatedYears\n            }, () => {\n                this.props.retriggerTableGeneration();\n                let yearDropdowns = document.getElementsByClassName('yearDropdown');\n                for (let d of yearDropdowns) {\n                    d.classList.toggle('showYearDropdown');\n                }\n            });\n        }\n    }\n\n    /**\n     * resultTableAcknowledgedChange - Used by ResultTable to tell the\n     *  InteractiveTable that it wiped the table when the user changed the\n     *  selection of vars or hosps\n     */\n    resultTableAcknowledgedChange = () => {\n        this.setState({\n            selectionChanged: false\n        });\n    }\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    render() {\n        const { t, variables, hospitals, tableDataLoaded, tableDataGenerated } = this.props;\n        const { hospitalDropdowns, variableDropdowns, selectedHospitals, selectedVariables, selectedYears, selectionChanged, csvData } = this.state;\n        return (\n            <div className=\"interactiveTable\">\n                <button className=\"btnCreateCSV\"\n                onClick={() => this.csvLink.link.click()}>\n                {t('tableView.btnCreateCSV')}\n                </button>\n                <VariableSelector\n                    className=\"variableSelector\"\n                    variables={variables}\n                    variableDropdowns={variableDropdowns}\n\t\t\t\t\taddVariable={this.addVariable}\n                />\n                <HospitalSelector\n                    className=\"hospitalSelector\"\n                    hospitals={hospitals}\n                    hospitalDropdowns={hospitalDropdowns}\n                    selectedHospitals={selectedHospitals}\n                    addHospital={this.addHospital}\n                />\n                <ResultTable\n                    className=\"resultTable\"\n                    selectedHospitals={selectedHospitals}\n                    selectedVariables={selectedVariables}\n                    selectedYears={selectedYears}\n                    hospitalData={hospitals}\n                    dataLoaded={tableDataLoaded}\n                    dataGenerated={tableDataGenerated}\n                    submitTableData={this.submitTableData}\n                    selectionChanged={selectionChanged}\n                    changeAcknowledged={this.resultTableAcknowledgedChange}\n                />\n\t\t\t\t<CSVLink\n\t\t\t\t\tdata={csvData}\n\t\t\t\t\tfilename=\"medlandscapeCSV.csv\"\n\t\t\t\t\tclassName=\"CSVButton\"\n\t\t\t\t\tref={(r) => this.csvLink = r}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t/>\n                <button\n                    className=\"btnGenerateTable\"\n                    onClick={() => {\n                        if(this.canTableBeSorted(false)) {\n                            this.props.requestData(selectedVariables, this.dataFetched);\n                        }\n                    }}>{t('tableView.btnCreateTable')}\n                </button>\n                <button\n                    className=\"btnAddAllHospitals\"\n                    onClick={() => this.addAllHospitals()}>{t('tableView.btnAddAllHospitals')}\n                </button>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n * requestData: function that will be called to download the requested data\n * hasLoaded: bool that will be true if the data is loaded\n * retriggerTableGeneration: will cause resultTable to regenerate its table\n *  without resending a request\n * tableDataGenerated: will notify parent that ResultTable has finished\n *  generating the table (called from ResultTable)\n * tableDataLoaded: boolean that is true when the parent finished the request\n *  and false when not (will be set to false again by ResultTable after it\n *  finished table generation)\n */\nInteractiveTable.propTypes = {\n    variables: PropTypes.array.isRequired,\n    hospitals: PropTypes.array.isRequired,\n    requestData: PropTypes.func.isRequired,\n    hasLoaded: PropTypes.bool.isRequired,\n    retriggerTableGeneration: PropTypes.func.isRequired,\n    tableDataGenerated: PropTypes.func.isRequired,\n    tableDataLoaded: PropTypes.bool.isRequired\n}\n\nconst LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;\n"]},"metadata":{},"sourceType":"module"}