{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js';\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.applyVar = function (selectedVar) {\n      var name = selectedVar.name,\n          variable_model = selectedVar.variable_model;\n      var query = _this.props.i18n.language + apiRequest;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      query += key + \"?variables=\" + encodeURIComponent(name);\n\n      _this.apiCall(query).then(function (results) {\n        _this.setState(_defineProperty({}, key, results.map(function (obj) {\n          return obj;\n        })));\n\n        if (key === \"hospitals\") {\n          _this.setState({\n            selectedHospitals: results.map(function (obj) {\n              return obj;\n            })\n          });\n        }\n      }).then(function () {\n        _this.setState({\n          hasLoaded: true,\n          selectedYear: _this.getYears()[0]\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr,\n          cantonResultArr = [];\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"variables\").then(function (result) {\n        varResultArr = result.map(function (obj) {\n          return obj;\n        });\n      }); // hospitals already fetched in applyVar()\n\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"cantons\").then(function (result) {\n        cantonResultArr = result.map(function (obj) {\n          return obj;\n        });\n      }).then(function () {\n        _this.setState({\n          variables: varResultArr,\n          cantons: cantonResultArr,\n          selectedVariable: varResultArr[0]\n        });\n\n        _this.applyVar(varResultArr[0]);\n      });\n    };\n\n    _this.dropdownSelectItem = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n\n      _this.applyVar(item);\n    };\n\n    _this.requestTableData = function (vars) {\n      var requestedVars = \"\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = vars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var variable = _step.value;\n          requestedVars += variable.name + '$';\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      requestedVars = requestedVars.substring(0, requestedVars.length - 1);\n      var query = _this.props.i18n.language + apiRequest;\n      query += 'hospitals' + \"?variables=\" + requestedVars;\n\n      _this.apiCall(query).then(function (results) {\n        _this.setState({\n          hospitals: results.map(function (obj) {\n            return obj;\n          })\n        });\n      }).then(function () {\n        _this.setState({\n          tableDataLoaded: true\n        });\n      });\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.checkboxSelectItem = function (object) {\n      var selectedObj = object.text ? \"selectedCantons\" : \"selectedHospitals\";\n      var newList = [];\n\n      if (_this.state[selectedObj].includes(object)) {\n        newList = _this.state[selectedObj].filter(function (checkedObj) {\n          return checkedObj !== object;\n        });\n      } else {\n        newList = [].concat(_toConsumableArray(_this.state[selectedObj]), [object]);\n      }\n\n      _this.setState(_defineProperty({}, selectedObj, newList));\n    };\n\n    _this.create2dArr = function (selectedObject) {\n      var arr = [];\n\n      for (var key in selectedObject) {\n        if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n          arr.push([key, selectedObject[key]]);\n        }\n      }\n\n      return arr;\n    };\n\n    _this.getYears = function () {\n      var selVar = _this.state.selectedVariable;\n      var selObj = selVar.variable_model === \"Hospital\" ? _this.state.selectedHospitals : _this.state.cantons;\n      var years = selVar.is_time_series ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n      return years;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year,\n        hasLoaded: true\n      });\n    };\n\n    _this.updateSelectedHospitals = function (selectedHospitals) {\n      _this.setState({\n        selectedHospitals: selectedHospitals\n      });\n    };\n\n    _this.state = {\n      variables: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      selectedCantons: [],\n      selectedHospitals: [],\n      selectedYear: \"\",\n      hasLoaded: false,\n      tableDataLoaded: false\n    };\n    _this.updateSelectedHospitals = _this.updateSelectedHospitals.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**\n  * Fetches Cantons or Hospitals with the selected Variable information.\n  * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n  */\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [];\n      var selectedCanton = {},\n          selectedHospital = {};\n      hospitalVars = this.state.variables.filter(function (variable) {\n        if (variable.variable_model === \"Hospital\") return variable;\n      });\n      cantonVars = this.state.variables.filter(function (variable) {\n        if (variable.variable_model === \"Canton\") return variable;\n      });\n\n      if (this.state.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.state.selectedVariable;\n        selectedCanton = cantonVars[0];\n      } else {\n        selectedCanton = this.state.selectedVariable;\n        selectedHospital = hospitalVars[0];\n      }\n\n      var t = this.props.t;\n      years = this.state.hasLoaded ? this.getYears() : [];\n      console.log(this.state.variables);\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(InteractiveTable, {\n        variables: hospitalVars,\n        hospitals: this.state.hospitals,\n        requestData: this.requestTableData,\n        tableDataLoaded: this.state.tableDataLoaded,\n        tableDataGenerated: this.tableDataGenerated,\n        hasLoaded: this.state.hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","DropdownMenu","Maps","Slider","FilterEditor","withTranslation","LanguagePicker","InteractiveTable","apiURL","apiRequest","App","props","applyVar","selectedVar","name","variable_model","query","i18n","language","key","encodeURIComponent","apiCall","then","results","setState","map","obj","selectedHospitals","hasLoaded","selectedYear","getYears","fetch","res","json","initApiCall","varResultArr","cantonResultArr","result","variables","cantons","selectedVariable","dropdownSelectItem","item","requestTableData","vars","requestedVars","variable","substring","length","hospitals","tableDataLoaded","tableDataGenerated","checkboxSelectItem","object","selectedObj","text","newList","state","includes","filter","checkedObj","create2dArr","selectedObject","arr","push","selVar","selObj","years","is_time_series","Object","keys","attributes","setYear","year","updateSelectedHospitals","selectedCantons","bind","cantonVars","hospitalVars","selectedCanton","selectedHospital","t","console","log","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js'\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            variables: [],\n            cantons : [],\n            hospitals : [],\n\n            selectedVariable : {},\n            selectedCantons : [],\n            selectedHospitals : [],\n            selectedYear : \"\",\n            hasLoaded : false,\n            tableDataLoaded: false\n        }\n        this.updateSelectedHospitals = this.updateSelectedHospitals.bind(this)\n    }\n\n    /**\n    * Fetches Cantons or Hospitals with the selected Variable information.\n    * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n    */\n    applyVar = (selectedVar) => {\n        const {name, variable_model} = selectedVar;\n\n        let query = this.props.i18n.language + apiRequest;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        query += key + \"?variables=\" + encodeURIComponent(name);\n\n        this.apiCall(query).then((results) => {\n            this.setState({\n                [key] : results.map(obj => {\n                    return obj;\n                }),\n            });\n            if (key === \"hospitals\"){\n                this.setState({selectedHospitals : results.map(obj => {\n                    return obj;\n                    }),\n                });\n            }\n        }).then(() => {\n            this.setState({\n                hasLoaded : true,\n                selectedYear : this.getYears()[0]\n            });\n        })\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with several calls to the API.\n    */\n    initApiCall = () => {\n        let varResultArr, cantonResultArr = [];\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"variables\")).then((result) => {\n            varResultArr = result.map(obj => {\n                return obj;\n            })\n        });\n\n        // hospitals already fetched in applyVar()\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"cantons\")).then((result) => {\n            cantonResultArr = result.map(obj => {\n                return obj;\n            })\n        }).then(() => {\n            this.setState({\n                variables : varResultArr,\n                cantons : cantonResultArr,\n                selectedVariable : varResultArr[0]\n            });\n            this.applyVar(varResultArr[0]);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * then calls applyVar to fetch data from the API.\n    * @param  {Variable object} item The selected variable.\n    */\n    dropdownSelectItem = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n        this.applyVar(item);\n    }\n\n    requestTableData = (vars) => {\n        let requestedVars = \"\";\n\n        for (let variable of vars) {\n            requestedVars += variable.name + '$';\n        }\n\n        requestedVars = requestedVars.substring(0, requestedVars.length - 1);\n\n        let query = this.props.i18n.language + apiRequest;\n        query += 'hospitals' + \"?variables=\" + requestedVars;\n\n        this.apiCall(query).then((results) => {\n            this.setState({\n                hospitals : results.map(obj => {\n                    return obj;\n                }),\n            });\n        }).then(() => {\n            this.setState({\n                tableDataLoaded : true\n            })\n        });\n    }\n\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    /**\n    * Adds / removes objects to the respective List of selected canton / hospitals.\n    * @param  {Canton/Hospital object} object The object to add / remove from the list.\n    */\n    checkboxSelectItem = (object) => {\n        let selectedObj = (object.text) ? \"selectedCantons\" : \"selectedHospitals\";\n        let newList = [];\n        if (this.state[selectedObj].includes(object)) {\n            newList = this.state[selectedObj].filter(checkedObj => {\n                return checkedObj !== object;\n            });\n        } else {\n            newList = [...this.state[selectedObj], object];\n        }\n        this.setState({\n            [selectedObj] : newList\n        })\n    }\n\n    /**\n    * Creates a 2d array out of an object (Used for Table Component).\n    * @param  {Object} selectedObject The object to convert to a 2d array.\n    * @return {Array} The 2d array.\n    */\n    create2dArr = (selectedObject) => {\n        let arr = [];\n        for (var key in selectedObject) {\n            if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n                arr.push([key, selectedObject[key]]);\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * Returns list of available years depending on variable\n     * @return {Array} The available years.\n     */\n    getYears = () => {\n        let selVar = this.state.selectedVariable;\n        let selObj = (selVar.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons;\n        let years = (selVar.is_time_series) ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n        return years;\n    }\n\n    /**\n     * [setYear description]\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year,\n            hasLoaded : true\n        })\n    }\n\n    /**\n     * Set selectedHospitals to\n     * @param {Array} the selected hospitals.\n     */\n    updateSelectedHospitals = (selectedHospitals) => {\n        this.setState({\n            selectedHospitals: selectedHospitals\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        hospitalVars = this.state.variables.filter(variable => {\n            if (variable.variable_model === \"Hospital\")\n            return variable\n        })\n        cantonVars = this.state.variables.filter(variable => {\n            if (variable.variable_model === \"Canton\")\n            return variable\n        })\n\n        if (this.state.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.state.selectedVariable;\n            selectedCanton = cantonVars[0];\n        } else {\n            selectedCanton = this.state.selectedVariable;\n            selectedHospital = hospitalVars[0];\n        }\n\n        const { t } = this.props;\n        years = (this.state.hasLoaded) ? this.getYears() : [];\n        console.log(this.state.variables);\n        return (\n\t\t\t<div className=\"App\">\n\t\t\t\t<InteractiveTable\n                    variables={hospitalVars}\n                    hospitals={this.state.hospitals}\n                    requestData={this.requestTableData}\n                    tableDataLoaded={this.state.tableDataLoaded}\n                    tableDataGenerated={this.tableDataGenerated}\n                    hasLoaded={this.state.hasLoaded}\n                />\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}