{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js';\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.applyVar = function (selectedVar) {\n      var name = selectedVar.name,\n          variable_model = selectedVar.variable_model;\n      var query = _this.props.i18n.language + apiRequest;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      query += key + \"?variables=\" + encodeURIComponent(name);\n\n      _this.apiCall(query).then(function (results) {\n        _this.setState(_defineProperty({}, key, results.map(function (obj) {\n          return obj;\n        })));\n\n        if (key === \"hospitals\") {\n          _this.setState({\n            selectedHospitals: results.map(function (obj) {\n              return obj;\n            })\n          });\n        }\n      }).then(function () {\n        _this.setState({\n          hasLoaded: true,\n          selectedYear: _this.getYears()[0]\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr,\n          cantonResultArr = [];\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"variables\").then(function (result) {\n        varResultArr = result.map(function (obj) {\n          return obj;\n        });\n      }); // hospitals already fetched in applyVar()\n\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"cantons\").then(function (result) {\n        cantonResultArr = result.map(function (obj) {\n          return obj;\n        });\n      }).then(function () {\n        _this.setState({\n          variables: varResultArr,\n          cantons: cantonResultArr,\n          selectedVariable: varResultArr[0]\n        });\n\n        _this.applyVar(varResultArr[0]);\n      });\n    };\n\n    _this.dropdownSelectItem = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n\n      _this.applyVar(item);\n    };\n\n    _this.checkboxSelectItem = function (object) {\n      var selectedObj = object.text ? \"selectedCantons\" : \"selectedHospitals\";\n      var newList = [];\n\n      if (_this.state[selectedObj].includes(object)) {\n        newList = _this.state[selectedObj].filter(function (checkedObj) {\n          return checkedObj !== object;\n        });\n      } else {\n        newList = [].concat(_toConsumableArray(_this.state[selectedObj]), [object]);\n      }\n\n      _this.setState(_defineProperty({}, selectedObj, newList));\n    };\n\n    _this.create2dArr = function (selectedObject) {\n      var arr = [];\n\n      for (var key in selectedObject) {\n        if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n          arr.push([key, selectedObject[key]]);\n        }\n      }\n\n      return arr;\n    };\n\n    _this.getYears = function () {\n      var selVar = _this.state.selectedVariable;\n      var selObj = selVar.variable_model === \"Hospital\" ? _this.state.selectedHospitals : _this.state.cantons;\n      var years = selVar.is_time_series ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n      return years;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year,\n        hasLoaded: true\n      });\n    };\n\n    _this.updateSelectedHospitals = function (selectedHospitals) {\n      _this.setState({\n        selectedHospitals: selectedHospitals\n      });\n    };\n\n    _this.state = {\n      variables: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      selectedCantons: [],\n      selectedHospitals: [],\n      selectedYear: \"\",\n      hasLoaded: false\n    };\n    return _this;\n  }\n  /**\n  * Fetches Cantons or Hospitals with the selected Variable information.\n  * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n  */\n\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [];\n      var selectedCanton = {},\n          selectedHospital = {};\n      hospitalVars = this.state.variables.filter(function (variable) {\n        if (variable.variable_model === \"Hospital\") return variable;\n      });\n      cantonVars = this.state.variables.filter(function (variable) {\n        if (variable.variable_model === \"Canton\") return variable;\n      });\n\n      if (this.state.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.state.selectedVariable;\n        selectedCanton = cantonVars[0];\n      } else {\n        selectedCanton = this.state.selectedVariable;\n        selectedHospital = hospitalVars[0];\n      }\n\n      var t = this.props.t;\n      years = this.state.hasLoaded ? this.getYears() : [];\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, t('variables.name_canton')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: selectedCanton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, t('variables.name_hospital')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: selectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      })), years.length > 1 ? React.createElement(Slider, {\n        years: years,\n        selectedYear: this.state.selectedYear,\n        setYear: this.setYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }) : null), React.createElement(Maps, {\n        objects: this.state.selectedVariable.variable_model === \"Hospital\" ? this.state.selectedHospitals : this.state.cantons,\n        variableInfo: this.state.selectedVariable,\n        year: this.state.selectedYear,\n        hasLoaded: this.state.hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), React.createElement(FilterEditor, {\n        hospitals: this.state.hospitals,\n        updateHospitals: this.updateSelectedHospitals,\n        hasLoaded: this.state.hasLoaded,\n        variables: this.state.variables,\n        selectedYear: this.state.selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","DropdownMenu","Maps","Slider","FilterEditor","withTranslation","LanguagePicker","apiURL","apiRequest","App","props","applyVar","selectedVar","name","variable_model","query","i18n","language","key","encodeURIComponent","apiCall","then","results","setState","map","obj","selectedHospitals","hasLoaded","selectedYear","getYears","fetch","res","json","initApiCall","varResultArr","cantonResultArr","result","variables","cantons","selectedVariable","dropdownSelectItem","item","checkboxSelectItem","object","selectedObj","text","newList","state","includes","filter","checkedObj","create2dArr","selectedObject","arr","push","selVar","selObj","years","is_time_series","Object","keys","attributes","setYear","year","updateSelectedHospitals","hospitals","selectedCantons","cantonVars","hospitalVars","selectedCanton","selectedHospital","variable","t","length","LocalizedApp"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,OAAO,WAAP;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,cAAP,MAA2B,+CAA3B;AAEA,IAAMC,MAAM,GAAG,iBAAf;AACA,IAAIC,UAAU,GAAG,yBAAjB;;IAEMC,G;;;;;AAEF,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;;AADe,UAmBnBC,QAnBmB,GAmBR,UAACC,WAAD,EAAiB;AAAA,UACjBC,IADiB,GACOD,WADP,CACjBC,IADiB;AAAA,UACXC,cADW,GACOF,WADP,CACXE,cADW;AAGxB,UAAIC,KAAK,GAAG,MAAKL,KAAL,CAAWM,IAAX,CAAgBC,QAAhB,GAA2BT,UAAvC;AACA,UAAIU,GAAG,GAAIJ,cAAc,KAAK,UAApB,GAAkC,WAAlC,GAAgD,SAA1D;AACAC,MAAAA,KAAK,IAAIG,GAAG,GAAG,aAAN,GAAsBC,kBAAkB,CAACN,IAAD,CAAjD;;AAEA,YAAKO,OAAL,CAAaL,KAAb,EAAoBM,IAApB,CAAyB,UAACC,OAAD,EAAa;AAClC,cAAKC,QAAL,qBACKL,GADL,EACYI,OAAO,CAACE,GAAR,CAAY,UAAAC,GAAG,EAAI;AACvB,iBAAOA,GAAP;AACH,SAFO,CADZ;;AAKA,YAAIP,GAAG,KAAK,WAAZ,EAAwB;AACpB,gBAAKK,QAAL,CAAc;AAACG,YAAAA,iBAAiB,EAAGJ,OAAO,CAACE,GAAR,CAAY,UAAAC,GAAG,EAAI;AAClD,qBAAOA,GAAP;AACC,aAF8B;AAArB,WAAd;AAIH;AACJ,OAZD,EAYGJ,IAZH,CAYQ,YAAM;AACV,cAAKE,QAAL,CAAc;AACVI,UAAAA,SAAS,EAAG,IADF;AAEVC,UAAAA,YAAY,EAAG,MAAKC,QAAL,GAAgB,CAAhB;AAFL,SAAd;AAIH,OAjBD;AAkBH,KA5CkB;;AAAA,UAmDnBT,OAnDmB,GAmDT,UAACL,KAAD,EAAW;AACjB,aAAOe,KAAK,CAACvB,MAAM,GAAGQ,KAAV,CAAL,CAAsBM,IAAtB,CAA2B,UAAAU,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OAA9B,CAAP;AACH,KArDkB;;AAAA,UA0DnBC,WA1DmB,GA0DL,YAAM;AAChB,UAAIC,YAAJ;AAAA,UAAkBC,eAAe,GAAG,EAApC;;AAEA,YAAKf,OAAL,CAAc,MAAKV,KAAL,CAAWM,IAAX,CAAgBC,QAAhB,GAA2BT,UAA3B,GAAwC,WAAtD,EAAoEa,IAApE,CAAyE,UAACe,MAAD,EAAY;AACjFF,QAAAA,YAAY,GAAGE,MAAM,CAACZ,GAAP,CAAW,UAAAC,GAAG,EAAI;AAC7B,iBAAOA,GAAP;AACH,SAFc,CAAf;AAGH,OAJD,EAHgB,CAShB;;;AAEA,YAAKL,OAAL,CAAc,MAAKV,KAAL,CAAWM,IAAX,CAAgBC,QAAhB,GAA2BT,UAA3B,GAAwC,SAAtD,EAAkEa,IAAlE,CAAuE,UAACe,MAAD,EAAY;AAC/ED,QAAAA,eAAe,GAAGC,MAAM,CAACZ,GAAP,CAAW,UAAAC,GAAG,EAAI;AAChC,iBAAOA,GAAP;AACH,SAFiB,CAAlB;AAGH,OAJD,EAIGJ,IAJH,CAIQ,YAAM;AACV,cAAKE,QAAL,CAAc;AACVc,UAAAA,SAAS,EAAGH,YADF;AAEVI,UAAAA,OAAO,EAAGH,eAFA;AAGVI,UAAAA,gBAAgB,EAAGL,YAAY,CAAC,CAAD;AAHrB,SAAd;;AAKA,cAAKvB,QAAL,CAAcuB,YAAY,CAAC,CAAD,CAA1B;AACH,OAXD;AAYH,KAjFkB;;AAAA,UAwFnBM,kBAxFmB,GAwFE,UAACC,IAAD,EAAU;AAC3B,YAAKlB,QAAL,CAAc;AACVgB,QAAAA,gBAAgB,EAAGE,IADT;AAEVd,QAAAA,SAAS,EAAG;AAFF,OAAd;;AAIA,YAAKhB,QAAL,CAAc8B,IAAd;AACH,KA9FkB;;AAAA,UAoGnBC,kBApGmB,GAoGE,UAACC,MAAD,EAAY;AAC7B,UAAIC,WAAW,GAAID,MAAM,CAACE,IAAR,GAAgB,iBAAhB,GAAoC,mBAAtD;AACA,UAAIC,OAAO,GAAG,EAAd;;AACA,UAAI,MAAKC,KAAL,CAAWH,WAAX,EAAwBI,QAAxB,CAAiCL,MAAjC,CAAJ,EAA8C;AAC1CG,QAAAA,OAAO,GAAG,MAAKC,KAAL,CAAWH,WAAX,EAAwBK,MAAxB,CAA+B,UAAAC,UAAU,EAAI;AACnD,iBAAOA,UAAU,KAAKP,MAAtB;AACH,SAFS,CAAV;AAGH,OAJD,MAIO;AACHG,QAAAA,OAAO,gCAAO,MAAKC,KAAL,CAAWH,WAAX,CAAP,IAAgCD,MAAhC,EAAP;AACH;;AACD,YAAKpB,QAAL,qBACKqB,WADL,EACoBE,OADpB;AAGH,KAjHkB;;AAAA,UAwHnBK,WAxHmB,GAwHL,UAACC,cAAD,EAAoB;AAC9B,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAInC,GAAT,IAAgBkC,cAAhB,EAAgC;AAC5B,YAAI,OAAOA,cAAc,CAAClC,GAAD,CAArB,KAA+B,QAA/B,IAA2CkC,cAAc,CAAClC,GAAD,CAAd,KAAwB,IAAvE,EAA6E;AACzEmC,UAAAA,GAAG,CAACC,IAAJ,CAAS,CAACpC,GAAD,EAAMkC,cAAc,CAAClC,GAAD,CAApB,CAAT;AACH;AACJ;;AACD,aAAOmC,GAAP;AACH,KAhIkB;;AAAA,UAsInBxB,QAtImB,GAsIR,YAAM;AACb,UAAI0B,MAAM,GAAG,MAAKR,KAAL,CAAWR,gBAAxB;AACA,UAAIiB,MAAM,GAAID,MAAM,CAACzC,cAAP,KAA0B,UAA3B,GAAyC,MAAKiC,KAAL,CAAWrB,iBAApD,GAAwE,MAAKqB,KAAL,CAAWT,OAAhG;AACA,UAAImB,KAAK,GAAIF,MAAM,CAACG,cAAR,GAA0BC,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAAC,CAAD,CAAN,CAAUK,UAAV,CAAqBN,MAAM,CAAC1C,IAA5B,CAAZ,CAA1B,GAA2E,CAAC,SAAD,CAAvF;AACA,aAAO4C,KAAP;AACH,KA3IkB;;AAAA,UAgJnBK,OAhJmB,GAgJT,UAACC,IAAD,EAAU;AAChB,YAAKxC,QAAL,CAAc;AACVK,QAAAA,YAAY,EAAGmC,IADL;AAEVpC,QAAAA,SAAS,EAAG;AAFF,OAAd;AAIH,KArJkB;;AAAA,UA2JnBqC,uBA3JmB,GA2JO,UAACtC,iBAAD,EAAuB;AAC7C,YAAKH,QAAL,CAAc;AACVG,QAAAA,iBAAiB,EAAEA;AADT,OAAd;AAGH,KA/JkB;;AAEf,UAAKqB,KAAL,GAAa;AACTV,MAAAA,SAAS,EAAE,EADF;AAETC,MAAAA,OAAO,EAAG,EAFD;AAGT2B,MAAAA,SAAS,EAAG,EAHH;AAKT1B,MAAAA,gBAAgB,EAAG,EALV;AAMT2B,MAAAA,eAAe,EAAG,EANT;AAOTxC,MAAAA,iBAAiB,EAAG,EAPX;AAQTE,MAAAA,YAAY,EAAG,EARN;AASTD,MAAAA,SAAS,EAAG;AATH,KAAb;AAFe;AAalB;AAED;;;;;;;;wCAkJoB;AAChB,WAAKM,WAAL;AACH;;;6BAEQ;AACL,UAAIkC,UAAU,GAAG,EAAjB;AAAA,UAAqBC,YAAY,GAAG,EAApC;AAAA,UAAwCX,KAAK,GAAG,EAAhD;AACA,UAAIY,cAAc,GAAG,EAArB;AAAA,UAAyBC,gBAAgB,GAAG,EAA5C;AAEAF,MAAAA,YAAY,GAAG,KAAKrB,KAAL,CAAWV,SAAX,CAAqBY,MAArB,CAA4B,UAAAsB,QAAQ,EAAI;AACnD,YAAIA,QAAQ,CAACzD,cAAT,KAA4B,UAAhC,EACA,OAAOyD,QAAP;AACH,OAHc,CAAf;AAIAJ,MAAAA,UAAU,GAAG,KAAKpB,KAAL,CAAWV,SAAX,CAAqBY,MAArB,CAA4B,UAAAsB,QAAQ,EAAI;AACjD,YAAIA,QAAQ,CAACzD,cAAT,KAA4B,QAAhC,EACA,OAAOyD,QAAP;AACH,OAHY,CAAb;;AAKA,UAAI,KAAKxB,KAAL,CAAWR,gBAAX,CAA4BzB,cAA5B,KAA+C,UAAnD,EAA+D;AAC3DwD,QAAAA,gBAAgB,GAAG,KAAKvB,KAAL,CAAWR,gBAA9B;AACA8B,QAAAA,cAAc,GAAGF,UAAU,CAAC,CAAD,CAA3B;AACH,OAHD,MAGO;AACHE,QAAAA,cAAc,GAAG,KAAKtB,KAAL,CAAWR,gBAA5B;AACA+B,QAAAA,gBAAgB,GAAGF,YAAY,CAAC,CAAD,CAA/B;AACH;;AAnBI,UAqBGI,CArBH,GAqBS,KAAK9D,KArBd,CAqBG8D,CArBH;AAsBLf,MAAAA,KAAK,GAAI,KAAKV,KAAL,CAAWpB,SAAZ,GAAyB,KAAKE,QAAL,EAAzB,GAA2C,EAAnD;AAEA,aACL;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI2C,CAAC,CAAC,uBAAD,CAAL,CADD,EAEC,oBAAC,YAAD;AAAc,QAAA,EAAE,EAAC,YAAjB;AAA8B,QAAA,SAAS,EAAEL,UAAzC;AAAqD,QAAA,UAAU,EAAE,KAAK3B,kBAAtE;AAA0F,QAAA,YAAY,EAAE6B,cAAxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIG,CAAC,CAAC,yBAAD,CAAL,CAHD,EAIC,oBAAC,YAAD;AAAc,QAAA,EAAE,EAAC,cAAjB;AAAgC,QAAA,SAAS,EAAEJ,YAA3C;AAAyD,QAAA,UAAU,EAAE,KAAK5B,kBAA1E;AAA8F,QAAA,YAAY,EAAE8B,gBAA5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJD,EAKC,oBAAC,cAAD;AAAgB,QAAA,iBAAiB,EAAE,KAAKrC,WAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALD,CADD,EASGwB,KAAK,CAACgB,MAAN,GAAe,CAAhB,GACE,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAEhB,KAAf;AAAsB,QAAA,YAAY,EAAE,KAAKV,KAAL,CAAWnB,YAA/C;AAA6D,QAAA,OAAO,EAAE,KAAKkC,OAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,GAEE,IAXJ,CADD,EAeC,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAG,KAAKf,KAAL,CAAWR,gBAAX,CAA4BzB,cAA5B,KAA+C,UAAhD,GAA8D,KAAKiC,KAAL,CAAWrB,iBAAzE,GAA6F,KAAKqB,KAAL,CAAWT,OAAvH;AAAgI,QAAA,YAAY,EAAE,KAAKS,KAAL,CAAWR,gBAAzJ;AAA2K,QAAA,IAAI,EAAE,KAAKQ,KAAL,CAAWnB,YAA5L;AAA0M,QAAA,SAAS,EAAE,KAAKmB,KAAL,CAAWpB,SAAhO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfD,EAgBC,oBAAC,YAAD;AAAc,QAAA,SAAS,EAAE,KAAKoB,KAAL,CAAWkB,SAApC;AAA+C,QAAA,eAAe,EAAE,KAAKD,uBAArE;AAA8F,QAAA,SAAS,EAAE,KAAKjB,KAAL,CAAWpB,SAApH;AAA+H,QAAA,SAAS,EAAE,KAAKoB,KAAL,CAAWV,SAArJ;AAAgK,QAAA,YAAY,EAAE,KAAKU,KAAL,CAAWnB,YAAzL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBD,CADK;AAoBH;;;;EAnNa5B,S;AAsNlB;;;;;;AAIA,IAAM0E,YAAY,GAAGrE,eAAe,GAAGI,GAAH,CAApC;AACA,eAAeiE,YAAf","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js'\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            variables: [],\n            cantons : [],\n            hospitals : [],\n\n            selectedVariable : {},\n            selectedCantons : [],\n            selectedHospitals : [],\n            selectedYear : \"\",\n            hasLoaded : false\n        }\n    }\n\n    /**\n    * Fetches Cantons or Hospitals with the selected Variable information.\n    * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n    */\n    applyVar = (selectedVar) => {\n        const {name, variable_model} = selectedVar;\n\n        let query = this.props.i18n.language + apiRequest;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        query += key + \"?variables=\" + encodeURIComponent(name);\n\n        this.apiCall(query).then((results) => {\n            this.setState({\n                [key] : results.map(obj => {\n                    return obj;\n                }),\n            });\n            if (key === \"hospitals\"){\n                this.setState({selectedHospitals : results.map(obj => {\n                    return obj;\n                    }),\n                });\n            }\n        }).then(() => {\n            this.setState({\n                hasLoaded : true,\n                selectedYear : this.getYears()[0]\n            });\n        })\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with several calls to the API.\n    */\n    initApiCall = () => {\n        let varResultArr, cantonResultArr = [];\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"variables\")).then((result) => {\n            varResultArr = result.map(obj => {\n                return obj;\n            })\n        });\n\n        // hospitals already fetched in applyVar()\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"cantons\")).then((result) => {\n            cantonResultArr = result.map(obj => {\n                return obj;\n            })\n        }).then(() => {\n            this.setState({\n                variables : varResultArr,\n                cantons : cantonResultArr,\n                selectedVariable : varResultArr[0]\n            });\n            this.applyVar(varResultArr[0]);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * then calls applyVar to fetch data from the API.\n    * @param  {Variable object} item The selected variable.\n    */\n    dropdownSelectItem = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n        this.applyVar(item);\n    }\n\n    /**\n    * Adds / removes objects to the respective List of selected canton / hospitals.\n    * @param  {Canton/Hospital object} object The object to add / remove from the list.\n    */\n    checkboxSelectItem = (object) => {\n        let selectedObj = (object.text) ? \"selectedCantons\" : \"selectedHospitals\";\n        let newList = [];\n        if (this.state[selectedObj].includes(object)) {\n            newList = this.state[selectedObj].filter(checkedObj => {\n                return checkedObj !== object;\n            });\n        } else {\n            newList = [...this.state[selectedObj], object];\n        }\n        this.setState({\n            [selectedObj] : newList\n        })\n    }\n\n    /**\n    * Creates a 2d array out of an object (Used for Table Component).\n    * @param  {Object} selectedObject The object to convert to a 2d array.\n    * @return {Array} The 2d array.\n    */\n    create2dArr = (selectedObject) => {\n        let arr = [];\n        for (var key in selectedObject) {\n            if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n                arr.push([key, selectedObject[key]]);\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * Returns list of available years depending on variable\n     * @return {Array} The available years.\n     */\n    getYears = () => {\n        let selVar = this.state.selectedVariable;\n        let selObj = (selVar.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons;\n        let years = (selVar.is_time_series) ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n        return years;\n    }\n\n    /**\n     * [setYear description]\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year,\n            hasLoaded : true\n        })\n    }\n\n    /**\n     * Set selectedHospitals to\n     * @param {Array} the selected hospitals.\n     */\n    updateSelectedHospitals = (selectedHospitals) => {\n        this.setState({\n            selectedHospitals: selectedHospitals\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        hospitalVars = this.state.variables.filter(variable => {\n            if (variable.variable_model === \"Hospital\")\n            return variable\n        })\n        cantonVars = this.state.variables.filter(variable => {\n            if (variable.variable_model === \"Canton\")\n            return variable\n        })\n\n        if (this.state.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.state.selectedVariable;\n            selectedCanton = cantonVars[0];\n        } else {\n            selectedCanton = this.state.selectedVariable;\n            selectedHospital = hospitalVars[0];\n        }\n\n        const { t } = this.props;\n        years = (this.state.hasLoaded) ? this.getYears() : [];\n\n        return (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t<div className=\"control-panel\">\n\t\t\t\t\t\t<p>{t('variables.name_canton')}</p>\n\t\t\t\t\t\t<DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.dropdownSelectItem} selectedItem={selectedCanton} />\n\t\t\t\t\t\t<p>{t('variables.name_hospital')}</p>\n\t\t\t\t\t\t<DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.dropdownSelectItem} selectedItem={selectedHospital} />\n\t\t\t\t\t\t<LanguagePicker resendInitApiCall={this.initApiCall} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{\n\t\t\t\t\t\t(years.length > 1)\n\t\t\t\t\t\t? <Slider years={years} selectedYear={this.state.selectedYear} setYear={this.setYear}/>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<Maps objects={(this.state.selectedVariable.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons} variableInfo={this.state.selectedVariable} year={this.state.selectedYear} hasLoaded={this.state.hasLoaded} />\n\t\t\t\t<FilterEditor hospitals={this.state.hospitals} updateHospitals={this.updateSelectedHospitals} hasLoaded={this.state.hasLoaded} variables={this.state.variables} selectedYear={this.state.selectedYear}/>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}