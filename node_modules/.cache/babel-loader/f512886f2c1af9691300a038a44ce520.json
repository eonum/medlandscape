{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/MapInfo/MapInfo.js\";\nimport React, { Component } from 'react';\nimport Control from 'react-leaflet-control';\nimport { withTranslation } from 'react-i18next';\nimport './mapInfo.css';\n\nvar MapInfo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapInfo, _Component);\n\n  function MapInfo() {\n    _classCallCheck(this, MapInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapInfo).apply(this, arguments));\n  }\n\n  _createClass(MapInfo, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          year = _this$props.year,\n          selectedVariable = _this$props.selectedVariable,\n          nrOfObjects = _this$props.nrOfObjects,\n          t = _this$props.t;\n      var isCanton = selectedVariable.variable_model === \"Canton\";\n      var selectedMap = isCanton ? t('mapInfo.cantons') : t('mapInfo.hospitals');\n      var selectedVar = t('mapInfo.variable') + \": \" + selectedVariable.text;\n      var mapInfo = t('mapInfo.map') + \": \" + selectedMap;\n      var yearInfo = t('mapInfo.year') + \": \" + year;\n      var filterInfo = t('mapInfo.filter') + \" \" + selectedMap + \": \" + nrOfObjects;\n      return React.createElement(Control, {\n        position: \"topleft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mapInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, mapInfo), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, selectedVar), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, !isCanton ? filterInfo : \"\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, yearInfo)));\n    }\n  }]);\n\n  return MapInfo;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedMapInfo = withTranslation()(MapInfo);\nexport default LocalizedMapInfo;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/MapInfo/MapInfo.js"],"names":["React","Component","Control","withTranslation","MapInfo","props","year","selectedVariable","nrOfObjects","t","isCanton","variable_model","selectedMap","selectedVar","text","mapInfo","yearInfo","filterInfo","LocalizedMapInfo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAO,eAAP;;IAEMC,O;;;;;;;;;;;;;6BAEO;AAAA,wBAC4C,KAAKC,KADjD;AAAA,UACEC,IADF,eACEA,IADF;AAAA,UACQC,gBADR,eACQA,gBADR;AAAA,UAC0BC,WAD1B,eAC0BA,WAD1B;AAAA,UACuCC,CADvC,eACuCA,CADvC;AAGL,UAAIC,QAAQ,GAAIH,gBAAgB,CAACI,cAAjB,KAAoC,QAApD;AACA,UAAIC,WAAW,GAAGF,QAAQ,GAAGD,CAAC,CAAC,iBAAD,CAAJ,GAA0BA,CAAC,CAAC,mBAAD,CAArD;AACA,UAAII,WAAW,GAAGJ,CAAC,CAAC,kBAAD,CAAD,GAAyB,IAAzB,GAAgCF,gBAAgB,CAACO,IAAnE;AACA,UAAIC,OAAO,GAAGN,CAAC,CAAC,aAAD,CAAD,GAAmB,IAAnB,GAA0BG,WAAxC;AACA,UAAII,QAAQ,GAAGP,CAAC,CAAC,cAAD,CAAD,GAAoB,IAApB,GAA2BH,IAA1C;AACA,UAAIW,UAAU,GAAGR,CAAC,CAAC,gBAAD,CAAD,GAAsB,GAAtB,GAA4BG,WAA5B,GAA0C,IAA1C,GAAiDJ,WAAlE;AAEA,aACI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKO,OAAL,CADV,EAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKF,WAAL,CAFV,EAGU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,CAACH,QAAF,GAAcO,UAAd,GAA2B,EAAhC,CAHV,EAIU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,QAAL,CAJV,CADE,CADJ;AAUH;;;;EAtBiBf,S;AAyBtB;;;;;;AAIA,IAAMiB,gBAAgB,GAAGf,eAAe,GAAGC,OAAH,CAAxC;AACA,eAAec,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Control from 'react-leaflet-control';\nimport { withTranslation } from 'react-i18next';\n\nimport './mapInfo.css';\n\nclass MapInfo extends Component {\n\n    render() {\n        const {year, selectedVariable, nrOfObjects, t} = this.props;\n\n        let isCanton = (selectedVariable.variable_model === \"Canton\");\n        let selectedMap = isCanton ? t('mapInfo.cantons') : t('mapInfo.hospitals');\n        let selectedVar = t('mapInfo.variable') +  \": \" + selectedVariable.text;\n        let mapInfo = t('mapInfo.map') + \": \" + selectedMap;\n        let yearInfo = t('mapInfo.year') + \": \" + year;\n        let filterInfo = t('mapInfo.filter') + \" \" + selectedMap + \": \" + nrOfObjects;\n\n        return (\n            <Control position=\"topleft\">\n        \t\t<div className=\"mapInfo\">\n                    <h1>{mapInfo}</h1>\n                    <h2>{selectedVar}</h2>\n                    <h2>{(!isCanton) ? filterInfo : \"\"}</h2>\n                    <h2>{yearInfo}</h2>\n        \t\t</div>\n            </Control>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedMapInfo = withTranslation()(MapInfo);\nexport default LocalizedMapInfo;\n"]},"metadata":{},"sourceType":"module"}