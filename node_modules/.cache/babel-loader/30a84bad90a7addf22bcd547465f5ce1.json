{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from '../LanguagePicker/LanguagePicker.js';\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar ControlPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlPanel, _Component);\n\n  function ControlPanel(props) {\n    var _this;\n\n    _classCallCheck(this, ControlPanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ControlPanel).call(this, props));\n\n    _this.fetchMapData = function (variable) {\n      var name = variable.name,\n          variable_model = variable.variable_model;\n      var query = _this.props.i18n.language + apiRequest;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      query += key + \"?variables=\";\n      query += encodeURIComponent(variable.name);\n\n      _this.props.fetchData(key, query);\n    };\n\n    _this.fetchEnumData = function (variable) {\n      var name = variable.name;\n      var query = _this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n      query += encodeURIComponent(_this.state.selectedVariable.name + \"$\");\n      query += encodeURIComponent(name);\n\n      _this.props.fetchData(\"hospitals\", query);\n    };\n\n    _this.selectVariable = function (item) {\n      _this.setState({\n        selectedVariable: item\n      });\n\n      _this.props.selectVariable(item);\n\n      _this.fetchMapData(item);\n    };\n\n    _this.state = {\n      selectedVariable: {},\n      enums: _this.props.variables.filter(function (obj) {\n        return obj.variable_type === \"enum\";\n      })\n    };\n    return _this;\n  }\n  /**\n   * Called when asking for a Variable to be displayed on the map\n   * Prepares correct query to ask App.js\n   * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n   */\n\n\n  _createClass(ControlPanel, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        enums: this.props.variables.filter(function (obj) {\n          return obj.variable_type === \"enum\";\n        })\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [];\n      var selectedCanton = {},\n          selectedHospital = {};\n      cantonVars = this.props.variables.filter(function (variable) {\n        return variable.variable_model === \"Canton\";\n      });\n      hospitalVars = this.props.variables.filter(function (variable) {\n        return variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\";\n      });\n\n      if (this.state.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.state.selectedVariable;\n        selectedCanton = cantonVars[0];\n      } else {\n        selectedCanton = this.state.selectedVariable;\n        selectedHospital = hospitalVars[0];\n      }\n\n      var t = this.props.t;\n      console.log(\"Control panel is rendering\");\n      console.log(this.state);\n      return React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, t('variables.name_canton')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedCanton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, t('variables.name_hospital')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(FilterEditor, {\n        hospitals: this.state.hospitals,\n        updateHospitals: this.props.updateHospitals,\n        fetchData: this.fetchEnumData,\n        hasLoaded: this.state.hasLoaded,\n        selectedYear: this.props.selectedYear,\n        enums: this.state.enums,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }), React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ControlPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js"],"names":["React","Component","DropdownMenu","FilterEditor","withTranslation","LanguagePicker","apiRequest","ControlPanel","props","fetchMapData","variable","name","variable_model","query","i18n","language","key","encodeURIComponent","fetchData","fetchEnumData","state","selectedVariable","selectVariable","item","setState","enums","variables","filter","obj","variable_type","cantonVars","hospitalVars","years","selectedCanton","selectedHospital","t","console","log","hospitals","updateHospitals","hasLoaded","selectedYear","initApiCall","LocalizedControlPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from '../LanguagePicker/LanguagePicker.js';\n\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass ControlPanel extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedVariable : {},\n            enums : this.props.variables.filter(obj => {\n                return obj.variable_type === \"enum\";\n            })\n        }\n    }\n\n\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchMapData = (variable) => {\n        const {name, variable_model} = variable;\n        let query = this.props.i18n.language + apiRequest;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        query += key + \"?variables=\";\n        query += encodeURIComponent(variable.name);\n        this.props.fetchData(key, query);\n    }\n\n    /**\n     * Called when filtering Hospital variables.\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchEnumData = (variable) => {\n        const {name} = variable;\n        let query = this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n        query += encodeURIComponent(this.state.selectedVariable.name + \"$\");\n        query += encodeURIComponent(name);\n        this.props.fetchData(\"hospitals\", query);\n    }\n\n\n    /**\n     * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n     * then calls fetchMapData to fetch data from the API.\n     * @param  {Variable object} item The selected variable.\n     */\n    selectVariable = (item) => {\n        this.setState({\n            selectedVariable : item,\n        });\n        this.props.selectVariable(item);\n        this.fetchMapData(item);\n    }\n\n    componentWillMount() {\n        this.setState({\n            enums : this.props.variables.filter(obj => {\n                return obj.variable_type === \"enum\";\n            })\n        })\n    }\n\n\n\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        cantonVars = this.props.variables.filter(variable => {\n            return variable.variable_model === \"Canton\"\n        });\n\n        hospitalVars = this.props.variables.filter(variable => {\n            return (variable.variable_model === \"Hospital\") && (variable.variable_type !== \"enum\")\n        });\n\n        if (this.state.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.state.selectedVariable;\n            selectedCanton = cantonVars[0];\n        } else {\n            selectedCanton = this.state.selectedVariable;\n            selectedHospital = hospitalVars[0];\n        }\n\n        const { t } = this.props;\n\n        console.log(\"Control panel is rendering\");\n        console.log(this.state);\n\n        return (\n\t\t\t<div className=\"control-panel\">\n\t\t\t\t<p>{t('variables.name_canton')}</p>\n\t\t\t\t<DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.selectVariable} selectedItem={selectedCanton} />\n\t\t\t\t<p>{t('variables.name_hospital')}</p>\n\t\t\t\t<DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.selectVariable} selectedItem={selectedHospital} />\n                <FilterEditor hospitals={this.state.hospitals} updateHospitals={this.props.updateHospitals} fetchData={this.fetchEnumData} hasLoaded={this.state.hasLoaded} selectedYear={this.props.selectedYear} enums={this.state.enums} />\n\t\t\t\t<LanguagePicker resendInitApiCall={this.initApiCall} />\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;\n"]},"metadata":{},"sourceType":"module"}