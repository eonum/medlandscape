{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap.js\";\nimport React, { Component } from \"react\";\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet';\n\nvar HospitalMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HospitalMap, _Component);\n\n  function HospitalMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HospitalMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HospitalMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.calculateCircleColor = function () {\n      return \"rgb(255, 5, 0)\";\n    };\n\n    _this.getNormedRadius = function (item) {\n      var max = _this.props.maxAndMin.max;\n      var min = _this.props.maxAndMin.min;\n      var mean = _this.props.maxAndMin.mean;\n      var std = _this.props.maxAndMin.std; //const standardVal = ((this.props.returnData(item)-mean)/std);\n\n      var data = _this.props.returnData(item);\n\n      var biggestRadius = 50;\n      var a = (data + Math.abs(min)) / (max + Math.abs(min)) * Math.pow(biggestRadius, 2) * Math.PI;\n      var radius = Math.sqrt(a / Math.PI);\n\n      if (data === max) {\n        console.log(item.name + \", max: \" + max + \", min: \" + min + \", radius: \" + radius);\n      }\n\n      return radius;\n    };\n\n    _this.onClick = function (item, e) {\n      e.target.closeTooltip();\n      var popup = \"<table><tr><td>\" + \"Spital:\" + \"</td><td>\" + item.name + \"</td></tr>\" + \"<tr><td>\" + \"Adresse:\" + \"</td><td><dd>\" + item.street + \", </dd>\" + item.city + \"</td></tr>\" + \"<tr><td>\" + _this.props.variableInfo.text + \":</td><td>\" + _this.props.returnData(item) + \"</td></tr></table>\";\n      var popupOptions = {\n        'maxWidth': '250',\n        'closeButton': false\n      };\n      e.target.bindPopup(popup, popupOptions);\n      e.target.openPopup();\n    };\n\n    _this.onMouseOver = function (e) {\n      e.target.setStyle({\n        color: '#1996fa',\n        opacity: 1\n      });\n    };\n\n    _this.onMouseOut = function (e) {\n      var oldColor = _this.calculateCircleColor();\n\n      e.target.setStyle({\n        color: oldColor\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HospitalMap, [{\n    key: \"render\",\n\n    /**\n     * Creates circles to represent hospitals on a Map\n     */\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(LayerGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, this.props.data.map(function (item) {\n        return React.createElement(CircleMarker, {\n          key: _this2.props.data.indexOf(item),\n          center: {\n            lon: item.longitude,\n            lat: item.latitude\n          },\n          color: _this2.calculateCircleColor(),\n          opacity: \"0.8\",\n          weight: \"1\" // defining how big the outer line of circle is\n          ,\n          radius: _this2.getNormedRadius(item) // norming function is here\n          ,\n          onClick: _this2.onClick.bind(_this2, item),\n          onMouseOver: _this2.onMouseOver.bind(_this2),\n          onMouseOut: _this2.onMouseOut.bind(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, item.name));\n      }));\n    }\n  }]);\n\n  return HospitalMap;\n}(Component);\n\nexport default HospitalMap;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap.js"],"names":["React","Component","CircleMarker","Popup","LayerGroup","Tooltip","HospitalMap","calculateCircleColor","getNormedRadius","item","max","props","maxAndMin","min","mean","std","data","returnData","biggestRadius","a","Math","abs","pow","PI","radius","sqrt","console","log","name","onClick","e","target","closeTooltip","popup","street","city","variableInfo","text","popupOptions","bindPopup","openPopup","onMouseOver","setStyle","color","opacity","onMouseOut","oldColor","map","indexOf","lon","longitude","lat","latitude","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet'\n\nclass HospitalMap extends Component {\n\n    /**\n     * Calculates and returns a rgb color\n     * @return {String} The rgb color as a string.\n     */\n\tcalculateCircleColor = () =>{\n\t\treturn \"rgb(255, 5, 0)\";\n\t}\n\n    /**\n     * Computes the Radius for a hospital point.\n     * @param  {Hospital Object} item The hospital\n     * @return {int} size of the radius\n     */\n\tgetNormedRadius = (item) => {\n\t\tconst max = this.props.maxAndMin.max;\n\t\tconst min = this.props.maxAndMin.min;\n\t\tconst mean = this.props.maxAndMin.mean;\n\t\tconst std = this.props.maxAndMin.std;\n\t\t//const standardVal = ((this.props.returnData(item)-mean)/std);\n        const data = this.props.returnData(item);\n        const biggestRadius = 50;\n\n\t\tconst a = ((data + Math.abs(min)) / (max + Math.abs(min))) * Math.pow(biggestRadius, 2) * Math.PI;\n        let radius = Math.sqrt(a / Math.PI);\n        if (data === max) {\n            console.log(item.name + \", max: \" + max + \", min: \" + min + \", radius: \" + radius);\n        }\n\n\t\treturn radius;\n\t}\n\n\t/**\n\t*  Open an info popup if you click on a hospital with your mouse\n\t* @param {Object} item = the hospital you are clicking\n\t* @param {Object} e = the circlemarker object you are clicking\n\t*/\n\tonClick = (item, e) => {\n\t\te.target.closeTooltip();\n\t\tconst popup =   \"<table><tr><td>\" + \"Spital:\" + \"</td><td>\"+ item.name + \"</td></tr>\"\n\t\t\t\t\t\t+ \"<tr><td>\" + \"Adresse:\" + \"</td><td><dd>\" + item.street + \", </dd>\" + item.city + \"</td></tr>\"\n\t\t\t\t\t\t+ \"<tr><td>\" + this.props.variableInfo.text + \":</td><td>\"+ this.props.returnData(item) + \"</td></tr></table>\";\n\t\tconst popupOptions = {\n\t\t\t'maxWidth': '250',\n\t\t\t'closeButton': false,\n\t\t}\n\t\te.target.bindPopup(popup, popupOptions);\n\t\te.target.openPopup();\n \t}\n\t/**\n\t* Changes hospital style if you hover on a hospital with your mouse\n\t* @param {Object} e = the circlemarker (hospital) object you are hovering over\n\t*/\n\tonMouseOver = (e) => {\n\t\te.target.setStyle({\n\t\t\tcolor: '#1996fa',\n\t\t\topacity: 1\n\t\t});\n\t}\n\n\t/**\n\t* Set back hospital style if you hover off a hospital with your mouse\n\t* @param {Object} e = the circlemarker (hospital) object you are hovering off\n\t*/\n\tonMouseOut = (e) => {\n\t\tconst oldColor = this.calculateCircleColor();\n\t\te.target.setStyle({color: oldColor});\n\t}\n\n    /**\n     * Creates circles to represent hospitals on a Map\n     */\n\trender() {\n\t\treturn (\n\t\t\t<LayerGroup>\n\t\t\t\t{\n\t\t\t\t\tthis.props.data.map((item) => (\n          \t\t\t\t<CircleMarker\n          \t\t\t\t\tkey = {this.props.data.indexOf(item)}\n        \t\t\t\t\tcenter={{lon: item.longitude, lat: item.latitude}}\n        \t\t\t\t\tcolor = {this.calculateCircleColor()}\n        \t\t\t\t\topacity = \"0.8\"\n        \t\t\t\t\tweight = \"1\" // defining how big the outer line of circle is\n        \t\t\t\t\tradius={this.getNormedRadius(item)} // norming function is here\n        \t\t\t\t\tonClick = {this.onClick.bind(this, item)}\n\t\t\t\t\t\t\tonMouseOver = {this.onMouseOver.bind(this)}\n\t\t\t\t\t\t\tonMouseOut = {this.onMouseOut.bind(this)}\n        \t\t\t\t>\n        \t\t\t\t\t<Tooltip>\n        \t\t\t\t\t\t{item.name}\n        \t\t\t\t\t</Tooltip>\n        \t\t\t\t</CircleMarker>\n      \t             ))\n\t\t\t\t}\n\t\t\t</LayerGroup>\n\t\t)\n\t}\n}\nexport default HospitalMap;\n"]},"metadata":{},"sourceType":"module"}