{"ast":null,"code":"/**\n* utils.mjs\n* functions to be used all over the app\n**/\n\n/**\n* rounding a number to 2 decimals and add \" ' \" for big numbers\n* @param {number} number to be formatted\n* @return {string} str the formatted string\n**/\nexport function numberFormat(number) {\n  var nmbr = Math.round(number * 100) / 100;\n  var str = nmbr.toString();\n  var index = str.indexOf(\".\");\n\n  if (index === -1) {\n    index = str.length;\n  }\n\n  while (index > 3) {\n    index -= 3;\n    str = str.substring(0, index) + \"'\" + str.substring(index, str.length);\n  }\n\n  return str;\n}\n/**\n* calculate pearson correlation between two given data arrays\n* @param {Array} x first data array\n* @param {Array} y second data array\n* @return {number} r the pearson correlation\n**/\n\nexport function pearsonCorrelation(x, y) {\n  var n = x.length;\n  var sum_X = 0,\n      sum_Y = 0,\n      sum_XY = 0;\n  var squareSum_X = 0,\n      squareSum_Y = 0;\n\n  for (var i = 0; i < n; i++) {\n    // sum of elements of array X.\n    sum_X = sum_X + x[i]; // sum of elements of array Y.\n\n    sum_Y = sum_Y + y[i]; // sum of X[i] * Y[i].\n\n    sum_XY = sum_XY + x[i] * y[i]; // sum of square of array elements.\n\n    squareSum_X = squareSum_X + x[i] * x[i];\n    squareSum_Y = squareSum_Y + y[i] * y[i];\n  } // use formula for calculating correlation coefficient r.\n\n\n  var r = (n * sum_XY - sum_X * sum_Y) / Math.sqrt((n * squareSum_X - sum_X * sum_X) * (n * squareSum_Y - sum_Y * sum_Y));\n  r = Math.round(r * 1000) / 1000;\n  return r;\n}","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/utils.mjs"],"names":["numberFormat","number","nmbr","Math","round","str","toString","index","indexOf","length","substring","pearsonCorrelation","x","y","n","sum_X","sum_Y","sum_XY","squareSum_X","squareSum_Y","i","r","sqrt"],"mappings":"AAAA;;;;;AAKA;;;;;AAKA,OAAO,SAASA,YAAT,CAAsBC,MAAtB,EAA6B;AAChC,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAC,GAAlB,IAAuB,GAAlC;AACA,MAAII,GAAG,GAAGH,IAAI,CAACI,QAAL,EAAV;AACA,MAAIC,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAY,GAAZ,CAAZ;;AACA,MAAID,KAAK,KAAK,CAAC,CAAf,EAAiB;AACbA,IAAAA,KAAK,GAAGF,GAAG,CAACI,MAAZ;AACH;;AACD,SAAOF,KAAK,GAAG,CAAf,EAAiB;AACbA,IAAAA,KAAK,IAAI,CAAT;AACAF,IAAAA,GAAG,GAAGA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBH,KAAjB,IAA0B,GAA1B,GAAgCF,GAAG,CAACK,SAAJ,CAAcH,KAAd,EAAqBF,GAAG,CAACI,MAAzB,CAAtC;AACH;;AACD,SAAOJ,GAAP;AACH;AAED;;;;;;;AAMA,OAAO,SAASM,kBAAT,CAA4BC,CAA5B,EAA+BC,CAA/B,EAAiC;AACpC,MAAIC,CAAC,GAAGF,CAAC,CAACH,MAAV;AACA,MAAIM,KAAK,GAAG,CAAZ;AAAA,MAAeC,KAAK,GAAG,CAAvB;AAAA,MAA0BC,MAAM,GAAG,CAAnC;AACA,MAAIC,WAAW,GAAG,CAAlB;AAAA,MAAqBC,WAAW,GAAG,CAAnC;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,CAApB,EAAuBM,CAAC,EAAxB,EACA;AACI;AACAL,IAAAA,KAAK,GAAGA,KAAK,GAAGH,CAAC,CAACQ,CAAD,CAAjB,CAFJ,CAII;;AACAJ,IAAAA,KAAK,GAAGA,KAAK,GAAGH,CAAC,CAACO,CAAD,CAAjB,CALJ,CAOI;;AACAH,IAAAA,MAAM,GAAGA,MAAM,GAAGL,CAAC,CAACQ,CAAD,CAAD,GAAOP,CAAC,CAACO,CAAD,CAA1B,CARJ,CAUI;;AACAF,IAAAA,WAAW,GAAGA,WAAW,GAAGN,CAAC,CAACQ,CAAD,CAAD,GAAOR,CAAC,CAACQ,CAAD,CAApC;AACAD,IAAAA,WAAW,GAAGA,WAAW,GAAGN,CAAC,CAACO,CAAD,CAAD,GAAOP,CAAC,CAACO,CAAD,CAApC;AACH,GAnBmC,CAqBpC;;;AACA,MAAIC,CAAC,GAAG,CAACP,CAAC,GAAGG,MAAJ,GAAaF,KAAK,GAAGC,KAAtB,IACKb,IAAI,CAACmB,IAAL,CAAU,CAACR,CAAC,GAAGI,WAAJ,GACZH,KAAK,GAAGA,KADG,KACOD,CAAC,GAAGK,WAAJ,GAClBH,KAAK,GAAGA,KAFG,CAAV,CADb;AAKAK,EAAAA,CAAC,GAAGlB,IAAI,CAACC,KAAL,CAAWiB,CAAC,GAAC,IAAb,IAAmB,IAAvB;AAEA,SAAOA,CAAP;AACH","sourcesContent":["/**\n* utils.mjs\n* functions to be used all over the app\n**/\n\n/**\n* rounding a number to 2 decimals and add \" ' \" for big numbers\n* @param {number} number to be formatted\n* @return {string} str the formatted string\n**/\nexport function numberFormat(number){\n    let nmbr = Math.round(number*100)/100;\n    let str = nmbr.toString();\n    let index = str.indexOf(\".\");\n    if (index === -1){\n        index = str.length;\n    }\n    while (index > 3){\n        index -= 3;\n        str = str.substring(0, index) + \"'\" + str.substring(index, str.length);\n    }\n    return str;\n}\n\n/**\n* calculate pearson correlation between two given data arrays\n* @param {Array} x first data array\n* @param {Array} y second data array\n* @return {number} r the pearson correlation\n**/\nexport function pearsonCorrelation(x, y){\n    let n = x.length;\n    let sum_X = 0, sum_Y = 0, sum_XY = 0;\n    let squareSum_X = 0, squareSum_Y = 0;\n\n    for (let i = 0; i < n; i++)\n    {\n        // sum of elements of array X.\n        sum_X = sum_X + x[i];\n\n        // sum of elements of array Y.\n        sum_Y = sum_Y + y[i];\n\n        // sum of X[i] * Y[i].\n        sum_XY = sum_XY + x[i] * y[i];\n\n        // sum of square of array elements.\n        squareSum_X = squareSum_X + x[i] * x[i];\n        squareSum_Y = squareSum_Y + y[i] * y[i];\n    }\n\n    // use formula for calculating correlation coefficient r.\n    let r = (n * sum_XY - sum_X * sum_Y)/\n                (Math.sqrt((n * squareSum_X -\n                sum_X * sum_X) * (n * squareSum_Y -\n                sum_Y * sum_Y)));\n\n    r = Math.round(r*1000)/1000;\n\n    return r;\n}\n"]},"metadata":{},"sourceType":"module"}