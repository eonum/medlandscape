{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/HospitalTypeFilter/HospitalTypeFilter.js\";\nimport React, { Component } from 'react';\nimport CheckboxList from '../CheckboxList/CheckboxList.js';\nimport './hospitalTypeFilter.css';\nimport { withTranslation } from \"react-i18next\";\n/*\n*A component that helps with selcting and separating different types of hospitals\n*/\n\nvar HospitalTypeFilter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HospitalTypeFilter, _Component);\n\n  function HospitalTypeFilter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HospitalTypeFilter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HospitalTypeFilter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedValues: []\n    };\n\n    _this.checkboxSelectItem = function (item) {\n      console.log(\"============================\");\n      console.log(\"CHOOSING H-TYPE-FILTER CB\"); // removes item if in selectedValues\n\n      var values = _this.state.selectedValues.filter(function (value) {\n        return value !== item;\n      }); // adds item if not in selectedValues\n\n\n      if (values.length === _this.state.selectedValues.length) {\n        values.push(item);\n      }\n\n      _this.setState({\n        selectedValues: values\n      }, function () {\n        _this.setAPIValues(values);\n      });\n    };\n\n    _this.setAPIValues = function (values) {\n      // categories for different hospitals\n      // University: K111\n      // Allgemeinspital, Zentrumversorgung: K112\n      // Allgemeinspital, Grundversorgung: K121, K122, K123\n      // Psychiatrische Klinik: K211, K212\n      // Rehabilitationsklinik: K221\n      // Spezialklinik: K231, K232, K233, K234, K235\n      var apiValues = [];\n\n      for (var i = 0; i < values.length; i++) {\n        switch (values[i]) {\n          case 0:\n            apiValues.push(\"K111\");\n            break;\n\n          case 1:\n            apiValues.push(\"K112\");\n            break;\n\n          case 2:\n            apiValues.push(\"K121\");\n            apiValues.push(\"K122\");\n            apiValues.push(\"K123\");\n            break;\n\n          case 3:\n            apiValues.push(\"K211\");\n            apiValues.push(\"K212\");\n            break;\n\n          case 4:\n            apiValues.push(\"K221\");\n            break;\n\n          case 5:\n            apiValues.push(\"K231\");\n            apiValues.push(\"K232\");\n            apiValues.push(\"K233\");\n            apiValues.push(\"K234\");\n            apiValues.push(\"K235\");\n            break;\n\n          default:\n            apiValues.push(\"K111\");\n        }\n      }\n\n      _this.filter(apiValues);\n    };\n\n    _this.filter = function (selectedValues) {\n      var _this$props = _this.props,\n          hospitals = _this$props.hospitals,\n          selectedYear = _this$props.selectedYear;\n      var name = \"Typ\";\n\n      if (selectedYear.length > 0) {\n        console.log(\"years provided\");\n      }\n\n      var filteredHospitals = [];\n\n      if (selectedValues.length > 0) {\n        filteredHospitals = hospitals.filter(function (hospital) {\n          var counter = 0;\n          var years = Object.keys(hospital.attributes[name]);\n\n          if (selectedYear.length > 0) {\n            if (years.includes(selectedYear)) {\n              var values = hospital.attributes[name][selectedYear];\n\n              for (var i = 0; i < selectedValues.length; i++) {\n                if (values.includes(selectedValues[i])) {\n                  counter++;\n                }\n              }\n            }\n          } else {\n            var _values = hospital.attributes[name][years[years.length - 1]]; // wtf hahaha, looks at \"Typ\" in last year because why would it change? (apparently it does -> ask Tim)\n\n            for (var _i = 0; _i < selectedValues.length; _i++) {\n              if (_values.includes(selectedValues[_i])) {\n                counter++;\n              }\n            }\n          }\n\n          return counter !== 0;\n        });\n\n        if (filteredHospitals.length === 0) {\n          // no hits, did not match anything (example spezialausrÃ¼stung: litho)\n          filteredHospitals[0] = 0;\n        }\n      } else {\n        filteredHospitals = hospitals;\n      }\n\n      _this.props.filter(filteredHospitals);\n    };\n\n    return _this;\n  }\n\n  _createClass(HospitalTypeFilter, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (this.props.selectedYear !== prevProps.selectedYear && prevProps.selectedYear !== \"\" && this.state.selectedValues.length > 0) {\n        console.log(\"hospitaltypefilterUpdate because of year\");\n        this.setAPIValues(this.state.selectedValues);\n      }\n\n      if (this.props.filter !== prevProps.filter) {\n        console.log(\"resetting because not unmounted\");\n        this.setState({\n          selectedValues: []\n        }, function () {\n          console.log(\"resetted\");\n\n          _this2.props.filter([]);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      console.log(\"unmounting filterByType\");\n      this.props.filter([]);\n    }\n    /**\n     * Adds the value of the selected hospital category to selectedValues.\n     * @param {String} item The selected hospital category to be added.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          t = _this$props2.t,\n          id = _this$props2.id;\n      var categorizedHospitalTypes = [0, 1, 2, 3, 4, 5];\n      var translatedCategorizedHospitalTypes = [t('hospitalTypes.university'), t('hospitalTypes.generic-center'), t('hospitalTypes.generic-basic'), t('hospitalTypes.psychiatry'), t('hospitalTypes.rehabilitation'), t('hospitalTypes.special')];\n      return React.createElement(\"div\", {\n        className: \"hospitalTypeFilter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(CheckboxList, {\n        id: id,\n        items: categorizedHospitalTypes,\n        checkboxSelectItem: this.checkboxSelectItem,\n        titles: translatedCategorizedHospitalTypes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return HospitalTypeFilter;\n}(Component);\n\nvar localizedHospitalTypeFilter = withTranslation()(HospitalTypeFilter);\nexport default localizedHospitalTypeFilter;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/HospitalTypeFilter/HospitalTypeFilter.js"],"names":["React","Component","CheckboxList","withTranslation","HospitalTypeFilter","state","selectedValues","checkboxSelectItem","item","console","log","values","filter","value","length","push","setState","setAPIValues","apiValues","i","props","hospitals","selectedYear","name","filteredHospitals","hospital","counter","years","Object","keys","attributes","includes","prevProps","t","id","categorizedHospitalTypes","translatedCategorizedHospitalTypes","localizedHospitalTypeFilter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CheckboxList from '../CheckboxList/CheckboxList.js';\nimport './hospitalTypeFilter.css';\nimport { withTranslation } from \"react-i18next\";\n\n/*\n*A component that helps with selcting and separating different types of hospitals\n*/\n\nclass HospitalTypeFilter extends Component {\n\n    state = {\n        selectedValues : []\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.selectedYear !== prevProps.selectedYear && prevProps.selectedYear !== \"\" && this.state.selectedValues.length > 0) {\n            console.log(\"hospitaltypefilterUpdate because of year\");\n            this.setAPIValues(this.state.selectedValues);\n        }\n        if (this.props.filter !== prevProps.filter) {\n            console.log(\"resetting because not unmounted\");\n            this.setState({\n                selectedValues : []\n            }, () => {\n                console.log(\"resetted\");\n                this.props.filter([]);\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        console.log(\"unmounting filterByType\");\n        this.props.filter([]);\n    }\n\n    /**\n     * Adds the value of the selected hospital category to selectedValues.\n     * @param {String} item The selected hospital category to be added.\n     */\n    checkboxSelectItem = (item) => {\n\n        console.log(\"============================\");\n        console.log(\"CHOOSING H-TYPE-FILTER CB\");\n\n        // removes item if in selectedValues\n        let values = this.state.selectedValues.filter((value) => {\n            return (value !== item)\n        });\n\n        // adds item if not in selectedValues\n        if (values.length === this.state.selectedValues.length) {\n            values.push(item);\n        }\n\n        this.setState({\n            selectedValues : values\n        }, () => {\n            this.setAPIValues(values);\n        });\n\n    }\n\n    /**\n     * Helper method.\n     * Converts the values into API specific hospital categories.\n     * Calls filter after converting the values.\n     * @param {Array} values the selected hospital categories.\n     */\n    setAPIValues = (values) => {\n        // categories for different hospitals\n        // University: K111\n        // Allgemeinspital, Zentrumversorgung: K112\n        // Allgemeinspital, Grundversorgung: K121, K122, K123\n        // Psychiatrische Klinik: K211, K212\n        // Rehabilitationsklinik: K221\n        // Spezialklinik: K231, K232, K233, K234, K235\n\n        let apiValues = [];\n\n        for (let i = 0; i < values.length; i++) {\n            switch (values[i]) {\n                case (0):\n                    apiValues.push(\"K111\");\n                    break;\n                case (1):\n                    apiValues.push(\"K112\");\n                    break;\n                case (2):\n                    apiValues.push(\"K121\");\n                    apiValues.push(\"K122\");\n                    apiValues.push(\"K123\");\n                    break;\n                case (3):\n                    apiValues.push(\"K211\");\n                    apiValues.push(\"K212\");\n                    break;\n                case (4):\n                    apiValues.push(\"K221\");\n                    break;\n                case (5):\n                    apiValues.push(\"K231\");\n                    apiValues.push(\"K232\");\n                    apiValues.push(\"K233\");\n                    apiValues.push(\"K234\");\n                    apiValues.push(\"K235\");\n                    break;\n                default:\n                    apiValues.push(\"K111\");\n            }\n        }\n\n        this.filter(apiValues);\n    }\n\n\n\t/*filters through the selected values similar to our FIlterEditor */\n    filter = (selectedValues) => {\n\t\tconst {hospitals, selectedYear} = this.props;\n        const name = \"Typ\"\n        if (selectedYear.length > 0) {\n            console.log(\"years provided\");\n        }\n        let filteredHospitals = [];\n\n        if (selectedValues.length > 0) {\n            filteredHospitals = hospitals.filter((hospital) => {\n                let counter = 0;\n                let years = Object.keys(hospital.attributes[name]);\n                if (selectedYear.length > 0) {\n                    if (years.includes(selectedYear)) {\n                        let values = hospital.attributes[name][selectedYear];\n                        for (let i = 0; i < selectedValues.length; i++) {\n                            if (values.includes(selectedValues[i])) {\n                                counter++;\n                            }\n                        }\n                    }\n                } else {\n                    let values = hospital.attributes[name][(years)[years.length - 1]]; // wtf hahaha, looks at \"Typ\" in last year because why would it change? (apparently it does -> ask Tim)\n                    for (let i = 0; i < selectedValues.length; i++) {\n                        if (values.includes(selectedValues[i])) {\n                            counter++;\n                        }\n                    }\n                }\n                return (counter !== 0);\n            });\n            if (filteredHospitals.length === 0) {\n                // no hits, did not match anything (example spezialausrÃ¼stung: litho)\n                filteredHospitals[0] = 0;\n            }\n        } else {\n            filteredHospitals = hospitals;\n        }\n\n        this.props.filter(filteredHospitals);\n    }\n\n    render() {\n        const {t, id} = this.props;\n        let categorizedHospitalTypes = [0, 1, 2, 3, 4, 5];\n        let translatedCategorizedHospitalTypes = [t('hospitalTypes.university'), t('hospitalTypes.generic-center'),\n            t('hospitalTypes.generic-basic'), t('hospitalTypes.psychiatry') , t('hospitalTypes.rehabilitation'),\n            t('hospitalTypes.special')];\n\n        return (\n            <div className=\"hospitalTypeFilter\">\n                <CheckboxList\n                    id={id}\n                    items={categorizedHospitalTypes}\n                    checkboxSelectItem={this.checkboxSelectItem}\n                    titles={translatedCategorizedHospitalTypes}\n                />\n            </div>\n        )\n    }\n}\n\nconst localizedHospitalTypeFilter = withTranslation()(HospitalTypeFilter);\nexport default localizedHospitalTypeFilter;\n"]},"metadata":{},"sourceType":"module"}