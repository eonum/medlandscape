{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/MapInfo/MapInfo.js\";\nimport React, { Component } from 'react';\nimport Control from 'react-leaflet-control';\nimport { withTranslation } from 'react-i18next';\nimport './mapInfo.css';\n/*\n* Displays the Information to the map that is displayed at the moment.\n* Included are infos to the selected Variable, selected Year and the map itself\n*/\n\nvar MapInfo =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapInfo, _Component);\n\n  function MapInfo() {\n    _classCallCheck(this, MapInfo);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MapInfo).apply(this, arguments));\n  }\n\n  _createClass(MapInfo, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mapView = _this$props.mapView,\n          hasLoaded = _this$props.hasLoaded,\n          year = _this$props.year,\n          selectedVariable = _this$props.selectedVariable,\n          nrOfObjects = _this$props.nrOfObjects,\n          t = _this$props.t;\n      var selectedMap, selectedVar, mapInfo, yearInfo, filterInfo;\n      selectedMap = mapView === 1 ? t('mapInfo.hospitals') : t('mapInfo.cantons');\n      mapInfo = t('mapInfo.map') + \": \" + selectedMap;\n\n      if (Object.keys(selectedVariable).length !== 0) {\n        selectedVar = t('mapInfo.variable') + \": \" + selectedVariable.text;\n\n        if (hasLoaded) {\n          yearInfo = t('mapInfo.year') + \": \" + year;\n          filterInfo = t('mapInfo.filter') + \" \" + selectedMap + \": \" + nrOfObjects;\n        }\n      } else {\n        selectedVar = t('mapInfo.noVariable');\n      }\n\n      return React.createElement(Control, {\n        position: \"topleft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mapInfo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, mapInfo), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, selectedVar), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, filterInfo), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, yearInfo)));\n    }\n  }]);\n\n  return MapInfo;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedMapInfo = withTranslation()(MapInfo);\nexport default LocalizedMapInfo;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/MapInfo/MapInfo.js"],"names":["React","Component","Control","withTranslation","MapInfo","props","mapView","hasLoaded","year","selectedVariable","nrOfObjects","t","selectedMap","selectedVar","mapInfo","yearInfo","filterInfo","Object","keys","length","text","LocalizedMapInfo"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAO,eAAP;AAEA;;;;;IAKMC,O;;;;;;;;;;;;;6BAEO;AAAA,wBACgE,KAAKC,KADrE;AAAA,UACEC,OADF,eACEA,OADF;AAAA,UACWC,SADX,eACWA,SADX;AAAA,UACsBC,IADtB,eACsBA,IADtB;AAAA,UAC4BC,gBAD5B,eAC4BA,gBAD5B;AAAA,UAC8CC,WAD9C,eAC8CA,WAD9C;AAAA,UAC2DC,CAD3D,eAC2DA,CAD3D;AAEL,UAAIC,WAAJ,EAAiBC,WAAjB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiDC,UAAjD;AAEAJ,MAAAA,WAAW,GAAIN,OAAO,KAAK,CAAb,GAAkBK,CAAC,CAAC,mBAAD,CAAnB,GAA2CA,CAAC,CAAC,iBAAD,CAA1D;AACAG,MAAAA,OAAO,GAAGH,CAAC,CAAC,aAAD,CAAD,GAAmB,IAAnB,GAA0BC,WAApC;;AAEA,UAAIK,MAAM,CAACC,IAAP,CAAYT,gBAAZ,EAA8BU,MAA9B,KAAyC,CAA7C,EAAgD;AAC5CN,QAAAA,WAAW,GAAGF,CAAC,CAAC,kBAAD,CAAD,GAAyB,IAAzB,GAAgCF,gBAAgB,CAACW,IAA/D;;AACA,YAAIb,SAAJ,EAAe;AACXQ,UAAAA,QAAQ,GAAGJ,CAAC,CAAC,cAAD,CAAD,GAAoB,IAApB,GAA2BH,IAAtC;AACAQ,UAAAA,UAAU,GAAGL,CAAC,CAAC,gBAAD,CAAD,GAAsB,GAAtB,GAA4BC,WAA5B,GAA0C,IAA1C,GAAiDF,WAA9D;AACH;AACJ,OAND,MAMO;AACHG,QAAAA,WAAW,GAAGF,CAAC,CAAC,oBAAD,CAAf;AACH;;AAED,aACI,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACF;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKG,OAAL,CADV,EAEU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,WAAL,CAFV,EAGU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKG,UAAL,CAHV,EAIU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAKD,QAAL,CAJV,CADE,CADJ;AAUH;;;;EA7BiBd,S;AAgCtB;;;;;;AAIA,IAAMoB,gBAAgB,GAAGlB,eAAe,GAAGC,OAAH,CAAxC;AACA,eAAeiB,gBAAf","sourcesContent":["import React, { Component } from 'react';\nimport Control from 'react-leaflet-control';\nimport { withTranslation } from 'react-i18next';\nimport './mapInfo.css';\n\n/*\n* Displays the Information to the map that is displayed at the moment.\n* Included are infos to the selected Variable, selected Year and the map itself\n*/\n\nclass MapInfo extends Component {\n\n    render() {\n        const {mapView, hasLoaded, year, selectedVariable, nrOfObjects, t} = this.props;\n        let selectedMap, selectedVar, mapInfo, yearInfo, filterInfo;\n\n        selectedMap = (mapView === 1) ? t('mapInfo.hospitals') : t('mapInfo.cantons');\n        mapInfo = t('mapInfo.map') + \": \" + selectedMap;\n\n        if (Object.keys(selectedVariable).length !== 0) {\n            selectedVar = t('mapInfo.variable') +  \": \" + selectedVariable.text;\n            if (hasLoaded) {\n                yearInfo = t('mapInfo.year') + \": \" + year;\n                filterInfo = t('mapInfo.filter') + \" \" + selectedMap + \": \" + nrOfObjects;\n            }\n        } else {\n            selectedVar = t('mapInfo.noVariable');\n        }\n\n        return (\n            <Control position=\"topleft\">\n        \t\t<div className=\"mapInfo\">\n                    <h1>{mapInfo}</h1>\n                    <h2>{selectedVar}</h2>\n                    <h2>{filterInfo}</h2>\n                    <h2>{yearInfo}</h2>\n        \t\t</div>\n            </Control>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedMapInfo = withTranslation()(MapInfo);\nexport default LocalizedMapInfo;\n"]},"metadata":{},"sourceType":"module"}