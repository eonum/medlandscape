{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport { withTranslation } from 'react-i18next';\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\n\nvar InteractiveTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InteractiveTable, _Component);\n\n  /**\n   * constructor - initializes the component by calling the superclass's\n   *  constructor and setting the inital state\n   *\n   * @param  {ojbect} props props handed over by parent component\n   */\n  function InteractiveTable(props) {\n    var _this;\n\n    _classCallCheck(this, InteractiveTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InteractiveTable).call(this, props));\n\n    _this.addHospital = function () {\n      var newDropdowns = [];\n      var newSelectedHospitals = [];\n      var newSelectedHospital = {};\n      var newDropdown = React.createElement(\"div\", {\n        className: \"hospitalDropdown\",\n        key: _this.state.nextHospitalId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: _this.state.nextHospitalId,\n        listItems: _this.props.hospitals,\n        selectItem: _this.selectHospital,\n        selectedItem: newSelectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n      var id_parts = _this.state.nextHospitalId.split(\"-\");\n\n      var nextHospitalIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n      newDropdowns = [].concat(_toConsumableArray(_this.state.hospitalDropdowns), [newDropdown]);\n      newSelectedHospitals = [].concat(_toConsumableArray(_this.state.selectedHospitals), [newSelectedHospital]);\n\n      _this.setState({\n        nextHospitalId: nextHospitalIdInc,\n        hospitalDropdowns: newDropdowns,\n        selectedHospitals: newSelectedHospitals\n      });\n    };\n\n    _this.selectHospital = function (item, senderId) {\n      var index;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.state.hospitalDropdowns[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var hD = _step.value;\n\n          if (hD.props.children.props.id === senderId) {\n            index = _this.state.hospitalDropdowns.indexOf(hD);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        // selectedHospitals : newList\n        selectedHospitals: update(_this.state.selectedHospitals, _defineProperty({}, index, {\n          $set: item\n        })),\n        hospitalDropdowns: update(_this.state.hospitalDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              props: {\n                selectedItem: {\n                  $set: item\n                }\n              }\n            }\n          }\n        }))\n      });\n    };\n\n    _this.addVariable = function () {\n      var newVariables = [];\n      var newSelectedVariables = [];\n      var newSelectedVariable = {};\n      var newDrp = React.createElement(\"div\", {\n        className: \"variableDropdown\",\n        key: _this.state.nextVariableId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: _this.state.nextVariableId,\n        listItems: _this.props.variables,\n        selectItem: _this.selectVariable,\n        selectedItem: newSelectedVariable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n      var id_parts = _this.state.nextVariableId.split(\"-\");\n\n      var nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n      ;\n      newVariables = [].concat(_toConsumableArray(_this.state.variableDropdowns), [newDrp]);\n      newSelectedVariables = [].concat(_toConsumableArray(_this.state.selectedVariables), [newSelectedVariable]);\n\n      _this.setState({\n        nextVariableId: nextVariableIdInc,\n        variableDropdowns: newVariables,\n        selectedVariables: newSelectedVariables\n      });\n    };\n\n    _this.selectVariable = function (item, senderId) {\n      var index;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _this.state.variableDropdowns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var vD = _step2.value;\n\n          if (vD.props.children.props.id === senderId) {\n            index = _this.state.variableDropdowns.indexOf(vD);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      _this.setState({\n        selectedVariables: update(_this.state.selectedVariables, _defineProperty({}, index, {\n          $set: item\n        })),\n        variableDropdowns: update(_this.state.variableDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              props: {\n                selectedItem: {\n                  $set: item\n                }\n              }\n            }\n          }\n        }))\n      });\n    };\n\n    _this.state = {\n      nextVariableId: 'var-' + 0,\n      variableDropdowns: [],\n      selectedVariables: [],\n      nextHospitalId: 'hos-' + 0,\n      hospitalDropdowns: [],\n      selectedHospitals: [],\n      dropdownsNeedUpdate: true // selectedYear : \"\"\n\n    };\n    return _this;\n  }\n\n  _createClass(InteractiveTable, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.props.hasLoaded && this.state.dropdownsNeedUpdate) {\n        var newHospitalDropdowns = this.state.hospitalDropdowns;\n\n        for (var i = 0; i < this.state.hospitalDropdowns.length; i++) {\n          newHospitalDropdowns = update(newHospitalDropdowns, _defineProperty({}, i, {\n            props: {\n              children: {\n                props: {\n                  listItems: {\n                    $set: this.props.hospitals\n                  }\n                }\n              }\n            }\n          }));\n        }\n\n        var newVariableDropdowns = this.state.variableDropdowns;\n\n        for (var _i = 0; _i < this.state.variableDropdowns.length; _i++) {\n          newVariableDropdowns = update(newVariableDropdowns, _defineProperty({}, _i, {\n            props: {\n              children: {\n                props: {\n                  listItems: {\n                    $set: this.props.variables\n                  }\n                }\n              }\n            }\n          }));\n        }\n\n        this.setState({\n          hospitalDropdowns: newHospitalDropdowns,\n          variableDropdowns: newVariableDropdowns,\n          dropdownsNeedUpdate: false\n        });\n      }\n    }\n    /**\n     * componentDidMount - Should add a dropdown on each dimension by default.\n     *  this however does not work yet because the first dropdown is always\n     *  empty (guess this has to do with the filtering in App.js's render())\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.addHospital();\n      this.addVariable();\n    }\n    /**\n     * Creates a new dropdown menu to select a hospital to display, with a new\n     *  unique id. Then updates the state accordingly.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    value: function render() {\n      var _this2 = this;\n\n      var t = this.props.t;\n      return React.createElement(\"div\", {\n        className: \"interactiveTable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(VariableSelector, {\n        className: \"variableSelector\",\n        variables: this.props.variables,\n        variableDropdowns: this.state.variableDropdowns,\n        addVariable: this.addVariable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(HospitalSelector, {\n        className: \"hospitalSelector\",\n        hospitals: this.props.hospitals,\n        hospitalDropdowns: this.state.hospitalDropdowns,\n        selectedHospitals: this.state.selectedHospitals,\n        addHospital: this.addHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(ResultTable, {\n        className: \"resultTable\",\n        selectedHospitals: this.state.selectedHospitals,\n        selectedVariables: this.state.selectedVariables,\n        hospitalData: this.props.hospitals,\n        dataLoaded: this.props.tableDataLoaded,\n        dataGenerated: this.props.tableDataGenerated,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnGenerateTable\",\n        onClick: function onClick() {\n          return _this2.props.requestData(_this2.state.selectedVariables);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, t('interactive_table.btn_create_table')));\n    }\n  }]);\n\n  return InteractiveTable;\n}(Component);\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n */\n\n\nInteractiveTable.propTypes = {\n  variables: PropTypes.array.isRequired,\n  hospitals: PropTypes.array.isRequired,\n  requestData: PropTypes.func.isRequired,\n  hasLoaded: PropTypes.bool.isRequired\n};\nvar LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js"],"names":["React","Component","PropTypes","HospitalSelector","VariableSelector","DropdownMenu","ResultTable","update","withTranslation","InteractiveTable","props","addHospital","newDropdowns","newSelectedHospitals","newSelectedHospital","newDropdown","state","nextHospitalId","hospitals","selectHospital","id_parts","split","nextHospitalIdInc","Number","hospitalDropdowns","selectedHospitals","setState","item","senderId","index","hD","children","id","indexOf","$set","selectedItem","addVariable","newVariables","newSelectedVariables","newSelectedVariable","newDrp","nextVariableId","variables","selectVariable","nextVariableIdInc","variableDropdowns","selectedVariables","vD","dropdownsNeedUpdate","hasLoaded","newHospitalDropdowns","i","length","listItems","newVariableDropdowns","t","tableDataLoaded","tableDataGenerated","requestData","propTypes","array","isRequired","func","bool","LocalizedInteractiveTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport { withTranslation } from 'react-i18next';\n\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\nclass InteractiveTable extends Component {\n\n    /**\n     * constructor - initializes the component by calling the superclass's\n     *  constructor and setting the inital state\n     *\n     * @param  {ojbect} props props handed over by parent component\n     */\n    constructor(props) {\n        super(props)\n        this.state = {\n\t\t\tnextVariableId : 'var-' + 0,\n\t\t\tvariableDropdowns : [],\n            selectedVariables : [],\n\n            nextHospitalId : 'hos-' + 0,\n            hospitalDropdowns : [],\n            selectedHospitals : [],\n\n            dropdownsNeedUpdate : true\n\n            // selectedYear : \"\"\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.hasLoaded && this.state.dropdownsNeedUpdate) {\n            let newHospitalDropdowns = this.state.hospitalDropdowns;\n            for (let i = 0; i < this.state.hospitalDropdowns.length; i++) {\n                newHospitalDropdowns = update(newHospitalDropdowns, {[i]: {props: {children: {props: {listItems: {$set: this.props.hospitals}}}}}});\n            }\n            let newVariableDropdowns = this.state.variableDropdowns;\n            for (let i = 0; i < this.state.variableDropdowns.length; i++) {\n                newVariableDropdowns = update(newVariableDropdowns, {[i]: {props: {children: {props: {listItems: {$set: this.props.variables}}}}}});\n            }\n            this.setState({\n                hospitalDropdowns : newHospitalDropdowns,\n                variableDropdowns : newVariableDropdowns,\n                dropdownsNeedUpdate : false\n            });\n        }\n    }\n\n\n    /**\n     * componentDidMount - Should add a dropdown on each dimension by default.\n     *  this however does not work yet because the first dropdown is always\n     *  empty (guess this has to do with the filtering in App.js's render())\n     */\n    componentDidMount() {\n        this.addHospital();\n        this.addVariable();\n    }\n\n    /**\n     * Creates a new dropdown menu to select a hospital to display, with a new\n     *  unique id. Then updates the state accordingly.\n     */\n    addHospital = () => {\n        let newDropdowns = [];\n        let newSelectedHospitals = [];\n\n        let newSelectedHospital = {};\n        let newDropdown = (\n            <div className='hospitalDropdown' key={this.state.nextHospitalId}>\n                <DropdownMenu id={this.state.nextHospitalId}\n                    listItems={this.props.hospitals}\n                    selectItem={this.selectHospital}\n                    selectedItem={newSelectedHospital} />\n            </div>\n        );\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n        let id_parts = this.state.nextHospitalId.split(\"-\");\n        let nextHospitalIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n\n        newDropdowns = [...this.state.hospitalDropdowns, newDropdown];\n        newSelectedHospitals = [...this.state.selectedHospitals, newSelectedHospital];\n\n        this.setState({\n            nextHospitalId: nextHospitalIdInc,\n            hospitalDropdowns : newDropdowns,\n            selectedHospitals : newSelectedHospitals\n        });\n    }\n\n    /**\n     * Called when a hospital is selected on a dropdown menu. It uses the id of\n     *  the dropdown that called this function to identify it's index in the\n     *  dropdowns array and update its displayed text. The index is as well used\n     *  to identify the according object in the array of selected items and\n     *  update it. Immutabilit-helper is used for that.\n     */\n    selectHospital = (item, senderId) => {\n        let index;\n\n        for (let hD of this.state.hospitalDropdowns) {\n            if (hD.props.children.props.id === senderId) {\n                index = this.state.hospitalDropdowns.indexOf(hD);\n            }\n        }\n\n        this.setState({\n            // selectedHospitals : newList\n            selectedHospitals: update(this.state.selectedHospitals, {[index]: {$set: item}}),\n            hospitalDropdowns: update(this.state.hospitalDropdowns, {[index]: {props: {children: {props: {selectedItem: {$set: item}}}}}})\n        });\n    }\n\n    /**\n     * Creates a new dropdown menu to select a variable to display, with a new\n     *  unique id. Then updates the state accordingly.\n     */\n\taddVariable = () => {\n        let newVariables = [];\n        let newSelectedVariables = [];\n\n        let newSelectedVariable = {};\n        let newDrp = (\n            <div className=\"variableDropdown\" key={this.state.nextVariableId}>\n                <DropdownMenu id={this.state.nextVariableId}\n                    listItems={this.props.variables}\n                    selectItem={this.selectVariable}\n                    selectedItem={newSelectedVariable} />\n            </div>\n        );\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n        let id_parts = this.state.nextVariableId.split(\"-\");\n        let nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);;\n        newVariables = [...this.state.variableDropdowns, newDrp];\n        newSelectedVariables = [...this.state.selectedVariables, newSelectedVariable];\n\n        this.setState({\n            nextVariableId: nextVariableIdInc,\n            variableDropdowns : newVariables,\n            selectedVariables : newSelectedVariables\n        });\n    }\n\n    /**\n     * Called when a variable is selected on a dropdown menu. It uses the id of\n     *  the dropdown that called this function to identify it's index in the\n     *  dropdowns array and update its displayed text. The index is as well used\n     *  to identify the according object in the array of selected items and\n     *  update it. Immutabilit-helper is used for that.\n     */\n\tselectVariable = (item, senderId) => {\n\t\tlet index;\n\n\t\tfor (let vD of this.state.variableDropdowns) {\n\t\t\tif (vD.props.children.props.id === senderId) {\n\t\t\t\tindex = this.state.variableDropdowns.indexOf(vD);\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tselectedVariables: update(this.state.selectedVariables, {[index]: {$set: item}}),\n\t\t\tvariableDropdowns: update(this.state.variableDropdowns, {[index]: {props: {children: {props: {selectedItem: {$set: item}}}}}})\n\t\t});\n\t}\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    render() {\n        const { t } = this.props;\n        return (\n            <div className=\"interactiveTable\">\n                <VariableSelector\n                    className=\"variableSelector\"\n                    variables={this.props.variables}\n                    variableDropdowns={this.state.variableDropdowns}\n\t\t\t\t\taddVariable={this.addVariable}\n                />\n                <HospitalSelector\n                    className=\"hospitalSelector\"\n                    hospitals={this.props.hospitals}\n                    hospitalDropdowns={this.state.hospitalDropdowns}\n                    selectedHospitals={this.state.selectedHospitals}\n                    addHospital={this.addHospital}\n                />\n                <ResultTable\n                    className=\"resultTable\"\n                    selectedHospitals={this.state.selectedHospitals}\n                    selectedVariables={this.state.selectedVariables}\n                    hospitalData={this.props.hospitals}\n                    dataLoaded={this.props.tableDataLoaded}\n                    dataGenerated={this.props.tableDataGenerated}\n                />\n                <button\n                    className=\"btnGenerateTable\"\n                    onClick={() => this.props.requestData(this.state.selectedVariables)}>{t('interactive_table.btn_create_table')}\n                </button>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n */\nInteractiveTable.propTypes = {\n    variables: PropTypes.array.isRequired,\n    hospitals: PropTypes.array.isRequired,\n    requestData: PropTypes.func.isRequired,\n    hasLoaded: PropTypes.bool.isRequired,\n}\n\nconst LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;\n"]},"metadata":{},"sourceType":"module"}