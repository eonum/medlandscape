{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/LinearRegression.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './LinearRegression.css';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport { withTranslation } from 'react-i18next';\nimport { numberFormat, pearsonCorrelation } from './../../utils.mjs';\n/**\n* LinearRegression is the entity we use to calculate and draw a scatterplot with a regression line.\n* The rendered JSX also consists of two dropdowns where variables can be selected to display a scatterplot.\n* The currently selected variables and language are stored in the state.\n* Width, heigth and passing of the chart are also stored in the state.\n*/\n\nvar LinearRegression =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LinearRegression, _Component);\n\n  function LinearRegression() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LinearRegression);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LinearRegression)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      language: _this.props.i18n.language,\n      w: 700,\n      h: 400,\n      padding: 30,\n      correlation: ''\n    };\n\n    _this.returnData = function (item) {\n      var xVarName = _this.props.selectedVariable[0].name;\n      var yVarName = _this.props.selectedVariable[1].name;\n      var xValues = item.attributes[xVarName];\n      var yValues = item.attributes[yVarName];\n      var xData = xValues[_this.props.year];\n      var yData = yValues[_this.props.year];\n      return {\n        x: xData,\n        y: yData\n      };\n    };\n\n    _this.makeDataArrays = function () {\n      var xArray = [];\n      var yArray = [];\n      var objArray = [];\n\n      _this.props.hospitals.map(function (obj) {\n        var data = _this.returnData(obj);\n\n        if (data.x && data.y && obj.name !== \"Ganze Schweiz\") {\n          // sort out undefined values for given year & \"ganze schweiz\"\n          xArray.push(data.x);\n          yArray.push(data.y);\n          objArray.push(obj);\n        }\n      });\n\n      return {\n        x: xArray,\n        y: yArray,\n        obj: objArray //pointer to the hospital\n\n      };\n    };\n\n    _this.drawChart = function () {\n      console.log(\"drawing chart\"); //remove old svg\n\n      _this.removeChart(); // get width, heigth and padding\n\n\n      var _this$state = _this.state,\n          w = _this$state.w,\n          h = _this$state.h,\n          padding = _this$state.padding; //create data points\n\n      var dataset = _this.createChartdata(); // function for creation of regression line\n\n\n      var newline = d3.line().x(function (d) {\n        return xScale(d.x);\n      }).y(function (d) {\n        return yScale(d.yhat);\n      }); // Define Scales\n\n      var xScale = d3.scaleLinear().domain([d3.min(dataset, function (d) {\n        return d.x;\n      }), d3.max(dataset, function (d) {\n        return d.x;\n      })]).range([padding, w - padding * 2]);\n      var yScale = d3.scaleLinear().domain([d3.min(dataset, function (d) {\n        return d.y;\n      }), d3.max(dataset, function (d) {\n        return d.y;\n      })]) //y range is reversed because svg\n      .range([h - padding, padding]); // Add a tooltip div. Here we define the general feature of the tooltip: stuff that do not depend on the data point.\n      // Its opacity is set to 0: we don't see it by default.\n\n      var tooltip = d3.select(\"#linearregression\").append(\"div\").style(\"opacity\", 0).attr(\"class\", \"tooltip\"); // add popup\n\n      _this.addPopup(); // function that changes  tooltip when the user hovers over a point.\n      // opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)\n\n\n      var mouseover = function mouseover(d) {\n        d3.select(\"#linearregression .tooltip\").style(\"opacity\", 1).text(d.obj.name);\n      };\n\n      var mousemove = function mousemove(d) {\n        d3.select(\"#linearregression .tooltip\").style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY - 28 + \"px\");\n      }; // close popup if you click outside\n\n\n      var func = function func(e) {\n        d3.select(\"#popup\").style(\"display\", \"none\");\n        document.removeEventListener(\"click\", func);\n      };\n\n      var mouseclick = function mouseclick(d) {\n        d3.select(\"#popup\").style(\"display\", \"block\").style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY - 28 + \"px\");\n        d3.select(\"#popupName\").text(d.obj.name);\n        d3.select(\"#popupAddress\").html(\"<dd>\" + d.obj.street + \",</dd>\" + d.obj.city);\n        d3.select(\"#popupXVariable\").text(numberFormat(d.x));\n        d3.select(\"#popupYVariable\").text(numberFormat(d.y)); // prevent that the click event closes the popup\n\n        d3.event.stopPropagation();\n        document.addEventListener(\"click\", func);\n      }; // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again\n\n\n      var mouseleave = function mouseleave(d) {\n        d3.select(\"#linearregression .tooltip\").transition().duration(200).style(\"opacity\", 0);\n      }; // create svg\n\n\n      var svg = _this.createSvg(); // append regression line\n\n\n      svg.append(\"path\").datum(dataset).attr(\"clip-path\", \"url(#chart-area)\").attr(\"class\", \"line\").attr(\"d\", newline); // add legend\n\n      _this.addLegend(svg); // append data points\n\n\n      svg.append(\"g\").attr(\"id\", \"circles\").attr(\"clip-path\", \"url(#chart-area)\").selectAll(\"circle\").data(dataset, function (d) {\n        return d;\n      }).enter().append(\"circle\").attr(\"class\", \"dot\").attr(\"cx\", function (d) {\n        return xScale(d.x);\n      }).attr(\"cy\", function (d) {\n        return yScale(d.y);\n      }).attr(\"r\", 3.5).style(\"cursor\", \"pointer\").on(\"mouseover\", mouseover).on(\"mousemove\", mousemove).on(\"mouseleave\", mouseleave).on(\"click\", mouseclick); // define and append axes\n\n      _this.appendAxes(svg, xScale, yScale);\n    };\n\n    _this.createChartdata = function () {\n      var dataArrays = _this.makeDataArrays();\n\n      var x = dataArrays.x;\n      var y = dataArrays.y;\n      var obj = dataArrays.obj;\n      var n = x.length; // create x and y sums\n\n      var xSum = 0;\n      var ySum = 0;\n\n      for (var i = 0; i < n; i++) {\n        xSum += x[i];\n        ySum += y[i];\n      } // calculate mean x and y\n\n\n      var xMean = xSum / n;\n      var yMean = ySum / n; // calculate coefficients\n\n      var xvariance = 0;\n      var yvariance = 0;\n      var term1 = 0;\n      var term2 = 0;\n\n      for (i = 0; i < x.length; i++) {\n        xvariance = x[i] - xMean;\n        yvariance = y[i] - yMean;\n        term1 += xvariance * yvariance;\n        term2 += xvariance * xvariance;\n      }\n\n      var b1 = term1 / term2;\n      var b0 = yMean - b1 * xMean; // perform regression\n\n      var yhat = []; // fit line using coeffs\n\n      for (i = 0; i < x.length; i++) {\n        yhat.push(b0 + x[i] * b1);\n      } // create actual data objects\n\n\n      var data = [];\n\n      for (i = 0; i < y.length && i < x.length; i++) {\n        data.push({\n          yhat: yhat[i],\n          y: y[i],\n          x: x[i],\n          obj: obj[i]\n        });\n      }\n\n      return data;\n    };\n\n    _this.drawEmptyChart = function () {\n      _this.removeChart();\n\n      var _this$state2 = _this.state,\n          w = _this$state2.w,\n          h = _this$state2.h,\n          padding = _this$state2.padding; // Define Scales\n\n      var xScale = d3.scaleLinear().domain([undefined, undefined]).range([padding, w - padding * 2]);\n      var yScale = d3.scaleLinear().domain([undefined, undefined]).range([h - padding, padding]);\n\n      var svg = _this.createSvg();\n\n      _this.appendAxes(svg, xScale, yScale);\n    };\n\n    _this.createSvg = function () {\n      var _this$state3 = _this.state,\n          w = _this$state3.w,\n          h = _this$state3.h,\n          padding = _this$state3.padding;\n      var svg = d3.select(\"#linearregression\").append(\"svg\").attr(\"id\", \"linearregressionsvg\").attr(\"width\", w).attr(\"height\", h);\n      return svg;\n    };\n\n    _this.appendAxes = function (svg, xScale, yScale) {\n      var _this$state4 = _this.state,\n          w = _this$state4.w,\n          h = _this$state4.h,\n          padding = _this$state4.padding; //define axes\n\n      var xAxis = d3.axisBottom().scale(xScale).ticks(7, \"s\");\n      var yAxis = d3.axisLeft().scale(yScale).ticks(7, \"s\"); //append axes\n\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + (h - padding) + \")\").call(xAxis);\n      svg.append(\"g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(\" + padding + \",0)\").call(yAxis);\n    };\n\n    _this.addLegend = function (svg) {\n      var _this$state5 = _this.state,\n          w = _this$state5.w,\n          h = _this$state5.h,\n          padding = _this$state5.padding; // define legend\n\n      var l_offset_h = 310;\n      var l_offset_w = 220;\n      var legend = svg.selectAll(\".legend\").data([\"A\"]) //one hard coded datepoint added\n      .enter().append(\"g\").attr(\"class\", \"legend\").attr(\"transform\", function (d, i) {\n        return \"translate(0,\" + i * 20 + \")\";\n      }); // draw legend colored rectangles\n\n      legend.append(\"rect\").attr(\"x\", w - l_offset_w).attr(\"y\", h - l_offset_h).attr(\"width\", 12).attr(\"height\", 12); // draw legend text\n\n      var text = _this.props.t('graphView.regressionLine');\n\n      var textOffset = 16;\n      legend.append(\"text\").attr(\"x\", w - l_offset_w + textOffset).attr(\"y\", h - l_offset_h + 7).attr(\"dy\", \".35em\").style(\"text-anchor\", \"start\").text(text);\n\n      var arrs = _this.makeDataArrays();\n\n      var r = pearsonCorrelation(arrs.x, arrs.y);\n      legend.append(\"text\").attr(\"x\", w - l_offset_w + textOffset).attr(\"y\", h - l_offset_h + 23).attr(\"dy\", \".35em\").style(\"text-anchor\", \"start\").text(_this.props.t('graphView.correlation') + \": \" + r);\n    };\n\n    _this.addPopup = function () {\n      var popup = d3.select(\"#linearregression\").append(\"div\").style(\"display\", \"none\").attr(\"id\", \"popup\");\n      var table = popup.append(\"table\");\n      var firstRow = table.append(\"tr\");\n      firstRow.append(\"td\").text(_this.props.t(\"popup.hospital\"));\n      firstRow.append(\"td\").attr(\"id\", \"popupName\");\n      var secondRow = table.append(\"tr\");\n      secondRow.append(\"td\").text(_this.props.t(\"popup.address\"));\n      secondRow.append(\"td\").attr(\"id\", \"popupAddress\");\n      var thirdRow = table.append(\"tr\");\n      thirdRow.append(\"td\").text(_this.props.selectedVariable[0].text);\n      thirdRow.append(\"td\").attr(\"id\", \"popupXVariable\");\n      var fourthRow = table.append(\"tr\");\n      fourthRow.append(\"td\").text(_this.props.selectedVariable[1].text);\n      fourthRow.append(\"td\").attr(\"id\", \"popupYVariable\");\n    };\n\n    _this.selectXAxis = function (item) {\n      _this.props.setVariable([item, _this.props.selectedVariable[1]]);\n    };\n\n    _this.selectYAxis = function (item) {\n      _this.props.setVariable([_this.props.selectedVariable[0], item]);\n    };\n\n    _this.removeChart = function () {\n      d3.select(\"#linearregressionsvg\").remove();\n      d3.select(\"#popup\").remove();\n      d3.select(\"#linearregression .tooltip\").remove();\n    };\n\n    return _this;\n  }\n\n  _createClass(LinearRegression, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log(\"Lin Reg mounted\");\n      this.drawEmptyChart();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      // if the language is changed,set back variables and remove chart\n      if (this.props.i18n.language !== this.state.language) {\n        this.setState({\n          language: this.props.i18n.language\n        });\n        this.drawEmptyChart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (Object.keys(this.props.selectedVariable[0]).length > 0 && Object.keys(this.props.selectedVariable[1]).length > 0) {\n        if (this.props.selectedVariable[0] !== prevProps.selectedVariable[0] || this.props.selectedVariable[1] !== prevProps.selectedVariable[1]) {\n          console.log(\"fetching lin reg vars\");\n          this.props.requestData([this.props.selectedVariable[0], this.props.selectedVariable[1]]).then(function () {\n            _this2.drawChart();\n          });\n        } else if (this.props.year !== prevProps.year && this.props.year.length > 0) {\n          console.log(\"years have changed // component has mounted\");\n          this.drawChart();\n        } else if (this.props.hospitals !== prevProps.hospitals && this.props.hasLoaded) {\n          console.log(\"years have changed // component has mounted\");\n          this.drawChart();\n        }\n      } // if (this.props.year !== prevProps.year && this.props.year.length > 0) {\n      // \tif (Object.keys(this.state.xVariable).length > 0 && Object.keys(this.state.yVariable).length > 0) {\n      // \t\tconsole.log(\"years have changed // component has mounted\");\n      // \t\tthis.drawChart();\n      // \t}\n      // } else if (this.props.hospitals !== prevProps.hospitals && this.props.hasLoaded) {\n      // \tif (Object.keys(this.state.xVariable).length > 0 && Object.keys(this.state.yVariable).length > 0) {\n      // \t\tconsole.log(\"hospitals have been filtered\");\n      // \t\tthis.drawChart();\n      // \t}\n      // }\n      // if (this.props.hospitals.length > 0 && this.props.year.length > 0) {\n      // \tif (Object.keys(this.state.xVariable).length > 0 && Object.keys(this.state.yVariable).length > 0) {\n      // \t\tthis.drawChart()\n      // \t}\n      // }\n\n    }\n    /**\n    * Returns the values stored in a this.props.objects canton/hospital\n    * @param  {Canton || Hospital Object} item The object to extract the values from\n    * @return {Object} with x: Data for the xVariable and y: Data for the yVariable\n    */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * Creates zwo dropdowns and scatterplot with regression line\n     * @return {JSX}\n     */\n    value: function render() {\n      var _this$props = this.props,\n          variables = _this$props.variables,\n          selectedVariable = _this$props.selectedVariable;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"yAxisBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, \"Y-Achse:\"), React.createElement(DropdownMenu, {\n        id: \"yAxis\",\n        listItems: variables,\n        selectItem: this.selectYAxis,\n        selectedItem: selectedVariable[1],\n        defaultText: this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"linearregression\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 505\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"xAxisBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }, \"X-Achse:\"), React.createElement(DropdownMenu, {\n        id: \"xAxis\",\n        listItems: variables,\n        selectItem: this.selectXAxis,\n        selectedItem: selectedVariable[0],\n        defaultText: this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return LinearRegression;\n}(Component);\n\nvar LocalizedLinearRegression = withTranslation()(LinearRegression);\nexport default LocalizedLinearRegression;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/LinearRegression.js"],"names":["React","Component","d3","DropdownMenu","withTranslation","numberFormat","pearsonCorrelation","LinearRegression","state","language","props","i18n","w","h","padding","correlation","returnData","item","xVarName","selectedVariable","name","yVarName","xValues","attributes","yValues","xData","year","yData","x","y","makeDataArrays","xArray","yArray","objArray","hospitals","map","obj","data","push","drawChart","console","log","removeChart","dataset","createChartdata","newline","line","d","xScale","yScale","yhat","scaleLinear","domain","min","max","range","tooltip","select","append","style","attr","addPopup","mouseover","text","mousemove","event","pageX","pageY","func","e","document","removeEventListener","mouseclick","html","street","city","stopPropagation","addEventListener","mouseleave","transition","duration","svg","createSvg","datum","addLegend","selectAll","enter","on","appendAxes","dataArrays","n","length","xSum","ySum","i","xMean","yMean","xvariance","yvariance","term1","term2","b1","b0","drawEmptyChart","undefined","xAxis","axisBottom","scale","ticks","yAxis","axisLeft","call","l_offset_h","l_offset_w","legend","t","textOffset","arrs","r","popup","table","firstRow","secondRow","thirdRow","fourthRow","selectXAxis","setVariable","selectYAxis","remove","setState","prevProps","Object","keys","requestData","then","hasLoaded","variables","LocalizedLinearRegression"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as d3 from \"d3\";\nimport './LinearRegression.css'\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport { withTranslation } from 'react-i18next';\nimport { numberFormat, pearsonCorrelation } from './../../utils.mjs';\n\n/**\n* LinearRegression is the entity we use to calculate and draw a scatterplot with a regression line.\n* The rendered JSX also consists of two dropdowns where variables can be selected to display a scatterplot.\n* The currently selected variables and language are stored in the state.\n* Width, heigth and passing of the chart are also stored in the state.\n*/\nclass LinearRegression extends Component {\n\n\tstate = {\n\t\tlanguage: this.props.i18n.language,\n\t\tw : 700,\n\t\th : 400,\n\t\tpadding : 30,\n\t\tcorrelation: '',\n\t};\n\n\tcomponentDidMount(){\n\t\tconsole.log(\"Lin Reg mounted\");\n\t\tthis.drawEmptyChart();\n\t}\n\n\tcomponentWillUpdate(){\n\t\t// if the language is changed,set back variables and remove chart\n\t\tif (this.props.i18n.language !== this.state.language){\n\t\t\tthis.setState({\n\t\t\t\tlanguage : this.props.i18n.language,\n\t\t\t});\n\t\t\tthis.drawEmptyChart();\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps){\n\t\tif (Object.keys(this.props.selectedVariable[0]).length > 0 && Object.keys(this.props.selectedVariable[1]).length > 0) {\n\t\t\tif (this.props.selectedVariable[0] !== prevProps.selectedVariable[0] || this.props.selectedVariable[1] !== prevProps.selectedVariable[1]) {\n\t\t\t\tconsole.log(\"fetching lin reg vars\");\n\t\t\t\tthis.props.requestData([this.props.selectedVariable[0], this.props.selectedVariable[1]]).then(() => {\n\t\t\t\t\tthis.drawChart();\n\t\t\t\t});\n\t\t\t} else if (this.props.year !== prevProps.year && this.props.year.length > 0) {\n\t\t\t\tconsole.log(\"years have changed // component has mounted\");\n\t\t\t\tthis.drawChart()\n\t\t\t} else if (this.props.hospitals !== prevProps.hospitals && this.props.hasLoaded) {\n\t\t\t\tconsole.log(\"years have changed // component has mounted\");\n\t\t\t\tthis.drawChart();\n\t\t\t}\n\t\t}\n\t\t// if (this.props.year !== prevProps.year && this.props.year.length > 0) {\n\t\t// \tif (Object.keys(this.state.xVariable).length > 0 && Object.keys(this.state.yVariable).length > 0) {\n\t\t// \t\tconsole.log(\"years have changed // component has mounted\");\n\t\t// \t\tthis.drawChart();\n\t\t// \t}\n\t\t// } else if (this.props.hospitals !== prevProps.hospitals && this.props.hasLoaded) {\n\t\t// \tif (Object.keys(this.state.xVariable).length > 0 && Object.keys(this.state.yVariable).length > 0) {\n\t\t// \t\tconsole.log(\"hospitals have been filtered\");\n\t\t// \t\tthis.drawChart();\n\t\t// \t}\n\t\t// }\n\t\t// if (this.props.hospitals.length > 0 && this.props.year.length > 0) {\n\t\t// \tif (Object.keys(this.state.xVariable).length > 0 && Object.keys(this.state.yVariable).length > 0) {\n\t\t// \t\tthis.drawChart()\n\t\t// \t}\n\t\t// }\n\t}\n\n\t/**\n\t* Returns the values stored in a this.props.objects canton/hospital\n\t* @param  {Canton || Hospital Object} item The object to extract the values from\n\t* @return {Object} with x: Data for the xVariable and y: Data for the yVariable\n\t*/\n   returnData = (item) => {\n\t   let xVarName = this.props.selectedVariable[0].name;\n\t   let yVarName = this.props.selectedVariable[1].name;\n\t   let xValues = item.attributes[xVarName];\n\t   let yValues = item.attributes[yVarName];\n\t   let xData = xValues[this.props.year];\n\t   let yData = yValues[this.props.year];\n\t   return {\n\t\t   x: xData,\n\t\t   y: yData,\n\t   };\n   }\n\n   /**\n\t* Returns an Object with arrays containing all Values of the chosen variables\n\t* @return {Object} with x: all data values for the xVariable and y: all data values for the yVariable\n\t*/\n   makeDataArrays = () => {\n\t   let xArray = [];\n\t   let yArray = [];\n\t   let objArray = [];\n\t   this.props.hospitals.map((obj) => {\n\t\t   let data = this.returnData(obj);\n\t\t   if (data.x && data.y && obj.name !== \"Ganze Schweiz\"){ // sort out undefined values for given year & \"ganze schweiz\"\n\t\t\t\txArray.push(data.x);\n\t\t\t\tyArray.push(data.y);\n\t\t\t\tobjArray.push(obj);\n\t\t   }\n\t   })\n\t   return {\n\t\t   x: xArray,\n\t\t   y: yArray,\n\t\t   obj: objArray, //pointer to the hospital\n\t   };\n   }\n\n\t/**\n\t * Draws a Scatterplot with a regression line\n\t */\n\tdrawChart = () => {\n\t\tconsole.log(\"drawing chart\");\n\t\t//remove old svg\n\t\tthis.removeChart();\n\n\t\t// get width, heigth and padding\n\t\tconst {w, h, padding} = this.state;\n\n\t\t//create data points\n\t\tvar dataset = this.createChartdata();\n\n\t\t// function for creation of regression line\n\t\tvar newline = d3.line()\n\t\t\t.x(function(d) {\n\t\t\t\treturn xScale(d.x);\n\t\t\t})\n\t\t\t.y(function(d) {\n\t\t\t\treturn yScale(d.yhat);\n\t\t\t});\n\n\t\t// Define Scales\n\t\tvar xScale = d3.scaleLinear()\n\t\t\t.domain([\n\t\t\t\td3.min(dataset, function(d){\n\t\t\t\t\treturn(d.x);\n\t\t\t\t}),\n\t\t\t\td3.max(dataset, function(d){\n\t\t\t\t\treturn d.x;\n\t\t\t\t})\n\t\t\t])\n\t\t\t.range([padding,w - padding*2]);\n\t\tvar yScale = d3.scaleLinear()\n\t\t\t.domain([\n\t\t\t\td3.min(dataset, function(d){\n\t\t\t\t\treturn(d.y);\n\t\t\t\t}),\n\t\t\t\td3.max(dataset, function(d){\n\t\t\t  \t\treturn d.y;\n\t\t\t\t})\n\t\t\t]) //y range is reversed because svg\n\t\t\t.range([h-padding, padding]);\n\t\t// Add a tooltip div. Here we define the general feature of the tooltip: stuff that do not depend on the data point.\n     \t// Its opacity is set to 0: we don't see it by default.\n     \tvar tooltip = d3.select(\"#linearregression\")\n\t\t    .append(\"div\")\n\t\t    .style(\"opacity\", 0)\n\t\t    .attr(\"class\", \"tooltip\")\n\n\t\t// add popup\n\t\tthis.addPopup();\n\n     \t// function that changes  tooltip when the user hovers over a point.\n     \t// opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)\n    \tvar mouseover = function(d) {\n       \t\td3.select(\"#linearregression .tooltip\").style(\"opacity\", 1)\n\t\t\t\t.text(d.obj.name);\n\t\t}\n\n    \tvar mousemove = function(d) {\n       \t\td3.select(\"#linearregression .tooltip\")\n\t\t\t\t.style(\"left\", (d3.event.pageX) + \"px\")\n\t\t\t\t.style(\"top\", (d3.event.pageY - 28) + \"px\");\n    \t}\n\n\t\t// close popup if you click outside\n\t\tvar func = function(e) {\n\t\t\td3.select(\"#popup\")\n\t\t\t\t.style(\"display\", \"none\");\n\t\t\tdocument.removeEventListener(\"click\", func);\n\t\t}\n\n\t\tvar mouseclick = function(d) {\n       \t\td3.select(\"#popup\")\n\t\t\t\t.style(\"display\", \"block\")\n\t\t\t\t.style(\"left\", (d3.event.pageX) + \"px\")\n\t\t\t\t.style(\"top\", (d3.event.pageY - 28) + \"px\")\n\t\t\td3.select(\"#popupName\")\n\t\t\t\t.text(d.obj.name);\n\t\t\td3.select(\"#popupAddress\")\n\t\t\t\t.html(\"<dd>\" + d.obj.street + \",</dd>\" + d.obj.city);\n\t\t\td3.select(\"#popupXVariable\")\n\t\t\t\t.text(numberFormat(d.x));\n\t\t\td3.select(\"#popupYVariable\")\n\t\t\t\t.text(numberFormat(d.y));\n\n\t\t\t// prevent that the click event closes the popup\n\t\t\td3.event.stopPropagation();\n\t\t\tdocument.addEventListener(\"click\", func);\n    \t}\n\n     \t// A function that change this tooltip when the leaves a point: just need to set opacity to 0 again\n    \tvar mouseleave = function(d) {\n       \t\td3.select(\"#linearregression .tooltip\").transition()\n        \t\t.duration(200)\n        \t\t.style(\"opacity\", 0)\n    \t}\n\n\t\t// create svg\n\t\tvar svg = this.createSvg();\n\n\t\t// append regression line\n\t\tsvg.append(\"path\")\n\t\t\t.datum(dataset)\n\t\t\t.attr(\"clip-path\", \"url(#chart-area)\")\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr(\"d\", newline);\n\n\t\t// add legend\n\t\tthis.addLegend(svg);\n\n\t\t// append data points\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"id\", \"circles\")\n\t\t\t.attr(\"clip-path\", \"url(#chart-area)\")\n\t\t\t.selectAll(\"circle\")\n\t\t\t.data(dataset, function(d){return d;})\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", \"dot\")\n\t\t\t.attr(\"cx\", function(d){\n\t\t\t\treturn xScale(d.x);\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d){\n\t\t\t\treturn yScale(d.y);\n\t\t\t})\n\t\t\t.attr(\"r\", 3.5)\n\t\t\t.style(\"cursor\", \"pointer\")\n\t\t\t.on(\"mouseover\", mouseover)\n\t\t\t.on(\"mousemove\", mousemove)\n\t\t\t.on(\"mouseleave\", mouseleave)\n\t\t\t.on(\"click\", mouseclick);\n\n\t\t// define and append axes\n\t\tthis.appendAxes(svg, xScale, yScale);\n\t}\n\n\t/**\n\t* creates the dataset from arrays of data for x and y values\n\t* @return {Object} dataset that will be visualized\n\t*/\n\tcreateChartdata = () => {\n\t\tlet dataArrays = this.makeDataArrays();\n\t\tvar x = dataArrays.x;\n\t\tvar y = dataArrays.y;\n\t\tvar obj = dataArrays.obj;\n\t\tvar n = x.length;\n\n\t\t// create x and y sums\n\t\tlet xSum = 0;\n\t\tlet ySum = 0;\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\txSum += x[i]\n\t\t\tySum += y[i]\n\t\t}\n\n\t\t// calculate mean x and y\n\t\tlet xMean = xSum / n;\n\t\tlet yMean = ySum / n;\n\n\t\t// calculate coefficients\n\t\tvar xvariance = 0;\n\t\tvar yvariance = 0;\n\t\tvar term1 = 0;\n\t\tvar term2 = 0;\n\t\tfor (i = 0; i < x.length; i++) {\n\t\t\txvariance = x[i] - xMean;\n\t\t\tyvariance = y[i] - yMean;\n\t\t\tterm1 += xvariance * yvariance;\n\t\t\tterm2 += xvariance * xvariance;\n\t\t}\n\t\tvar b1 = term1 / term2;\n\t\tvar b0 = yMean - (b1 * xMean);\n\n\t\t// perform regression\n\t\tlet yhat = [];\n\n\t\t// fit line using coeffs\n\t\tfor (i = 0; i < x.length; i++) {\n\t\t\tyhat.push(b0 + (x[i] * b1));\n\t\t}\n\n\t\t// create actual data objects\n\t\tvar data = [];\n\t\tfor (i = 0; i < y.length && i < x.length; i++) {\n\t\t\tdata.push({\n\t\t\t\tyhat: yhat[i],\n\t\t\t\ty: y[i],\n\t\t\t\tx: x[i],\n\t\t\t\tobj: obj[i],\n\t\t\t})\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n\t * Draws an empty scatterplot (only axes without any text)\n\t */\n\tdrawEmptyChart = () => {\n\t\tthis.removeChart();\n\t\tconst {w, h, padding} = this.state;\n\t\t// Define Scales\n\t\tvar xScale = d3.scaleLinear()\n\t\t\t.domain([undefined, undefined])\n\t\t\t.range([padding,w - padding*2]);\n\t\tvar yScale = d3.scaleLinear()\n\t\t\t.domain([undefined, undefined])\n\t\t\t.range([h-padding, padding]);\n\n\t\tvar svg = this.createSvg();\n\t\tthis.appendAxes(svg, xScale, yScale);\n\t}\n\n\t/**\n\t* create svg\n\t* @return {svg}\n\t*/\n\tcreateSvg = () =>{\n\t\tconst {w, h, padding} = this.state;\n\t\tvar svg = d3.select(\"#linearregression\")\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"id\",\"linearregressionsvg\")\n\t\t\t.attr(\"width\",w)\n\t\t\t.attr(\"height\", h);\n\t\treturn svg;\n\t}\n\n\t/**\n\t* append axes to a svg\n\t* @param {svg}\n\t* @param {xScale} xScale to append to svg\n\t* @param {xScale} yScale to append to svg\n\t*/\n\tappendAxes = (svg, xScale, yScale) => {\n\t\tconst {w, h, padding} = this.state;\n\t\t//define axes\n\t\tvar xAxis = d3.axisBottom()\n\t\t\t.scale(xScale)\n\t\t\t.ticks(7, \"s\");\n\n\t\tvar yAxis = d3.axisLeft()\n\t\t\t.scale(yScale)\n\t\t\t.ticks(7, \"s\");\n\n\t\t//append axes\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", \"translate(0,\" + (h-padding) + \")\")\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + padding + \",0)\")\n\t\t\t.call(yAxis);\n\t}\n\n\t/**\n\t* adding Legend\n\t* @param {svg}\n\t*/\n\taddLegend = (svg) => {\n\t\tconst {w, h, padding} = this.state;\n\t\t// define legend\n\t\tlet l_offset_h = 310;\n\t\tlet l_offset_w = 220;\n\t\tvar legend = svg.selectAll(\".legend\")\n\t\t\t.data([\"A\"]) //one hard coded datepoint added\n\t\t\t.enter().append(\"g\")\n\t\t\t.attr(\"class\", \"legend\")\n\t\t\t.attr(\"transform\", function(d, i) { return \"translate(0,\" + i * 20 + \")\"; });\n\n\t\t// draw legend colored rectangles\n\t\tlegend.append(\"rect\")\n\t\t\t.attr(\"x\", w - l_offset_w)\n\t\t\t.attr(\"y\", h - l_offset_h)\n\t\t\t.attr(\"width\", 12)\n\t\t\t.attr(\"height\", 12)\n\n\t\t// draw legend text\n\t\tlet text = this.props.t('graphView.regressionLine');\n\t\tlet textOffset = 16;\n\t\tlegend.append(\"text\")\n\t\t\t.attr(\"x\", w - l_offset_w + textOffset)\n\t\t\t.attr(\"y\", h - l_offset_h + 7)\n\t\t\t.attr(\"dy\", \".35em\")\n\t\t\t.style(\"text-anchor\", \"start\")\n\t\t\t.text(text);\n\n\t\tlet arrs = this.makeDataArrays();\n\t\tlet r = pearsonCorrelation(arrs.x, arrs.y);\n\t\tlegend.append(\"text\")\n\t\t\t.attr(\"x\", w - l_offset_w + textOffset)\n\t\t\t.attr(\"y\", h - l_offset_h + 23)\n\t\t\t.attr(\"dy\", \".35em\")\n\t\t\t.style(\"text-anchor\", \"start\")\n\t\t\t.text(this.props.t('graphView.correlation') + \": \" + r);\n\t}\n\n\t/**\n\t* adding Popup\n\t*/\n\taddPopup = () =>{\n\t\tvar popup = d3.select(\"#linearregression\")\n\t\t\t.append(\"div\")\n\t\t\t.style(\"display\", \"none\")\n\t\t\t.attr(\"id\", \"popup\");\n\n\t\tvar table = popup\n\t\t\t.append(\"table\");\n\n\t\tvar firstRow = table\n\t\t\t.append(\"tr\");\n\t\tfirstRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.props.t(\"popup.hospital\"));\n\t\tfirstRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupName\");\n\n\t\tvar secondRow = table\n\t\t\t.append(\"tr\");\n\t\tsecondRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.props.t(\"popup.address\"));\n\t\tsecondRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupAddress\");\n\n\t\tvar thirdRow = table\n\t\t\t.append(\"tr\");\n\t\tthirdRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.props.selectedVariable[0].text);\n\t\tthirdRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupXVariable\");\n\n\t\tvar fourthRow = table\n\t\t\t.append(\"tr\");\n\t\tfourthRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.props.selectedVariable[1].text);\n\t\tfourthRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupYVariable\");\n\t}\n\n\t/**\n    * defining behaviour on dropdown click\n\t* write the selected variable to state and update chart on X axis\n    */\n    selectXAxis = (item) => {\n\t\tthis.props.setVariable([item, this.props.selectedVariable[1]]);\n\t}\n\n\t/**\n    * defining behaviour on dropdown click\n\t* write the selected variable to state and update chart on Y axis\n    */\n    selectYAxis = (item) => {\n\t\tthis.props.setVariable([this.props.selectedVariable[0], item]);\n\t}\n\n\t/**\n\t* remove drawn chart\n\t*/\n\tremoveChart = () => {\n\t\td3.select(\"#linearregressionsvg\").remove();\n\t\td3.select(\"#popup\").remove();\n\t\td3.select(\"#linearregression .tooltip\").remove();\n\t}\n\n\t/**\n\t * Creates zwo dropdowns and scatterplot with regression line\n\t * @return {JSX}\n\t */\n\trender() {\n\t\tlet {variables, selectedVariable} = this.props;\n\n\t\treturn (\n        \t<div>\n\t\t\t\t<div className=\"yAxisBtn\">\n\t\t\t\t\t<p>Y-Achse:</p>\n\t\t\t\t\t<DropdownMenu id=\"yAxis\"\n\t\t                listItems={variables}\n\t\t                selectItem={this.selectYAxis}\n\t\t                selectedItem={selectedVariable[1]}\n\t\t                defaultText={this.props.t('dropDowns.variablesFallback')}\n\t\t            />\n\t\t\t\t</div>\n\t\t\t\t<div id=\"linearregression\"></div>\n\t\t\t\t<div className=\"xAxisBtn\">\n\t\t\t\t\t<p>X-Achse:</p>\n\t\t\t\t\t<DropdownMenu id=\"xAxis\"\n\t\t\t\t\t\tlistItems={variables}\n\t\t\t\t\t\tselectItem={this.selectXAxis}\n\t\t\t\t\t\tselectedItem={selectedVariable[0]}\n\t\t\t\t\t\tdefaultText={this.props.t('dropDowns.variablesFallback')}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n        )\n\t}\n}\n\nconst LocalizedLinearRegression = withTranslation()(LinearRegression);\nexport default LocalizedLinearRegression;\n"]},"metadata":{},"sourceType":"module"}