{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/LinearRegression.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './LinearRegression.css';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport { withTranslation } from 'react-i18next';\n\nvar LinearRegression =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LinearRegression, _Component);\n\n  function LinearRegression() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LinearRegression);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LinearRegression)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      xVariable: undefined,\n      yVariable: undefined,\n      language: _this.props.i18n.language\n    };\n\n    _this.returnData = function (item) {\n      var xVarName = _this.state.xVariable.name;\n      var yVarName = _this.state.yVariable.name;\n      var xValues = item.attributes[xVarName];\n      var yValues = item.attributes[yVarName];\n      var xData = xValues[_this.props.year];\n      var yData = yValues[_this.props.year];\n      return {\n        x: xData,\n        y: yData\n      };\n    };\n\n    _this.makeDataArrays = function () {\n      var xArray = [];\n      var yArray = [];\n\n      _this.props.hospitals.map(function (obj) {\n        var data = _this.returnData(obj);\n\n        if (data.x && data.y) {\n          // sort out undefined values for given year\n          xArray.push(data.x);\n          yArray.push(data.y);\n        }\n      });\n\n      return {\n        x: xArray,\n        y: yArray\n      };\n    };\n\n    _this.createChartdata = function () {\n      var dataArrays = _this.makeDataArrays();\n\n      var x = dataArrays.x;\n      var y = dataArrays.y;\n      var n = x.length; // create x and y sums\n\n      var xSum = 0;\n      var ySum = 0;\n\n      for (var i = 0; i < n; i++) {\n        xSum += x[i];\n        ySum += y[i];\n      } // calculate mean x and y\n\n\n      var xMean = xSum / n;\n      var yMean = ySum / n; // calculate coefficients\n\n      var xvariance = 0;\n      var yvariance = 0;\n      var term1 = 0;\n      var term2 = 0;\n\n      for (i = 0; i < x.length; i++) {\n        xvariance = x[i] - xMean;\n        yvariance = y[i] - yMean;\n        term1 += xvariance * yvariance;\n        term2 += xvariance * xvariance;\n      }\n\n      var b1 = term1 / term2;\n      var b0 = yMean - b1 * xMean; // perform regression\n\n      var yhat = []; // fit line using coeffs\n\n      for (i = 0; i < x.length; i++) {\n        yhat.push(b0 + x[i] * b1);\n      } // create actual data objects\n\n\n      var data = [];\n\n      for (i = 0; i < y.length; i++) {\n        data.push({\n          \"yhat\": yhat[i],\n          \"y\": y[i],\n          \"x\": x[i]\n        });\n      }\n\n      return data;\n    };\n\n    _this.selectXAxis = function (item) {\n      _this.setState({\n        xVariable: item\n      }, function () {\n        _this.updateChart();\n      });\n    };\n\n    _this.selectYAxis = function (item) {\n      _this.setState({\n        yVariable: item\n      }, function () {\n        _this.updateChart();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LinearRegression, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // check if response is there and draw chart if so\n      if (this.props.tableDataLoaded) this.drawChart();\n    }\n    /**\n    * Returns the values stored in a this.props.objects canton/hospital\n    * @param  {Canton || Hospital Object} item The object to extract the values from\n    * @return {Object} with x: Data for the xVariable and y: Data for the yVariable\n    */\n\n  }, {\n    key: \"drawChart\",\n\n    /**\n     * Draws a Scatterplot with a regression line\n     */\n    value: function drawChart() {\n      //remove old svg\n      d3.select(\"#linearregressionsvg\").remove();\n      var w = 960;\n      var h = 500;\n      var padding = 30; //create data points\n\n      var dataset = this.createChartdata(); // function for creation of regression line\n\n      var newline = d3.line().x(function (d) {\n        return xScale(d.x);\n      }).y(function (d) {\n        return yScale(d.yhat);\n      }); // Define Scales\n\n      var xScale = d3.scaleLinear().domain([0, d3.max(dataset, function (d) {\n        return d.x;\n      })]).range([padding, w - padding * 2]);\n      var yScale = d3.scaleLinear().domain([d3.min(dataset, function (d) {\n        return d.y;\n      }), d3.max(dataset, function (d) {\n        return d.y;\n      })]) //y range is reversed because svg\n      .range([h - padding, padding]); // Define Axis\n\n      var xAxis = d3.axisBottom().scale(xScale);\n      var yAxis = d3.axisLeft().scale(yScale).ticks(5); // create svg\n\n      var svg = d3.select(\"#linearregression\").append(\"svg\").attr(\"id\", \"linearregressionsvg\").attr(\"width\", w).attr(\"height\", h); // cut off datapoints that are outside the axis\n\n      svg.append(\"clipPath\").attr(\"id\", \"chart-area\").append(\"rect\").attr(\"x\", padding).attr(\"y\", padding).attr(\"width\", w - padding * 3).attr(\"height\", h - padding * 2); // append data points\n\n      svg.append(\"g\").attr(\"id\", \"circles\").attr(\"clip-path\", \"url(#chart-area)\").selectAll(\"circle\").data(dataset).enter().append(\"circle\").attr(\"class\", \"dot\").attr(\"cx\", function (d) {\n        return xScale(d.x);\n      }).attr(\"cy\", function (d) {\n        return yScale(d.y);\n      }).attr(\"r\", 3.5); // append regression line\n\n      svg.append(\"path\").datum(dataset).attr(\"clip-path\", \"url(#chart-area)\").attr(\"class\", \"line\").attr(\"d\", newline); // append Axes\n\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + (h - padding) + \")\").call(xAxis);\n      svg.append(\"g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(\" + padding + \",0)\").call(yAxis); // call this to set back and prepare for reupdate\n\n      this.props.tableDataGenerated();\n    }\n  }, {\n    key: \"updateChart\",\n\n    /**\n    * check if both x and y variable have been selected\n    * update selected variables in state if so\n    */\n    value: function updateChart() {\n      if (this.state.xVariable && this.state.yVariable) this.props.requestData([this.state.xVariable, this.state.yVariable]);\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      // if the language is changed,set back variables and remove chart\n      if (this.props.i18n.language !== this.state.language) {\n        this.setState({\n          language: this.props.i18n.language,\n          xVariable: undefined,\n          yVariable: undefined\n        });\n        d3.select(\"#linearregressionsvg\").remove();\n      }\n    }\n    /**\n     * Creates zwo dropdowns and scatterplot with regression line\n     * @return {JSX}\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"linearregression\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }), React.createElement(DropdownMenu, {\n        id: \"xAxis\",\n        listItems: this.props.variables,\n        selectItem: this.selectXAxis,\n        selectedItem: this.state.xVariable,\n        defaultText: this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }), React.createElement(DropdownMenu, {\n        id: \"yAxis\",\n        listItems: this.props.variables,\n        selectItem: this.selectYAxis,\n        selectedItem: this.state.yVariable,\n        defaultText: this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LinearRegression;\n}(Component);\n\nvar LocalizedLinearRegression = withTranslation()(LinearRegression);\nexport default LocalizedLinearRegression;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/LinearRegression.js"],"names":["React","Component","d3","DropdownMenu","withTranslation","LinearRegression","state","xVariable","undefined","yVariable","language","props","i18n","returnData","item","xVarName","name","yVarName","xValues","attributes","yValues","xData","year","yData","x","y","makeDataArrays","xArray","yArray","hospitals","map","obj","data","push","createChartdata","dataArrays","n","length","xSum","ySum","i","xMean","yMean","xvariance","yvariance","term1","term2","b1","b0","yhat","selectXAxis","setState","updateChart","selectYAxis","tableDataLoaded","drawChart","select","remove","w","h","padding","dataset","newline","line","d","xScale","yScale","scaleLinear","domain","max","range","min","xAxis","axisBottom","scale","yAxis","axisLeft","ticks","svg","append","attr","selectAll","enter","datum","call","tableDataGenerated","requestData","variables","t","LocalizedLinearRegression"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as d3 from \"d3\";\nimport './LinearRegression.css'\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport { withTranslation } from 'react-i18next';\n\nclass LinearRegression extends Component {\n\n\tstate = {\n        xVariable : undefined,\n        yVariable : undefined,\n\t\tlanguage: this.props.i18n.language,\n\t};\n\n\tcomponentDidUpdate(){\n\t\t// check if response is there and draw chart if so\n\t\tif(this.props.tableDataLoaded)\n\t\t\tthis.drawChart();\n\t}\n\n\t/**\n\t* Returns the values stored in a this.props.objects canton/hospital\n\t* @param  {Canton || Hospital Object} item The object to extract the values from\n\t* @return {Object} with x: Data for the xVariable and y: Data for the yVariable\n\t*/\n   returnData = (item) => {\n\t   let xVarName = this.state.xVariable.name;\n\t   let yVarName = this.state.yVariable.name;\n\t   let xValues = item.attributes[xVarName];\n\t   let yValues = item.attributes[yVarName];\n\t   let xData = xValues[this.props.year];\n\t   let yData = yValues[this.props.year];\n\t   return {\n\t\t   x: xData,\n\t\t   y: yData,\n\t   };\n   }\n\n   /**\n\t* Returns an Object with arrays containing all Values of the chosen variables\n\t* @return {Object} with x: all data values for the xVariable and y: all data values for the yVariable\n\t*/\n   makeDataArrays = () => {\n\t   let xArray = [];\n\t   let yArray = [];\n\t   this.props.hospitals.map((obj) => {\n\t\t   let data = this.returnData(obj);\n\t\t   if (data.x && data.y){ // sort out undefined values for given year\n\t\t\t\txArray.push(data.x);\n\t\t\t\tyArray.push(data.y);\n\t\t   }\n\t   })\n\t   return {\n\t\t   x: xArray,\n\t\t   y: yArray,\n\t   };\n   }\n\n\t/**\n\t * Draws a Scatterplot with a regression line\n\t */\n\tdrawChart() {\n\t\t//remove old svg\n\t\td3.select(\"#linearregressionsvg\").remove();\n\n\t\tvar w = 960;\n\t\tvar h = 500;\n\t\tvar padding = 30;\n\n\t\t//create data points\n\t\tvar dataset = this.createChartdata();\n\n\t\t// function for creation of regression line\n\t\tvar newline = d3.line()\n\t\t\t.x(function(d) {\n\t\t\t\treturn xScale(d.x);\n\t\t\t})\n\t\t\t.y(function(d) {\n\t\t\t\treturn yScale(d.yhat);\n\t\t\t});\n\n\t\t// Define Scales\n\t\tvar xScale = d3.scaleLinear()\n\t\t\t.domain([0,d3.max(dataset, function(d){\n\t\t\t\treturn d.x;\n\t\t\t})])\n\t\t\t.range([padding,w - padding*2]);\n\t\tvar yScale = d3.scaleLinear()\n\t\t\t.domain([\n\t\t\t\td3.min(dataset, function(d){\n\t\t\t\t\treturn(d.y);\n\t\t\t\t}),\n\t\t\t\td3.max(dataset, function(d){\n\t\t\t  \t\treturn d.y;\n\t\t\t\t})\n\t\t\t]) //y range is reversed because svg\n\t\t\t.range([h-padding, padding]);\n\n\t\t// Define Axis\n\t\tvar xAxis = d3.axisBottom()\n\t\t\t.scale(xScale);\n\n\t\tvar yAxis = d3.axisLeft()\n\t\t\t.scale(yScale)\n\t\t\t.ticks(5);\n\n\t\t// create svg\n\t\tvar svg = d3.select(\"#linearregression\")\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"id\",\"linearregressionsvg\")\n\t\t\t.attr(\"width\",w)\n\t\t\t.attr(\"height\", h);\n\n\t\t// cut off datapoints that are outside the axis\n\t\tsvg.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"chart-area\")\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", padding)\n\t\t\t.attr(\"y\", padding)\n\t\t\t.attr(\"width\", w-padding * 3)\n\t\t\t.attr(\"height\", h-padding *2);\n\n\t\t// append data points\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"id\", \"circles\")\n\t\t\t.attr(\"clip-path\", \"url(#chart-area)\")\n\t\t\t.selectAll(\"circle\")\n\t\t\t.data(dataset)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", \"dot\")\n\t\t\t.attr(\"cx\", function(d){\n\t\t\t\treturn xScale(d.x);\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d){\n\t\t\t\treturn yScale(d.y);\n\t\t\t})\n\t\t\t.attr(\"r\", 3.5);\n\n\t\t// append regression line\n\t\tsvg.append(\"path\")\n\t\t\t.datum(dataset)\n\t\t\t.attr(\"clip-path\", \"url(#chart-area)\")\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr(\"d\", newline);\n\n\t\t// append Axes\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", \"translate(0,\" + (h-padding) + \")\")\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + padding + \",0)\")\n\t\t\t.call(yAxis);\n\n\t\t// call this to set back and prepare for reupdate\n\t\tthis.props.tableDataGenerated();\n\t}\n\n\tcreateChartdata = () => {\n\t\tlet dataArrays = this.makeDataArrays();\n\t\tvar x = dataArrays.x;\n\t\tvar y = dataArrays.y;\n\t\tvar n = x.length;\n\n\t\t// create x and y sums\n\t\tlet xSum = 0;\n\t\tlet ySum = 0;\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\txSum += x[i]\n\t\t\tySum += y[i]\n\t\t}\n\n\t\t// calculate mean x and y\n\t\tlet xMean = xSum / n;\n\t\tlet yMean = ySum / n;\n\n\t\t// calculate coefficients\n\t\tvar xvariance = 0;\n\t\tvar yvariance = 0;\n\t\tvar term1 = 0;\n\t\tvar term2 = 0;\n\t\tfor (i = 0; i < x.length; i++) {\n\t\t\txvariance = x[i] - xMean;\n\t\t\tyvariance = y[i] - yMean;\n\t\t\tterm1 += xvariance * yvariance;\n\t\t\tterm2 += xvariance * xvariance;\n\t\t\t}\n\t\tvar b1 = term1 / term2;\n\t\tvar b0 = yMean - (b1 * xMean);\n\n\t\t// perform regression\n\t\tlet yhat = [];\n\n\t\t// fit line using coeffs\n\t\tfor (i = 0; i < x.length; i++) {\n\t\t\tyhat.push(b0 + (x[i] * b1));\n\t\t}\n\n\t\t// create actual data objects\n\t\tvar data = [];\n\t\tfor (i = 0; i < y.length; i++) {\n\t\t\tdata.push({\n\t\t\t\t\"yhat\": yhat[i],\n\t\t\t\t\"y\": y[i],\n\t\t\t\t\"x\": x[i]\n\t\t\t})\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n    * defining behaviour on dropdown click\n\t* write the selected variable to state and update chart on X axis\n    */\n    selectXAxis = (item) => {\n\t\tthis.setState({\n\t\t\txVariable : item,\n\t\t}, () => {\n\t\t\tthis.updateChart();\n\t\t});\n\t}\n\n\t/**\n    * defining behaviour on dropdown click\n\t* write the selected variable to state and update chart on Y axis\n    */\n    selectYAxis = (item) => {\n\t\tthis.setState({\n\t\t\tyVariable : item,\n\t\t}, () => {\n\t\t\tthis.updateChart();\n\t\t});\n\t}\n\n\t/**\n\t* check if both x and y variable have been selected\n\t* update selected variables in state if so\n\t*/\n\tupdateChart() {\n\t\tif(this.state.xVariable && this.state.yVariable)\n\t\t\tthis.props.requestData([this.state.xVariable,this.state.yVariable]);\n\t}\n\n\tcomponentWillUpdate(){\n\t\t// if the language is changed,set back variables and remove chart\n\t\tif (this.props.i18n.language !== this.state.language){\n\t\t\tthis.setState({\n\t\t\t\tlanguage : this.props.i18n.language,\n\t\t\t\txVariable: undefined,\n\t\t\t\tyVariable: undefined,\n\t\t\t});\n\t\t\td3.select(\"#linearregressionsvg\").remove();\n\t\t}\n\t}\n\n\t/**\n\t * Creates zwo dropdowns and scatterplot with regression line\n\t * @return {JSX}\n\t */\n\trender() {\n        return (\n        \t<div>\n\t\t\t\t<div id=\"linearregression\"></div>\n\t\t\t\t<DropdownMenu id=\"xAxis\"\n                    listItems={this.props.variables}\n                    selectItem={this.selectXAxis}\n                    selectedItem={this.state.xVariable}\n                    defaultText={this.props.t('dropDowns.variablesFallback')}\n                />\n\t\t\t\t<DropdownMenu id=\"yAxis\"\n                    listItems={this.props.variables}\n                    selectItem={this.selectYAxis}\n                    selectedItem={this.state.yVariable}\n                    defaultText={this.props.t('dropDowns.variablesFallback')}\n                />\n\t\t\t</div>\n\n        )\n\t}\n}\n\nconst LocalizedLinearRegression = withTranslation()(LinearRegression);\nexport default LocalizedLinearRegression;\n"]},"metadata":{},"sourceType":"module"}