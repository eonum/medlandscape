{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css';\n\nvar ControlPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlPanel, _Component);\n\n  function ControlPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cantonVars: [],\n      hospitalVars: [],\n      enums: [],\n      selectedEnum: undefined\n    };\n\n    _this.fetchData = function (variable) {\n      var name = variable.name,\n          variable_model = variable.variable_model;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      var query = key + \"?variables=\";\n      query += encodeURIComponent(name + \"$\" + _this.state.enums[7].name);\n\n      if (_this.state.selectedEnum !== undefined && key === \"hospitals\") {\n        query += encodeURIComponent(\"$\" + _this.state.selectedEnum.name);\n      }\n\n      return _this.props.fetchData(query);\n    };\n\n    _this.setEnum = function (variable) {\n      _this.setState({\n        selectedEnum: variable\n      }, function () {\n        _this.fetchData(_this.props.selectedVariable);\n      });\n    };\n\n    _this.setVariable = function (item) {\n      _this.setState({\n        hasLoaded: false\n      }, function () {\n        _this.props.setVariable(item);\n      });\n    };\n\n    _this.setTabView = function (view) {\n      var oldView = _this.props.view;\n\n      if (oldView !== view) {\n        _this.props.setView(view);\n\n        document.getElementById('t' + oldView).classList.toggle('selectedTab');\n        document.getElementById('t' + view).classList.toggle('selectedTab');\n      }\n    };\n\n    _this.setMapView = function (view) {\n      _this.props.setMapView(view);\n    };\n\n    return _this;\n  }\n\n  _createClass(ControlPanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (this.props.variables !== prevProps.variables) {\n        var cantonVars = [],\n            hospitalVars = [],\n            enums = []; // filtering the different variables\n\n        this.props.variables.forEach(function (variable) {\n          if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n            if (variable.name !== \"Ort\" && variable.name !== \"Adr\") {\n              // because those don't make much sense as they are attached to any hospital either way\n              hospitalVars.push(variable);\n            }\n          } else if (variable.variable_model === \"Canton\") {\n            cantonVars.push(variable);\n          } else {\n            enums.push(variable);\n          }\n        });\n        this.setState({\n          cantonVars: cantonVars,\n          hospitalVars: hospitalVars,\n          enums: enums\n        });\n      }\n\n      if (!this.props.hasLoaded && prevProps.hasLoaded) {\n        if (this.props.selectedVariable !== prevProps.selectedVariable) {\n          console.log(\"FETCHING on CP didUpdate\");\n          this.fetchData(this.props.selectedVariable).then(function () {\n            _this2.setState({\n              hasLoaded: true\n            });\n          });\n        } else {\n          console.log(\"NOTHING on CP didUpdate\");\n          this.setState({\n            hasLoaded: true\n          });\n        }\n      }\n    }\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          t = _this$props.t,\n          hasLoaded = _this$props.hasLoaded,\n          unfilteredHospitals = _this$props.unfilteredHospitals,\n          filterByEnum = _this$props.filterByEnum,\n          filterByType = _this$props.filterByType,\n          year = _this$props.year,\n          selectedVariable = _this$props.selectedVariable,\n          mapView = _this$props.mapView;\n      var _this$state = this.state,\n          hospitalVars = _this$state.hospitalVars,\n          cantonVars = _this$state.cantonVars,\n          enums = _this$state.enums,\n          selectedEnum = _this$state.selectedEnum;\n      var selectedCanton = {},\n          selectedHospital = {}; // setting selectedItem for Dropdowns\n\n      if (mapView === 1) {\n        selectedHospital = selectedVariable;\n        selectedCanton = undefined;\n      } else {\n        selectedCanton = selectedVariable;\n        selectedHospital = undefined;\n      }\n\n      var mapViewHospitals = React.createElement(\"div\", {\n        className: \"mapViewHospitals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(HospitalTypeFilter, {\n        hospitals: unfilteredHospitals,\n        filter: filterByType,\n        selectedYear: year,\n        hasLoaded: hasLoaded,\n        selectedVariable: selectedVariable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.setVariable,\n        selectedItem: selectedHospital,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, t('mapView.filter')), React.createElement(FilterEditor, {\n        hospitals: unfilteredHospitals,\n        filter: filterByEnum,\n        hasLoaded: hasLoaded,\n        selectedYear: year,\n        selectedEnum: selectedEnum,\n        variables: enums,\n        setEnum: this.setEnum,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }));\n      var mapViewCantons = React.createElement(\"div\", {\n        className: \"mapViewCantons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.setVariable,\n        selectedItem: selectedCanton,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }));\n      var mapViews = React.createElement(\"div\", {\n        className: \"view1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, t('mapView.title')), React.createElement(\"div\", {\n        className: \"viewSwitcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"l1\",\n        className: mapView === 1 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, t('mapView.hospitals')), React.createElement(\"p\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"|\"), React.createElement(\"p\", {\n        id: \"l2\",\n        className: mapView === 2 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, t('mapView.cantons')))), this.props.mapView === 1 ? mapViewHospitals : mapViewCantons);\n      var tableView = React.createElement(\"div\", {\n        className: \"view2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, t('tableView.title'))));\n      var graphView = React.createElement(\"div\", {\n        className: \"view3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, t('graphView.title'))));\n      var controlPanelView;\n\n      switch (this.props.view) {\n        case 1:\n          controlPanelView = mapViews;\n          break;\n\n        case 2:\n          controlPanelView = tableView;\n          break;\n\n        case 3:\n          controlPanelView = graphView;\n          break;\n\n        default:\n          controlPanelView = mapViews;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tabs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"t1\",\n        className: \"tab selectedTab\",\n        onClick: this.setTabView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t2\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t3\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tabContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, controlPanelView));\n    }\n  }]);\n\n  return ControlPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js"],"names":["React","Component","DropdownMenu","FilterEditor","HospitalTypeFilter","withTranslation","ControlPanel","state","cantonVars","hospitalVars","enums","selectedEnum","undefined","fetchData","variable","name","variable_model","key","query","encodeURIComponent","props","setEnum","setState","selectedVariable","setVariable","item","hasLoaded","setTabView","view","oldView","setView","document","getElementById","classList","toggle","setMapView","prevProps","variables","forEach","variable_type","push","console","log","then","t","unfilteredHospitals","filterByEnum","filterByType","year","mapView","selectedCanton","selectedHospital","mapViewHospitals","mapViewCantons","mapViews","bind","tableView","graphView","controlPanelView","LocalizedControlPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css'\n\n\n\nclass ControlPanel extends Component {\n\n    state = {\n        cantonVars : [],\n        hospitalVars : [],\n        enums : [],\n        selectedEnum : undefined,\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.variables !== prevProps.variables) {\n            let cantonVars = [], hospitalVars = [], enums = [];\n\n            // filtering the different variables\n            this.props.variables.forEach((variable) => {\n                if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n                    if (variable.name !== \"Ort\" && variable.name !== \"Adr\") { // because those don't make much sense as they are attached to any hospital either way\n                        hospitalVars.push(variable);\n                    }\n                } else if (variable.variable_model === \"Canton\") {\n                    cantonVars.push(variable);\n                } else {\n                    enums.push(variable);\n                }\n            });\n\n            this.setState({\n                cantonVars : cantonVars,\n                hospitalVars : hospitalVars,\n                enums : enums,\n            });\n        }\n\n\n        if (!this.props.hasLoaded && prevProps.hasLoaded) {\n            if (this.props.selectedVariable !== prevProps.selectedVariable) {\n                console.log(\"FETCHING on CP didUpdate\");\n                this.fetchData(this.props.selectedVariable).then(() => {\n                    this.setState({\n                        hasLoaded : true\n                    })\n                });\n            } else {\n                console.log(\"NOTHING on CP didUpdate\");\n                this.setState({\n                    hasLoaded : true\n                })\n            }\n        }\n    }\n\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchData = (variable) => {\n        const {name, variable_model} = variable;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        let query = key + \"?variables=\";\n        query += encodeURIComponent(name + \"$\" + this.state.enums[7].name);\n        if (this.state.selectedEnum !== undefined && key === \"hospitals\") {\n            query += encodeURIComponent(\"$\" + this.state.selectedEnum.name);\n        }\n        return this.props.fetchData(query);\n    }\n\n    /**\n     * Sets the state for selected Enum variable\n     * Gets data after changing it\n     * @param {Variable Object} variable The chosen variable.\n     */\n    setEnum = (variable) => {\n        this.setState({\n            selectedEnum : variable\n        }, () => {\n            this.fetchData(this.props.selectedVariable);\n        });\n    }\n\n    /**\n     * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n     * then calls fetchData to fetch data from the API.\n     * @param  {Variable object} item The selected variable.\n     */\n    setVariable = (item) => {\n        this.setState({\n            hasLoaded : false\n        }, () => {\n            this.props.setVariable(item);\n        })\n    }\n\n    /**\n     * sets the view to be displayed on the ControlPanel.\n     */\n    setTabView = (view) => {\n        let oldView = this.props.view;\n        if (oldView !== view) {\n            this.props.setView(view);\n            document.getElementById('t' + oldView).classList.toggle('selectedTab');\n            document.getElementById('t' + view).classList.toggle('selectedTab');\n        }\n    }\n\n    /**\n     * Sets the view to be displayed on the 'Maps' tab of the ControlPanel.\n     */\n    setMapView = (view) => {\n        this.props.setMapView(view);\n    }\n\n    render() {\n\n        const {t, hasLoaded, unfilteredHospitals, filterByEnum, filterByType, year, selectedVariable, mapView} = this.props;\n        const {hospitalVars, cantonVars, enums, selectedEnum} = this.state;\n\n        let selectedCanton = {}, selectedHospital = {};\n\n        // setting selectedItem for Dropdowns\n        if (mapView === 1) {\n            selectedHospital = selectedVariable;\n            selectedCanton = undefined;\n        } else {\n            selectedCanton = selectedVariable;\n            selectedHospital = undefined;\n        }\n\n        let mapViewHospitals = (\n            <div className=\"mapViewHospitals\">\n                <HospitalTypeFilter\n                    hospitals={unfilteredHospitals}\n                    filter={filterByType}\n                    selectedYear={year}\n                    hasLoaded={hasLoaded}\n                    selectedVariable={selectedVariable}\n                />\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"hospitalVars\"\n                    listItems={hospitalVars}\n                    selectItem={this.setVariable}\n                    selectedItem={selectedHospital}\n                    defaultText={t('dropDowns.variablesFallback')}\n                />\n                <p>{t('mapView.filter')}</p>\n                <FilterEditor\n                    hospitals={unfilteredHospitals}\n                    filter={filterByEnum}\n                    hasLoaded={hasLoaded}\n                    selectedYear={year}\n                    selectedEnum={selectedEnum}\n                    variables={enums}\n                    setEnum={this.setEnum}\n                />\n            </div>\n        )\n\n        let mapViewCantons = (\n            <div className=\"mapViewCantons\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.setVariable} selectedItem={selectedCanton} defaultText={t('dropDowns.variablesFallback')}/>\n            </div>\n        )\n\n        let mapViews = (\n            <div className=\"view1\">\n                <div className=\"header\">\n                    <h1>{t('mapView.title')}</h1>\n                    <div className=\"viewSwitcher\">\n                        <p id=\"l1\" className={(mapView === 1) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 1)}>{t('mapView.hospitals')}</p>\n                        <p className=\"separator\">|</p>\n                        <p id=\"l2\" className={(mapView === 2) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 2)}>{t('mapView.cantons')}</p>\n                    </div>\n                </div>\n                {\n                    (this.props.mapView === 1)\n                    ? mapViewHospitals\n                    : mapViewCantons\n                }\n            </div>\n        );\n\n        let tableView = (\n            <div className=\"view2\">\n                <div className=\"header\">\n                    <h1>{t('tableView.title')}</h1>\n                </div>\n            </div>\n        );\n\n        let graphView = (\n            <div className=\"view3\">\n                <div className=\"header\">\n                    <h1>{t('graphView.title')}</h1>\n                </div>\n                    {/**<div className=\"graphView\">\n                        <p>{t('mapView.variables')}</p>\n                        <DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.setVariable} selectedItem={selectedHospital}  defaultText={t('dropDowns.variablesFallback')}/>\n                    </div>**/}\n            </div>\n        );\n\n        let controlPanelView;\n        switch(this.props.view) {\n            case 1:\n                controlPanelView = mapViews;\n                break;\n            case 2:\n                controlPanelView = tableView;\n                break;\n            case 3:\n                controlPanelView = graphView;\n                break;\n            default:\n                controlPanelView = mapViews;\n        }\n\n        return (\n\t\t\t<div className=\"control-panel\">\n                <div className=\"tabs\">\n                    <div id=\"t1\" className=\"tab selectedTab\" onClick={this.setTabView.bind(this, 1)}></div>\n                    <div id=\"t2\" className=\"tab\" onClick={this.setTabView.bind(this, 2)}></div>\n                    <div id=\"t3\" className=\"tab\" onClick={this.setTabView.bind(this, 3)}></div>\n                </div>\n                <div className=\"tabContent\">\n                    {controlPanelView}\n                </div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;\n"]},"metadata":{},"sourceType":"module"}