{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/ResultTable/ResultTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '../../Table/Table.js';\nimport './ResultTable.css';\nimport { withTranslation } from 'react-i18next';\n/**\n * Represents the part of the table which displays the results\n */\n\nvar ResultTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultTable, _Component);\n\n  function ResultTable(props) {\n    var _this;\n\n    _classCallCheck(this, ResultTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResultTable).call(this, props));\n\n    _this.canTableBeGenerated = function () {\n      var shouldGenerate = true; // check if in each hospital dropdown something was selected\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.props.selectedHospitals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var hosp = _step.value;\n\n          if (!hosp || Object.keys(hosp).length === 0 && hosp.constructor === Object) {\n            shouldGenerate = false;\n            break;\n          }\n        } // check the same for variables\n\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (shouldGenerate) {\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = _this.props.selectedVariables[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var variable = _step2.value;\n\n            if (!variable || Object.keys(variable).length === 0 && variable.constructor === Object) {\n              shouldGenerate = false;\n              break;\n            } // also check if for the selected variables the data was fetched\n\n\n            if (typeof _this.props.hospitalData[0].attributes[variable.name] === 'undefined') {\n              shouldGenerate = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      }\n\n      if (!shouldGenerate) {\n        window.alert(_this.props.t('tableView.missingData'));\n      }\n\n      return shouldGenerate;\n    };\n\n    _this.state = {\n      resultTableData: []\n    };\n    return _this;\n  }\n  /**\n   * canTableBeGenerated - checks if in each dropdown something is selected,\n   *  and if the data has been fetched for these selected things.\n   *\n   * @return {bool} true, if everything is selected and the data is loaded,\n   *  false otherwise\n   */\n\n\n  _createClass(ResultTable, [{\n    key: \"componentDidUpdate\",\n\n    /**\n     * componentDidUpdate - generates a 2D-array of values taken from selectedVariables and\n     *  selectedHospitals and sets the state.\n     *\n     * @return {type}  description\n     */\n    value: function componentDidUpdate() {\n      var tableData = [];\n\n      if (this.props.dataLoaded) {\n        if (this.canTableBeGenerated()) {\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n\n          try {\n            for (var _iterator3 = this.props.selectedHospitals[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var hosp = _step3.value;\n              var newRow = [];\n              var currentHosp = void 0;\n              var _iteratorNormalCompletion4 = true;\n              var _didIteratorError4 = false;\n              var _iteratorError4 = undefined;\n\n              try {\n                for (var _iterator4 = this.props.hospitalData[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                  var hosp2 = _step4.value;\n\n                  if (hosp.name === hosp2.name) {\n                    currentHosp = hosp2;\n                    break;\n                  }\n                }\n              } catch (err) {\n                _didIteratorError4 = true;\n                _iteratorError4 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                    _iterator4.return();\n                  }\n                } finally {\n                  if (_didIteratorError4) {\n                    throw _iteratorError4;\n                  }\n                }\n              }\n\n              for (var i = 0; i < this.props.selectedVariables.length; i++) {\n                var variable = this.props.selectedVariables[i];\n\n                if (variable.is_time_series) {\n                  // const latestYear = Object.keys(currentHosp.attributes[variable.name])\n                  //     .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n                  var year = this.props.selectedYears[i];\n                  var obj = currentHosp.attributes[variable.name];\n                  var value = \"\";\n\n                  if (typeof obj[year] !== 'undefined') {\n                    value = obj[year];\n                  }\n\n                  newRow.push(value);\n                } else {\n                  newRow.push(currentHosp.attributes[variable.name]);\n                }\n              }\n\n              tableData.push(newRow);\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n\n          this.setState({\n            resultTableData: tableData\n          });\n          this.props.changeAcknowledged();\n          this.props.submitTableData(tableData);\n        }\n\n        this.props.dataGenerated();\n      }\n    }\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var table;\n\n      if (!this.props.selectionChanged) {\n        table = React.createElement(Table, {\n          tableData: this.state.resultTableData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"resultTableData\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, table);\n    }\n  }]);\n\n  return ResultTable;\n}(Component);\n/**\n* PropTypes\n*\n* selectedHospitals: array containing all selected hospitals\n* selectedVariables: array containing all selected variables\n* hospitals: array containing all hospitals and values of the selected variables\n* submitTableData: function that is called to give the generated 2D-array to\n*   the parent component\n*/\n\n\nResultTable.propTypes = {\n  selectedHospitals: PropTypes.array.isRequired,\n  selectedVariables: PropTypes.array.isRequired,\n  selectedYears: PropTypes.array.isRequired,\n  hospitalData: PropTypes.array.isRequired,\n  dataLoaded: PropTypes.bool.isRequired,\n  submitTableData: PropTypes.func.isRequired,\n  selectionChanged: PropTypes.bool.isRequired,\n  changeAcknowledged: PropTypes.func.isRequired\n};\nvar LocalizedResultTable = withTranslation()(ResultTable);\nexport default LocalizedResultTable;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/ResultTable/ResultTable.js"],"names":["React","Component","PropTypes","Table","withTranslation","ResultTable","props","canTableBeGenerated","shouldGenerate","selectedHospitals","hosp","Object","keys","length","constructor","selectedVariables","variable","hospitalData","attributes","name","window","alert","t","state","resultTableData","tableData","dataLoaded","newRow","currentHosp","hosp2","i","is_time_series","year","selectedYears","obj","value","push","setState","changeAcknowledged","submitTableData","dataGenerated","table","selectionChanged","propTypes","array","isRequired","bool","func","LocalizedResultTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '../../Table/Table.js'\nimport './ResultTable.css';\nimport { withTranslation } from 'react-i18next';\n\n/**\n * Represents the part of the table which displays the results\n */\nclass ResultTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            resultTableData: []\n        }\n    }\n\n    /**\n     * canTableBeGenerated - checks if in each dropdown something is selected,\n     *  and if the data has been fetched for these selected things.\n     *\n     * @return {bool} true, if everything is selected and the data is loaded,\n     *  false otherwise\n     */\n    canTableBeGenerated = () => {\n        let shouldGenerate = true;\n\n        // check if in each hospital dropdown something was selected\n        for (let hosp of this.props.selectedHospitals) {\n            if (!hosp || (Object.keys(hosp).length === 0 && hosp.constructor === Object)) {\n                shouldGenerate = false;\n                break;\n            }\n        }\n        // check the same for variables\n        if (shouldGenerate) {\n            for (let variable of this.props.selectedVariables) {\n                if (!variable || (Object.keys(variable).length === 0 && variable.constructor === Object)) {\n                    shouldGenerate = false;\n                    break;\n                }\n                // also check if for the selected variables the data was fetched\n                if (typeof(this.props.hospitalData[0].attributes[variable.name]) === 'undefined') {\n                    shouldGenerate = false;\n                    break;\n                }\n            }\n        }\n        if (!shouldGenerate) {\n            window.alert(this.props.t('tableView.missingData'));\n        }\n        return shouldGenerate;\n    }\n\n    /**\n     * componentDidUpdate - generates a 2D-array of values taken from selectedVariables and\n     *  selectedHospitals and sets the state.\n     *\n     * @return {type}  description\n     */\n    componentDidUpdate() {\n        let tableData = [];\n\n        if (this.props.dataLoaded) {\n            if (this.canTableBeGenerated()) {\n                for (let hosp of this.props.selectedHospitals) {\n                    let newRow = [];\n                    let currentHosp;\n                    for (let hosp2 of this.props.hospitalData) {\n                        if (hosp.name === hosp2.name) {\n                            currentHosp = hosp2;\n                            break;\n                        }\n                    }\n                    for (let i = 0; i < this.props.selectedVariables.length; i++) {\n                        let variable = this.props.selectedVariables[i];\n                        if (variable.is_time_series) {\n                            // const latestYear = Object.keys(currentHosp.attributes[variable.name])\n                            //     .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n                            const year = this.props.selectedYears[i];\n                            const obj = currentHosp.attributes[variable.name];\n                            let value = \"\";\n                            if (typeof obj[year] !== 'undefined') {\n                                value = obj[year];\n                            }\n                            newRow.push(value);\n                        } else {\n                            newRow.push(currentHosp.attributes[variable.name]);\n                        }\n                    }\n                    tableData.push(newRow);\n                }\n                this.setState({\n                    resultTableData: tableData\n                })\n                this.props.changeAcknowledged();\n                this.props.submitTableData(tableData);\n            }\n            this.props.dataGenerated()\n        }\n    }\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    render() {\n        let table;\n        if (!this.props.selectionChanged) {\n            table = (<Table tableData={this.state.resultTableData} />);\n        }\n        return (\n            <div className=\"resultTableData\">\n                {table}\n            </div>\n        );\n    }\n}\n\n/**\n* PropTypes\n*\n* selectedHospitals: array containing all selected hospitals\n* selectedVariables: array containing all selected variables\n* hospitals: array containing all hospitals and values of the selected variables\n* submitTableData: function that is called to give the generated 2D-array to\n*   the parent component\n*/\nResultTable.propTypes = {\n    selectedHospitals: PropTypes.array.isRequired,\n    selectedVariables: PropTypes.array.isRequired,\n    selectedYears: PropTypes.array.isRequired,\n    hospitalData: PropTypes.array.isRequired,\n    dataLoaded: PropTypes.bool.isRequired,\n    submitTableData: PropTypes.func.isRequired,\n    selectionChanged: PropTypes.bool.isRequired,\n    changeAcknowledged: PropTypes.func.isRequired\n}\n\nconst LocalizedResultTable = withTranslation()(ResultTable);\nexport default LocalizedResultTable;\n"]},"metadata":{},"sourceType":"module"}