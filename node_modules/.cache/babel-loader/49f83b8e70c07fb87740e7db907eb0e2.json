{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js';\nimport CentralPanel from './components/CentralPanel/CentralPanel.js';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js';\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      hospitalsByEnums: [],\n      hospitalsByType: [],\n      filteredHospitals: [],\n      years: [],\n      selectedYear: \"\",\n      view: 1,\n      mapView: 1,\n      graphView: 1,\n      mapView1Request: \"\",\n      mapView2Request: \"\",\n      view2Request: \"\",\n      graphView1Request: \"\",\n      graphView2Request: \"\",\n      previousRequest: \"\",\n      hasLoaded: false,\n      tableDataLoaded: false\n      /**\n      * Calls the API with specific query\n      * @param {String} key String value that is either hospitals or cantons.\n      * @param  {String} query The specific query to use for the API call.\n      */\n\n    };\n\n    _this.applyVariables = function (key, query) {\n      return _this.apiCall(query).then(function (results) {\n        var _this$setState;\n\n        _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"hasLoaded\", false), _this$setState));\n      }).then(function () {\n        if (_this.state.view !== 1) {\n          // other than the Map view\n          _this.setState({\n            hasLoaded: true\n          });\n        } else {\n          // The Map view(s) specific\n          var years = _this.getYears(_this.state[key]);\n\n          _this.setState({\n            years: years,\n            selectedYear: years[0],\n            hasLoaded: _this.state.mapView !== 1\n          }, function () {\n            if (_this.state.mapView === 1) {\n              _this.filterHospitals(); // only needed for hospitals\n\n            }\n          });\n        }\n      }).then(function () {\n        var _this$setState2;\n\n        var viewXRequest = \"\";\n\n        switch (_this.state.view) {\n          case 1:\n            viewXRequest = _this.state.mapView === 1 ? \"mapView1Request\" : \"mapView2Request\";\n            break;\n\n          case 2:\n            viewXRequest = \"view2Request\";\n            break;\n\n          case 3:\n            viewXRequest = _this.state.graphView === 1 ? \"mapView1Request\" : \"mapView2Request\";\n            break;\n\n          default:\n            viewXRequest = _this.state.mapView === 1 ? \"mapView1Request\" : \"mapView2Request\";\n            break;\n        }\n\n        _this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, viewXRequest, query), _defineProperty(_this$setState2, \"previousRequest\", query), _this$setState2));\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + _this.props.i18n.language + apiRequest + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr = []; // fetches all Variables from the API\n\n      _this.apiCall(\"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        }); // the \"type\" variable which is loaded with every request\n\n\n        var typeVar = result.filter(function (variable) {\n          return variable.name === \"Typ\";\n        }); // the default variable chosen when loading the app\n\n        _this.setVariable(result[1]);\n\n        var query = \"hospitals?variables=\";\n        query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n\n        _this.applyVariables(\"hospitals\", query);\n      });\n    };\n\n    _this.setVariable = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.filterHospitals = function () {\n      var _this$state = _this.state,\n          hospitalsByEnums = _this$state.hospitalsByEnums,\n          hospitalsByType = _this$state.hospitalsByType,\n          hospitals = _this$state.hospitals;\n      var filteredHospitals = [];\n\n      if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n        // in case of no matches, there would be no need to do intersection\n        if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n          // we have to compare names because the attribute of each hospital has a different length\n          for (var i = 0; i < hospitalsByType.length; i++) {\n            for (var j = 0; j < hospitalsByEnums.length; j++) {\n              if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                filteredHospitals.push(hospitalsByEnums[j]);\n              }\n            }\n          }\n        } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n          filteredHospitals = hospitalsByType > hospitalsByEnums ? hospitalsByType : hospitalsByEnums;\n        } else {\n          filteredHospitals = hospitals;\n        }\n      }\n\n      _this.setState({\n        filteredHospitals: filteredHospitals,\n        hasLoaded: true\n      });\n    };\n\n    _this.getYears = function (objects) {\n      var _this$state$selectedV = _this.state.selectedVariable,\n          variable_model = _this$state$selectedV.variable_model,\n          is_time_series = _this$state$selectedV.is_time_series,\n          name = _this$state$selectedV.name;\n      var maxYears = [],\n          years;\n\n      for (var i = 0; i < objects.length; i++) {\n        years = Object.keys(objects[i].attributes[name]);\n        maxYears = years.length > maxYears.length ? years : maxYears;\n      }\n\n      return maxYears;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.setView = function (view) {\n      _this.setState({\n        view: view\n      });\n\n      var viewLastRequest;\n\n      switch (view) {\n        case expression:\n          break;\n\n        default:\n      }\n    };\n\n    _this.setMapView = function (view) {\n      _this.setState({\n        mapView: view\n      });\n    };\n\n    _this.setHospitalsByEnums = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByEnums: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        _this.filterHospitals();\n      });\n    };\n\n    _this.setHospitalsByType = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByType: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        _this.filterHospitals();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          selectedVariable = _this$state2.selectedVariable,\n          selectedHospitals = _this$state2.selectedHospitals,\n          selectedYear = _this$state2.selectedYear,\n          hasLoaded = _this$state2.hasLoaded,\n          view = _this$state2.view,\n          mapView = _this$state2.mapView,\n          hospitals = _this$state2.hospitals,\n          filteredHospitals = _this$state2.filteredHospitals,\n          cantons = _this$state2.cantons,\n          variables = _this$state2.variables,\n          years = _this$state2.years;\n      var variableIsTypeHospital = selectedVariable.variable_model === \"Hospital\";\n      var centralPanel = view !== 1 ? React.createElement(CentralPanel, {\n        view: view,\n        variables: variables,\n        hospitals: hospitals,\n        hasLoaded: hasLoaded,\n        fetchData: this.applyVariables,\n        objects: variableIsTypeHospital ? hospitals : cantons,\n        variableInfo: selectedVariable,\n        year: selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }) : null;\n      var slider;\n\n      if (years.length > 1 && view === 1) {\n        if (variableIsTypeHospital && mapView === 2) {\n          slider = null;\n        } else if (!variableIsTypeHospital && mapView === 1) {\n          slider = null;\n        } else {\n          slider = React.createElement(Slider, {\n            years: years,\n            selectedYear: selectedYear,\n            setYear: this.setYear,\n            hasLoaded: hasLoaded,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 295\n            },\n            __self: this\n          });\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(Maps, {\n        objects: variableIsTypeHospital ? filteredHospitals : cantons,\n        selectedVariable: selectedVariable,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        mapView: mapView,\n        setMapView: this.setMapView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }, React.createElement(ControlPanel, {\n        view: view,\n        setView: this.setView,\n        hospitals: hospitals,\n        setVariable: this.setVariable,\n        selectedVariable: selectedVariable,\n        variables: variables,\n        fetchData: this.applyVariables,\n        filterByEnum: this.setHospitalsByEnums,\n        filterByType: this.setHospitalsByType,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        mapView: mapView,\n        setMapView: this.setMapView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }), centralPanel, React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }), slider));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","Maps","withTranslation","ControlPanel","CentralPanel","LanguagePicker","Slider","InteractiveTable","apiURL","apiRequest","App","state","variables","cantons","hospitals","selectedVariable","hospitalsByEnums","hospitalsByType","filteredHospitals","years","selectedYear","view","mapView","graphView","mapView1Request","mapView2Request","view2Request","graphView1Request","graphView2Request","previousRequest","hasLoaded","tableDataLoaded","applyVariables","key","query","apiCall","then","results","setState","getYears","filterHospitals","viewXRequest","fetch","props","i18n","language","res","json","initApiCall","varResultArr","result","typeVar","filter","variable","name","setVariable","encodeURIComponent","item","tableDataGenerated","length","i","j","push","objects","variable_model","is_time_series","maxYears","Object","keys","attributes","setYear","year","setView","viewLastRequest","expression","setMapView","setHospitalsByEnums","selectedHospitals","setHospitalsByType","variableIsTypeHospital","centralPanel","slider","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js'\nimport CentralPanel from './components/CentralPanel/CentralPanel.js'\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js'\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables: [],\n        cantons : [],\n        hospitals : [],\n\n        selectedVariable : {},\n\n        hospitalsByEnums : [],\n        hospitalsByType : [],\n        filteredHospitals : [],\n\n        years : [],\n        selectedYear : \"\",\n\n        view : 1,\n        mapView : 1,\n        graphView : 1,\n\n        mapView1Request : \"\",\n        mapView2Request : \"\",\n        view2Request : \"\",\n        graphView1Request : \"\",\n        graphView2Request : \"\",\n        previousRequest : \"\",\n\n        hasLoaded : false,\n        tableDataLoaded : false\n    }\n\n    /**\n    * Calls the API with specific query\n    * @param {String} key String value that is either hospitals or cantons.\n    * @param  {String} query The specific query to use for the API call.\n    */\n    applyVariables = (key, query) => {\n        return this.apiCall(query).then((results) => {\n            this.setState({\n                [key] : results,\n                hasLoaded : false\n            });\n        }).then(() => {\n            if (this.state.view !== 1) {\n                // other than the Map view\n                this.setState({\n                    hasLoaded : true\n                });\n            } else {\n                // The Map view(s) specific\n                let years = this.getYears(this.state[key]);\n\n                this.setState({\n                    years : years,\n                    selectedYear : years[0],\n                    hasLoaded : (this.state.mapView !== 1)\n                }, () => {\n                    if (this.state.mapView === 1) {\n                        this.filterHospitals(); // only needed for hospitals\n                    }\n                })\n            }\n        }).then(() => {\n            let viewXRequest = \"\";\n\n            switch (this.state.view) {\n                case 1:\n                    viewXRequest = (this.state.mapView === 1) ? \"mapView1Request\" : \"mapView2Request\";\n                    break;\n                case 2:\n                    viewXRequest = \"view2Request\";\n                    break;\n                case 3:\n                    viewXRequest = (this.state.graphView === 1) ? \"mapView1Request\" : \"mapView2Request\";\n                    break;\n                default:\n                    viewXRequest = (this.state.mapView === 1) ? \"mapView1Request\" : \"mapView2Request\";\n                    break;\n            }\n\n            this.setState({\n                [viewXRequest] : query,\n                previousRequest : query\n            })\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + this.props.i18n.language + apiRequest + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        let varResultArr = [];\n\n        // fetches all Variables from the API\n        this.apiCall((\"variables\")).then((result) => {\n            this.setState({\n                variables : result,\n            });\n\n            // the \"type\" variable which is loaded with every request\n            let typeVar = result.filter((variable) => {\n                return (variable.name === \"Typ\");\n            })\n\n            // the default variable chosen when loading the app\n            this.setVariable(result[1]);\n            let query = \"hospitals?variables=\";\n            query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n            this.applyVariables(\"hospitals\", query);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * @param  {Variable object} item The selected variable.\n    */\n    setVariable = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n    }\n\n    /**\n     * Comment here please\n     */\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    /**\n     * Determines which Hospitals to display on the map according to fitlers.\n     * @return {Array} The array of hospitals to display.\n     */\n    filterHospitals = () => {\n        const {hospitalsByEnums, hospitalsByType, hospitals} = this.state;\n        let filteredHospitals = [];\n        if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n            // in case of no matches, there would be no need to do intersection\n            if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n                // we have to compare names because the attribute of each hospital has a different length\n                for (let i = 0; i < hospitalsByType.length; i++) {\n                    for (let j = 0; j < hospitalsByEnums.length; j++) {\n                        if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                            filteredHospitals.push(hospitalsByEnums[j]);\n                        }\n                    }\n                }\n            } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n                filteredHospitals = (hospitalsByType > hospitalsByEnums) ? hospitalsByType : hospitalsByEnums;\n            } else {\n                filteredHospitals = hospitals;\n            }\n        }\n\n        this.setState({\n            filteredHospitals : filteredHospitals,\n            hasLoaded : true\n        });\n    }\n\n    /**\n     * Returns list of available years for selected Variable.\n     * @return {Array} The available years.\n     */\n    getYears = (objects) => {\n        const {variable_model, is_time_series, name} = this.state.selectedVariable;\n        let maxYears = [], years;\n        for (var i = 0; i < objects.length; i++) {\n            years = Object.keys(objects[i].attributes[name]);\n            maxYears = (years.length > maxYears.length) ? years : maxYears;\n        }\n        return maxYears;\n    }\n\n    /**\n     * Setter for the selectedYear state variable.\n     * @param {String} year The selected year.\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year\n        })\n    }\n\n    /**\n     * Setter for the view state variable.\n     * @param {int} view The selected view.\n     */\n    setView = (view) => {\n        this.setState({\n            view : view\n        })\n\n        let viewLastRequest;\n        switch (view) {\n            case expression:\n\n                break;\n            default:\n\n        }\n    }\n\n    setMapView = (view) => {\n        this.setState({\n            mapView : view\n        })\n    }\n\n    /**\n     * Set hospitalsByEnums to the selected Hospital Variable\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByEnums = (selectedHospitals) => {\n        this.setState({\n            hospitalsByEnums : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            this.filterHospitals();\n        })\n    }\n\n    /**\n     * Set hospitalsByType to selected Hospital Type\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByType = (selectedHospitals) => {\n        this.setState({\n            hospitalsByType : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            this.filterHospitals();\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n\n        const {selectedVariable, selectedHospitals, selectedYear, hasLoaded, view, mapView, hospitals, filteredHospitals, cantons, variables, years} = this.state;\n\n        let variableIsTypeHospital = (selectedVariable.variable_model === \"Hospital\");\n\n        let centralPanel = (view !== 1)\n            ? (\n                <CentralPanel\n                    view={view}\n                    variables={variables}\n                    hospitals={hospitals}\n                    hasLoaded={hasLoaded}\n                    fetchData={this.applyVariables}\n\t\t\t\t\tobjects={variableIsTypeHospital ? hospitals : cantons}\n                    variableInfo={selectedVariable}\n                    year={selectedYear}\n                />\n            )\n            : null\n        ;\n\n        let slider;\n\n        if (years.length > 1 && view === 1) {\n             if (variableIsTypeHospital && mapView === 2) {\n                slider = null;\n            } else if (!variableIsTypeHospital && mapView === 1){\n                slider = null;\n            } else {\n                slider = (<Slider years={years} selectedYear={selectedYear} setYear={this.setYear} hasLoaded={hasLoaded}/>);\n            }\n        }\n\n        return (\n\t\t\t<div className=\"App\">\n                <Maps\n                    objects={(variableIsTypeHospital) ? filteredHospitals : cantons}\n                    selectedVariable={selectedVariable}\n                    year={selectedYear}\n                    hasLoaded={hasLoaded}\n                    view={view}\n                    mapView={mapView}\n                    setMapView={this.setMapView}\n                />\n\t\t\t\t<div className=\"grid-container\">\n                    <ControlPanel\n                        view={view}\n                        setView={this.setView}\n                        hospitals={hospitals}\n                        setVariable={this.setVariable}\n                        selectedVariable={selectedVariable}\n                        variables={variables}\n                        fetchData={this.applyVariables}\n                        filterByEnum={this.setHospitalsByEnums}\n                        filterByType={this.setHospitalsByType}\n                        year={selectedYear}\n                        hasLoaded={hasLoaded}\n                        mapView={mapView}\n                        setMapView={this.setMapView}\n                    />\n                    {centralPanel}\n                    <LanguagePicker resendInitApiCall={this.initApiCall} />\n                    {slider}\n\t\t\t\t</div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}