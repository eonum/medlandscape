{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/DropdownMenu/DropdownMenu.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './DropdownMenu.css';\n/**\n* DropdownMenu-Component that contains a search bar to filter the displayed\n*  list items.\n*\n* Required properties: see PropTypes section below\n*/\n\nvar DropdownMenu =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DropdownMenu, _Component);\n\n  function DropdownMenu() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropdownMenu);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropdownMenu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.selectItem = function (item) {\n      _this.props.selectItem(item, _this.props.id);\n\n      _this.toggleDropdown();\n    };\n\n    _this.filterFunction = function () {\n      var input, filter, a, i, div, txtValue;\n      input = document.getElementById(_this.props.id).querySelector('.searchbar');\n      filter = input.value.toUpperCase();\n      div = document.getElementById(_this.props.id);\n      a = div.getElementsByClassName('dropdownElem');\n\n      for (i = 0; i < a.length; i++) {\n        txtValue = a[i].textContent || a[i].innerText;\n\n        if (txtValue.toUpperCase().indexOf(filter) > -1) {\n          a[i].style.display = \"\";\n        } else {\n          a[i].style.display = \"none\";\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DropdownMenu, [{\n    key: \"toggleDropdown\",\n\n    /**\n    * toggleDropdown - toggles whether the DropdownMenu is opened or closed\n    */\n    value: function toggleDropdown() {\n      var dropdownListDiv = document.getElementById(this.props.id);\n      dropdownListDiv.classList.toggle('show');\n    }\n    /**\n    * selectItem - informs this.props.selectItem about the item that has been\n    * selected from the list. Also closes the menu.\n    *\n    * @param  {Object} item the list item that was selected\n    */\n\n  }, {\n    key: \"render\",\n\n    /**\n    * render - renders the component: A button to open and close the menu, a\n    * div that contains an input-textfield (for filtering) and every list item\n    * from the prop \"listItems\".\n    *\n    * @return {JSX}  JSX-Code of components\n    */\n    value: function render() {\n      var _this2 = this;\n\n      var varText; // if an item was passed as selectedItem\n\n      if (this.props.selectedItem) {\n        // if dropdown contains hospitals\n        if (this.props.selectedItem.text) {\n          varText = this.props.selectedItem.text;\n        } else {\n          // if contains cantons / variables\n          varText = this.props.selectedItem.name;\n        }\n      } else {\n        // fallback if no item was passed as selectedItem\n        varText = this.props.defaultText;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.toggleDropdown.bind(this),\n        className: \"dropbtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, varText, \" \\u25BC\"), React.createElement(\"div\", {\n        id: this.props.id,\n        className: \"dropdown-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Suchen...\",\n        className: \"dropdownElem searchbar\",\n        onKeyUp: this.filterFunction.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), this.props.listItems.map(function (item) {\n        return React.createElement(\"div\", {\n          className: \"dropdownElem\",\n          key: _this2.props.listItems.indexOf(item),\n          onClick: _this2.selectItem.bind(_this2, item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, item.text ? item.text : item.name);\n      })));\n    }\n  }]);\n\n  return DropdownMenu;\n}(Component);\n/**\n* PropTypes\n*\n* listItems: an array containing all list items of the menu\n* selectItem: a function that will be called to inform the parent of the item\n*  that was selected\n* selectedItem: an object that represents the selected item\n*/\n\n\nDropdownMenu.propTypes = {\n  listItems: PropTypes.array.isRequired,\n  selectItem: PropTypes.func.isRequired,\n  selectedItem: PropTypes.object.isRequired\n};\nexport default DropdownMenu;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/DropdownMenu/DropdownMenu.js"],"names":["React","Component","PropTypes","DropdownMenu","selectItem","item","props","id","toggleDropdown","filterFunction","input","filter","a","i","div","txtValue","document","getElementById","querySelector","value","toUpperCase","getElementsByClassName","length","textContent","innerText","indexOf","style","display","dropdownListDiv","classList","toggle","varText","selectedItem","text","name","defaultText","bind","listItems","map","propTypes","array","isRequired","func","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './DropdownMenu.css';\n\n/**\n* DropdownMenu-Component that contains a search bar to filter the displayed\n*  list items.\n*\n* Required properties: see PropTypes section below\n*/\nclass DropdownMenu extends Component {\n\n    /**\n    * toggleDropdown - toggles whether the DropdownMenu is opened or closed\n    */\n    toggleDropdown() {\n        let dropdownListDiv = document.getElementById(this.props.id);\n        dropdownListDiv.classList.toggle('show');\n    }\n\n    /**\n    * selectItem - informs this.props.selectItem about the item that has been\n    * selected from the list. Also closes the menu.\n    *\n    * @param  {Object} item the list item that was selected\n    */\n    selectItem = (item) => {\n        this.props.selectItem(item, this.props.id);\n        this.toggleDropdown();\n    }\n\n    /**\n    * filterFunction - filters the displayed listitems using input from the\n    * textfield\n    */\n    filterFunction = () => {\n        let input, filter, a, i, div, txtValue;\n        input = document.getElementById(this.props.id).querySelector('.searchbar');\n        filter = input.value.toUpperCase();\n        div = document.getElementById(this.props.id);\n        a = div.getElementsByClassName('dropdownElem');\n        for (i = 0; i < a.length; i++) {\n            txtValue = a[i].textContent || a[i].innerText;\n            if (txtValue.toUpperCase().indexOf(filter) > -1) {\n                a[i].style.display = \"\";\n            } else {\n                a[i].style.display = \"none\";\n            }\n        }\n    }\n\n    /**\n    * render - renders the component: A button to open and close the menu, a\n    * div that contains an input-textfield (for filtering) and every list item\n    * from the prop \"listItems\".\n    *\n    * @return {JSX}  JSX-Code of components\n    */\n    render() {\n        let varText;\n\n        // if an item was passed as selectedItem\n        if (this.props.selectedItem) {\n            // if dropdown contains hospitals\n            if (this.props.selectedItem.text) {\n                varText = this.props.selectedItem.text;\n            } else { // if contains cantons / variables\n                varText = this.props.selectedItem.name;\n            }\n        } else { // fallback if no item was passed as selectedItem\n            varText = this.props.defaultText;\n        }\n\n        return (\n            <div className=\"dropdown\">\n                <button onClick={this.toggleDropdown.bind(this)} className=\"dropbtn\">{varText} ▼</button>\n                <div id={this.props.id} className=\"dropdown-content\">\n                <input type=\"text\" placeholder=\"Suchen...\" className=\"dropdownElem searchbar\" onKeyUp={this.filterFunction.bind(this)} />\n                    {\n                        this.props.listItems.map((item) => (\n                            <div className=\"dropdownElem\" key={this.props.listItems.indexOf(item)} onClick={this.selectItem.bind(this, item)}>{item.text ? item.text : item.name}</div>\n                        ))\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n* PropTypes\n*\n* listItems: an array containing all list items of the menu\n* selectItem: a function that will be called to inform the parent of the item\n*  that was selected\n* selectedItem: an object that represents the selected item\n*/\nDropdownMenu.propTypes = {\n    listItems: PropTypes.array.isRequired,\n    selectItem: PropTypes.func.isRequired,\n    selectedItem: PropTypes.object.isRequired,\n}\n\nexport default DropdownMenu;\n"]},"metadata":{},"sourceType":"module"}