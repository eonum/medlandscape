{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { Control } from 'leaflet';\nimport React, { cloneElement, Component, Children, Fragment } from 'react';\nimport { LeafletProvider, withLeaflet } from './context';\nimport MapControl from './MapControl'; // Abtract class for layer container, extended by BaseLayer and Overlay\n\nexport var ControlledLayer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(ControlledLayer, _Component);\n\n  function ControlledLayer() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"contextValue\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"layer\", void 0);\n\n    return _this;\n  }\n\n  var _proto = ControlledLayer.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(_ref) {\n    var checked = _ref.checked;\n\n    if (this.props.leaflet.map == null) {\n      return;\n    } // Handle dynamically (un)checking the layer => adding/removing from the map\n\n\n    if (this.props.checked === true && (checked == null || checked === false)) {\n      this.props.leaflet.map.addLayer(this.layer);\n    } else if (checked === true && (this.props.checked == null || this.props.checked === false)) {\n      this.props.leaflet.map.removeLayer(this.layer);\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.props.removeLayerControl(this.layer);\n  };\n\n  _proto.addLayer = function addLayer() {\n    throw new Error('Must be implemented in extending class');\n  };\n\n  _proto.removeLayer = function removeLayer(layer) {\n    this.props.removeLayer(layer);\n  };\n\n  _proto.render = function render() {\n    var children = this.props.children;\n    return children ? React.createElement(LeafletProvider, {\n      value: this.contextValue\n    }, children) : null;\n  };\n\n  return ControlledLayer;\n}(Component);\n\nvar BaseLayer =\n/*#__PURE__*/\nfunction (_ControlledLayer) {\n  _inheritsLoose(BaseLayer, _ControlledLayer);\n\n  function BaseLayer(props) {\n    var _this2;\n\n    _this2 = _ControlledLayer.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this2), \"addLayer\", function (layer) {\n      _this2.layer = layer; // Keep layer reference to handle dynamic changes of props\n\n      var _this2$props = _this2.props,\n          addBaseLayer = _this2$props.addBaseLayer,\n          checked = _this2$props.checked,\n          name = _this2$props.name;\n      addBaseLayer(layer, name, checked);\n    });\n\n    _this2.contextValue = _extends({}, props.leaflet, {\n      layerContainer: {\n        addLayer: _this2.addLayer.bind(_assertThisInitialized(_this2)),\n        removeLayer: _this2.removeLayer.bind(_assertThisInitialized(_this2))\n      }\n    });\n    return _this2;\n  }\n\n  return BaseLayer;\n}(ControlledLayer);\n\nvar Overlay =\n/*#__PURE__*/\nfunction (_ControlledLayer2) {\n  _inheritsLoose(Overlay, _ControlledLayer2);\n\n  function Overlay(props) {\n    var _this3;\n\n    _this3 = _ControlledLayer2.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this3), \"addLayer\", function (layer) {\n      _this3.layer = layer; // Keep layer reference to handle dynamic changes of props\n\n      var _this3$props = _this3.props,\n          addOverlay = _this3$props.addOverlay,\n          checked = _this3$props.checked,\n          name = _this3$props.name;\n      addOverlay(layer, name, checked);\n    });\n\n    _this3.contextValue = _extends({}, props.leaflet, {\n      layerContainer: {\n        addLayer: _this3.addLayer.bind(_assertThisInitialized(_this3)),\n        removeLayer: _this3.removeLayer.bind(_assertThisInitialized(_this3))\n      }\n    });\n    return _this3;\n  }\n\n  return Overlay;\n}(ControlledLayer);\n\nvar LayersControl =\n/*#__PURE__*/\nfunction (_MapControl) {\n  _inheritsLoose(LayersControl, _MapControl);\n\n  function LayersControl(props) {\n    var _this4;\n\n    _this4 = _MapControl.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this4), \"controlProps\", void 0);\n\n    _this4.controlProps = {\n      addBaseLayer: _this4.addBaseLayer.bind(_assertThisInitialized(_this4)),\n      addOverlay: _this4.addOverlay.bind(_assertThisInitialized(_this4)),\n      leaflet: props.leaflet,\n      removeLayer: _this4.removeLayer.bind(_assertThisInitialized(_this4)),\n      removeLayerControl: _this4.removeLayerControl.bind(_assertThisInitialized(_this4))\n    };\n    return _this4;\n  }\n\n  var _proto2 = LayersControl.prototype;\n\n  _proto2.createLeafletElement = function createLeafletElement(props) {\n    var _children = props.children,\n        options = _objectWithoutPropertiesLoose(props, [\"children\"]);\n\n    return new Control.Layers(undefined, undefined, options);\n  };\n\n  _proto2.updateLeafletElement = function updateLeafletElement(fromProps, toProps) {\n    _MapControl.prototype.updateLeafletElement.call(this, fromProps, toProps);\n\n    if (toProps.collapsed !== fromProps.collapsed) {\n      if (toProps.collapsed === true) {\n        this.leafletElement.collapse();\n      } else {\n        this.leafletElement.expand();\n      }\n    }\n  };\n\n  _proto2.componentWillUnmount = function componentWillUnmount() {\n    var _this5 = this;\n\n    setTimeout(function () {\n      _MapControl.prototype.componentWillUnmount.call(_this5);\n    }, 0);\n  };\n\n  _proto2.addBaseLayer = function addBaseLayer(layer, name, checked) {\n    if (checked === void 0) {\n      checked = false;\n    }\n\n    if (checked && this.props.leaflet.map != null) {\n      this.props.leaflet.map.addLayer(layer);\n    }\n\n    this.leafletElement.addBaseLayer(layer, name);\n  };\n\n  _proto2.addOverlay = function addOverlay(layer, name, checked) {\n    if (checked === void 0) {\n      checked = false;\n    }\n\n    if (checked && this.props.leaflet.map != null) {\n      this.props.leaflet.map.addLayer(layer);\n    }\n\n    this.leafletElement.addOverlay(layer, name);\n  };\n\n  _proto2.removeLayer = function removeLayer(layer) {\n    if (this.props.leaflet.map != null) {\n      this.props.leaflet.map.removeLayer(layer);\n    }\n  };\n\n  _proto2.removeLayerControl = function removeLayerControl(layer) {\n    this.leafletElement.removeLayer(layer);\n  };\n\n  _proto2.render = function render() {\n    var _this6 = this;\n\n    var children = Children.map(this.props.children, function (child) {\n      return child ? cloneElement(child, _this6.controlProps) : null;\n    });\n    return React.createElement(Fragment, null, children);\n  };\n\n  return LayersControl;\n}(MapControl);\n\nvar LayersControlExport = withLeaflet(LayersControl);\nLayersControlExport.BaseLayer = BaseLayer;\nLayersControlExport.Overlay = Overlay;\nexport default LayersControlExport;","map":null,"metadata":{},"sourceType":"module"}