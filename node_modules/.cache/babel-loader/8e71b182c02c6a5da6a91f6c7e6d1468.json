{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport YearSelector from './YearSelector/YearSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport { withTranslation } from 'react-i18next';\nimport { CSVLink, CSVDownload } from \"react-csv\";\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\n\nvar InteractiveTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InteractiveTable, _Component);\n\n  /**\n   * constructor - initializes the component by calling the superclass's\n   *  constructor and setting the inital state\n   *\n   * @param  {ojbect} props props handed over by parent component\n   */\n  function InteractiveTable(_props) {\n    var _this;\n\n    _classCallCheck(this, InteractiveTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InteractiveTable).call(this, _props));\n\n    _this.updateAllDropdowns = function (newProps) {\n      var props = _this.props;\n\n      if (newProps) {\n        props = newProps;\n      }\n\n      var newHospitalDropdowns = _this.state.hospitalDropdowns;\n\n      for (var i = 0; i < _this.state.hospitalDropdowns.length; i++) {\n        newHospitalDropdowns = update(newHospitalDropdowns, _defineProperty({}, i, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  listItems: {\n                    $set: props.hospitals\n                  }\n                }\n              }\n            }\n          }\n        }));\n      }\n\n      var newVariableDropdowns = _this.state.variableDropdowns;\n\n      for (var _i = 0; _i < _this.state.variableDropdowns.length; _i++) {\n        newVariableDropdowns = update(newVariableDropdowns, _defineProperty({}, _i, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  listItems: {\n                    $set: props.variables\n                  }\n                }\n              }\n            }\n          }\n        }));\n      }\n\n      _this.setState({\n        hospitalDropdowns: newHospitalDropdowns,\n        variableDropdowns: newVariableDropdowns,\n        dropdownsNeedUpdate: false,\n        dropdownsForceUpdate: false\n      });\n    };\n\n    _this.addHospital = function () {\n      var nextHospId = _this.state.nextHospitalId + \"\";\n\n      var hosp = _this.createNewHospital({}, nextHospId); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n\n      var hosp_id_parts = nextHospId.split(\"-\");\n      nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n      var newSelectedHospitals = [].concat(_toConsumableArray(_this.state.selectedHospitals), [hosp[0]]);\n      var newDropdowns = newDropdowns = [].concat(_toConsumableArray(_this.state.hospitalDropdowns), [hosp[1]]);\n\n      _this.setState({\n        hospitalDropdowns: newDropdowns,\n        selectedHospitals: newSelectedHospitals,\n        nextHospitalId: nextHospId\n      });\n    };\n\n    _this.addAllHospitals = function () {\n      var hospDropdowns = [];\n      var selectedHosps = [];\n      var nextHospId = _this.state.nextHospitalId + \"\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.props.hospitals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var hosp = _step.value;\n\n          var data = _this.createNewHospital(hosp, nextHospId);\n\n          selectedHosps.push(hosp);\n          hospDropdowns.push(data[1]); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n          var hosp_id_parts = nextHospId.split(\"-\");\n          nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        hospitalDropdowns: hospDropdowns,\n        selectedHospitals: selectedHosps,\n        nextHospitalId: nextHospId\n      });\n    };\n\n    _this.createNewHospital = function (selectedHosp, id) {\n      var newSelectedHospital = {};\n\n      if (selectedHosp) {\n        newSelectedHospital = selectedHosp;\n      }\n\n      var newDropdown = React.createElement(\"div\", {\n        className: \"hospitalDropdown\",\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: id,\n        listItems: _this.props.hospitals,\n        selectItem: _this.selectHospital,\n        selectedItem: newSelectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnSubtractHospital\",\n        onClick: function onClick() {\n          return _this.subtractHospital(id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"X\"));\n      return [newSelectedHospital, newDropdown];\n    };\n\n    _this.subtractHospital = function (senderId) {\n      var index;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _this.state.hospitalDropdowns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var hD = _step2.value;\n\n          if (hD.props.children[0].props.id === senderId) {\n            index = _this.state.hospitalDropdowns.indexOf(hD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var updSelHos1 = _this.state.selectedHospitals.slice(0, index);\n\n      var updSelHos2 = _this.state.selectedHospitals.slice(index + 1, _this.state.selectedHospitals.length);\n\n      var updSelHos = updSelHos1.concat(updSelHos2);\n\n      var updHosDrp1 = _this.state.hospitalDropdowns.slice(0, index);\n\n      var updHosDrp2 = _this.state.hospitalDropdowns.slice(index + 1, _this.state.hospitalDropdowns.length);\n\n      var updHosDrp = updHosDrp1.concat(updHosDrp2);\n\n      _this.setState({\n        selectedHospitals: updSelHos,\n        hospitalDropdowns: updHosDrp\n      });\n    };\n\n    _this.selectHospital = function (item, senderId) {\n      var index;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = _this.state.hospitalDropdowns[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var hD = _step3.value;\n\n          if (hD.props.children[0].props.id === senderId) {\n            index = _this.state.hospitalDropdowns.indexOf(hD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      _this.setState({\n        // selectedHospitals : newList\n        selectedHospitals: update(_this.state.selectedHospitals, _defineProperty({}, index, {\n          $set: item\n        })),\n        hospitalDropdowns: update(_this.state.hospitalDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  selectedItem: {\n                    $set: item\n                  }\n                }\n              }\n            }\n          }\n        }))\n      });\n    };\n\n    _this.addVariable = function () {\n      var newVariables = [];\n      var newSelectedVariables = [];\n      var nextVariableId = _this.state.nextVariableId + \"\";\n      var newSelectedVariable = {};\n      var newDrp = React.createElement(\"div\", {\n        className: \"variableDropdown\",\n        key: _this.state.nextVariableId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: _this.state.nextVariableId,\n        listItems: _this.props.variables,\n        selectItem: _this.selectVariable,\n        selectedItem: newSelectedVariable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnSubtractVariable\",\n        onClick: function onClick() {\n          return _this.subtractVariable(nextVariableId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"button\", {\n        className: \"btnSortAsc\",\n        onClick: function onClick() {\n          return _this.sortHospitals(nextVariableId, 'asc');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, _this.props.t('tableView.sortAsc')), React.createElement(\"button\", {\n        className: \"btnSortDesc\",\n        onClick: function onClick() {\n          return _this.sortHospitals(nextVariableId, 'desc');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, _this.props.t('tableView.sortDesc'))); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n      var id_parts = _this.state.nextVariableId.split(\"-\");\n\n      var nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n      ;\n      newVariables = [].concat(_toConsumableArray(_this.state.variableDropdowns), [newDrp]);\n      newSelectedVariables = [].concat(_toConsumableArray(_this.state.selectedVariables), [newSelectedVariable]);\n\n      _this.setState({\n        nextVariableId: nextVariableIdInc,\n        variableDropdowns: newVariables,\n        selectedVariables: newSelectedVariables\n      });\n    };\n\n    _this.subtractVariable = function (senderId) {\n      var index;\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = _this.state.variableDropdowns[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var vD = _step4.value;\n\n          if (vD.props.children[0].props.id === senderId) {\n            index = _this.state.variableDropdowns.indexOf(vD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      var updSelVar1 = _this.state.selectedVariables.slice(0, index);\n\n      var updSelVar2 = _this.state.selectedVariables.slice(index + 1, _this.state.selectedVariables.length);\n\n      var updSelVar = updSelVar1.concat(updSelVar2);\n\n      var updVarDrp1 = _this.state.variableDropdowns.slice(0, index);\n\n      var updVarDrp2 = _this.state.variableDropdowns.slice(index + 1, _this.state.variableDropdowns.length);\n\n      var updVarDrp = updVarDrp1.concat(updVarDrp2);\n\n      _this.setState({\n        selectedVariables: updSelVar,\n        variableDropdowns: updVarDrp\n      });\n    };\n\n    _this.canTableBeSorted = function () {\n      var shouldGenerate = true; // check if in each hospital dropdown something was selected\n\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = _this.state.selectedHospitals[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var hosp = _step5.value;\n\n          if (Object.keys(hosp).length === 0 && hosp.constructor === Object) {\n            shouldGenerate = false;\n            break;\n          }\n        } // check the same for variables\n\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      if (shouldGenerate) {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = _this.state.selectedVariables[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var variable = _step6.value;\n\n            if (Object.keys(variable).length === 0 && variable.constructor === Object) {\n              shouldGenerate = false;\n              break;\n            } // also check if for the selected variables the data was fetched\n\n\n            if (!_this.props.hospitals[0].attributes[variable.name]) {\n              shouldGenerate = false;\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      }\n\n      if (!shouldGenerate) {\n        window.alert(_this.props.t('tableView.missingData'));\n      }\n\n      return shouldGenerate;\n    };\n\n    _this.sortHospitals = function (senderId, order) {\n      // first get the whole variable object using the senderId\n      var senderIndex;\n      var _iteratorNormalCompletion7 = true;\n      var _didIteratorError7 = false;\n      var _iteratorError7 = undefined;\n\n      try {\n        for (var _iterator7 = _this.state.variableDropdowns[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n          var vD = _step7.value;\n\n          if (vD.props.children[0].props.id === senderId) {\n            senderIndex = _this.state.variableDropdowns.indexOf(vD);\n          }\n        }\n      } catch (err) {\n        _didIteratorError7 = true;\n        _iteratorError7 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n            _iterator7.return();\n          }\n        } finally {\n          if (_didIteratorError7) {\n            throw _iteratorError7;\n          }\n        }\n      }\n\n      var variable = _this.state.selectedVariables[senderIndex]; // then create an array containing arrays of length 2 that contain the\n      // index of the selectedHospital and its value on the variable\n\n      var selectedHospitals = _this.state.selectedHospitals;\n      var referenceArr = [];\n\n      if (_this.canTableBeSorted()) {\n        for (var i = 0; i < selectedHospitals.length; i++) {\n          var currentHosp = void 0;\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = _this.props.hospitals[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var hosp = _step8.value;\n\n              if (hosp.name === selectedHospitals[i].name) {\n                currentHosp = hosp;\n                break;\n              }\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n\n          var latestYear = Object.keys(currentHosp.attributes[variable.name]).sort()[Object.keys(currentHosp.attributes[variable.name]).length - 1];\n          var attributes = currentHosp.attributes[variable.name];\n          referenceArr.push([i, attributes[latestYear]]);\n        } // then sort this array according to the value on the variable\n\n\n        var sortFunction = function sortFunction(a, b) {\n          if (a[1] === b[1]) {\n            return 0;\n          } else {\n            if (order === 'asc') {\n              return a[1] < b[1] ? -1 : 1;\n            } else {\n              return a[1] > b[1] ? -1 : 1;\n            }\n          }\n        };\n\n        referenceArr.sort(sortFunction); // according to the indices in the referenceArr, fill new sorted arrays\n        // for dropdowns and selected hospitals\n\n        var newHospitalDropdowns = [];\n        var newSelectedHospitals = [];\n\n        for (var _i2 = 0; _i2 < referenceArr.length; _i2++) {\n          var index = referenceArr[_i2][0];\n          newSelectedHospitals.push(selectedHospitals[index]);\n          newHospitalDropdowns.push(_this.state.hospitalDropdowns[index]);\n        } // then set the state\n\n\n        _this.setState({\n          hospitalDropdowns: newHospitalDropdowns,\n          selectedHospitals: newSelectedHospitals\n        });\n\n        _this.props.retriggerTableGeneration();\n      }\n    };\n\n    _this.selectVariable = function (item, senderId) {\n      var index;\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        for (var _iterator9 = _this.state.variableDropdowns[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var vD = _step9.value;\n\n          if (vD.props.children[0].props.id === senderId) {\n            index = _this.state.variableDropdowns.indexOf(vD);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      _this.setState({\n        selectedVariables: update(_this.state.selectedVariables, _defineProperty({}, index, {\n          $set: item\n        })),\n        variableDropdowns: update(_this.state.variableDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  selectedItem: {\n                    $set: item\n                  }\n                }\n              }\n            }\n          }\n        }))\n      });\n    };\n\n    _this.submitTableData = function (data) {\n      var _this$state = _this.state,\n          selectedVariables = _this$state.selectedVariables,\n          selectedHospitals = _this$state.selectedHospitals;\n      var namedData = [];\n      var headers = [];\n      headers.push(\"-\");\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        for (var _iterator10 = selectedVariables[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          var v = _step10.value;\n          headers.push(v.text);\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n\n      namedData.push(headers);\n\n      for (var i = 0; i < data.length; i++) {\n        var row = [selectedHospitals[i].name].concat(data[i]);\n        namedData.push(row);\n      }\n\n      _this.setState({\n        csvData: namedData\n      });\n    };\n\n    _this.dataFetched = function () {\n      console.log('whoeeh');\n    };\n\n    _this.state = {\n      nextVariableId: 'var-' + 0,\n      variableDropdowns: [],\n      selectedVariables: [],\n      nextHospitalId: 'hos-' + 0,\n      hospitalDropdowns: [],\n      selectedHospitals: [],\n      dropdownsNeedUpdate: true,\n      csvData: [],\n      previousLanguage: _props.i18n.language\n    };\n    return _this;\n  }\n  /**\n   * componentDidUpdate - updates the dropdowns if needed and checks if the\n   *  language has changed -> if yes, the table is cleared\n   */\n\n\n  _createClass(InteractiveTable, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      if (this.props.hasLoaded && this.state.dropdownsNeedUpdate) {\n        this.updateAllDropdowns();\n      }\n\n      if (this.state.previousLanguage !== this.props.i18n.language) {\n        this.setState({\n          nextVariableId: 'var-' + 0,\n          variableDropdowns: [],\n          selectedVariables: [],\n          nextHospitalId: 'hos-' + 0,\n          hospitalDropdowns: [],\n          selectedHospitals: [],\n          previousLanguage: this.props.i18n.language,\n          languageDidChange: true\n        }, function () {\n          _this2.addHospital();\n\n          _this2.addVariable();\n        });\n      }\n    }\n    /**\n     * updateAllDropdowns - Fills the dropdown-lists that were present before\n     *  the api request was complete with the correct data. Otherwise they\n     *  would be empty lists.\n     *\n     * @param {Object} newProps if provided, these will be used to update the\n     *  dropdowns instead of this.props\n     */\n\n  }, {\n    key: \"componentWillReceiveProps\",\n\n    /**\n     * componentWillReceiveProps - when the language was changed, the listItems\n     *  of the existing dropdowns need an update to display the correct items\n     */\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.state.languageDidChange) {\n        if (this.props.variables[0].text !== nextProps.variables[0].text) {\n          this.setState({\n            languageDidChange: false\n          });\n          this.updateAllDropdowns(nextProps);\n        }\n      }\n    }\n    /**\n     * componentDidMount - Adds a dropdown on each dimension by default.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.addHospital();\n      this.addVariable();\n    }\n    /**\n     * addHospital - Creates a new dropdown menu to select a hospital to\n     *  display, with a new unique id. Then updates the state accordingly.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    value: function render() {\n      var _this3 = this;\n\n      var t = this.props.t;\n      return React.createElement(\"div\", {\n        className: \"interactiveTable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, React.createElement(VariableSelector, {\n        className: \"variableSelector\",\n        variables: this.props.variables,\n        variableDropdowns: this.state.variableDropdowns,\n        addVariable: this.addVariable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }), React.createElement(HospitalSelector, {\n        className: \"hospitalSelector\",\n        hospitals: this.props.hospitals,\n        hospitalDropdowns: this.state.hospitalDropdowns,\n        selectedHospitals: this.state.selectedHospitals,\n        addHospital: this.addHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528\n        },\n        __self: this\n      }), React.createElement(ResultTable, {\n        className: \"resultTable\",\n        selectedHospitals: this.state.selectedHospitals,\n        selectedVariables: this.state.selectedVariables,\n        hospitalData: this.props.hospitals,\n        dataLoaded: this.props.tableDataLoaded,\n        dataGenerated: this.props.tableDataGenerated,\n        submitTableData: this.submitTableData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnCreateCSV\",\n        onClick: function onClick() {\n          return _this3.csvLink.link.click();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, t('tableView.btnCreateCSV')), React.createElement(\"button\", {\n        className: \"btnGenerateTable\",\n        onClick: function onClick() {\n          return _this3.props.requestData(_this3.state.selectedVariables, _this3.dataFetched);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, t('tableView.btnCreateTable')), React.createElement(\"button\", {\n        className: \"btnAddAllHospitals\",\n        onClick: function onClick() {\n          return _this3.addAllHospitals();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564\n        },\n        __self: this\n      }, t('tableView.btnAddAllHospitals')));\n    }\n  }]);\n\n  return InteractiveTable;\n}(Component);\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n * requestData: function that will be called to download the requested data\n * hasLoaded: bool that will be true if the data is loaded\n * retriggerTableGeneration: will cause resultTable to regenerate its table\n *  without resending a request\n */\n\n\nInteractiveTable.propTypes = {\n  variables: PropTypes.array.isRequired,\n  hospitals: PropTypes.array.isRequired,\n  requestData: PropTypes.func.isRequired,\n  hasLoaded: PropTypes.bool.isRequired,\n  retriggerTableGeneration: PropTypes.func.isRequired\n};\nvar LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js"],"names":["React","Component","PropTypes","HospitalSelector","VariableSelector","YearSelector","DropdownMenu","ResultTable","update","withTranslation","CSVLink","CSVDownload","InteractiveTable","props","updateAllDropdowns","newProps","newHospitalDropdowns","state","hospitalDropdowns","i","length","children","listItems","$set","hospitals","newVariableDropdowns","variableDropdowns","variables","setState","dropdownsNeedUpdate","dropdownsForceUpdate","addHospital","nextHospId","nextHospitalId","hosp","createNewHospital","hosp_id_parts","split","Number","newSelectedHospitals","selectedHospitals","newDropdowns","addAllHospitals","hospDropdowns","selectedHosps","data","push","selectedHosp","id","newSelectedHospital","newDropdown","selectHospital","subtractHospital","senderId","index","hD","indexOf","updSelHos1","slice","updSelHos2","updSelHos","concat","updHosDrp1","updHosDrp2","updHosDrp","item","selectedItem","addVariable","newVariables","newSelectedVariables","nextVariableId","newSelectedVariable","newDrp","selectVariable","subtractVariable","sortHospitals","t","id_parts","nextVariableIdInc","selectedVariables","vD","updSelVar1","updSelVar2","updSelVar","updVarDrp1","updVarDrp2","updVarDrp","canTableBeSorted","shouldGenerate","Object","keys","constructor","variable","attributes","name","window","alert","order","senderIndex","referenceArr","currentHosp","latestYear","sort","sortFunction","a","b","retriggerTableGeneration","submitTableData","namedData","headers","v","text","row","csvData","dataFetched","console","log","previousLanguage","i18n","language","hasLoaded","languageDidChange","nextProps","tableDataLoaded","tableDataGenerated","csvLink","link","click","requestData","propTypes","array","isRequired","func","bool","LocalizedInteractiveTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport YearSelector from './YearSelector/YearSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport { withTranslation } from 'react-i18next';\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\nclass InteractiveTable extends Component {\n\n    /**\n     * constructor - initializes the component by calling the superclass's\n     *  constructor and setting the inital state\n     *\n     * @param  {ojbect} props props handed over by parent component\n     */\n    constructor(props) {\n        super(props)\n        this.state = {\n\t\t\tnextVariableId : 'var-' + 0,\n\t\t\tvariableDropdowns : [],\n            selectedVariables : [],\n\n            nextHospitalId : 'hos-' + 0,\n            hospitalDropdowns : [],\n            selectedHospitals : [],\n\n            dropdownsNeedUpdate : true,\n\t\t\tcsvData : [],\n\n            previousLanguage : props.i18n.language\n        }\n    }\n\n    /**\n     * componentDidUpdate - updates the dropdowns if needed and checks if the\n     *  language has changed -> if yes, the table is cleared\n     */\n    componentDidUpdate() {\n        if ((this.props.hasLoaded && this.state.dropdownsNeedUpdate)) {\n            this.updateAllDropdowns();\n        }\n\n        if (this.state.previousLanguage !== this.props.i18n.language) {\n\n            this.setState({\n                nextVariableId : 'var-' + 0,\n    \t\t\tvariableDropdowns : [],\n                selectedVariables : [],\n\n                nextHospitalId : 'hos-' + 0,\n                hospitalDropdowns : [],\n                selectedHospitals : [],\n\n                previousLanguage: this.props.i18n.language,\n\n                languageDidChange: true\n            }, () => {\n                this.addHospital();\n                this.addVariable();\n            });\n\n        }\n    }\n\n    /**\n     * updateAllDropdowns - Fills the dropdown-lists that were present before\n     *  the api request was complete with the correct data. Otherwise they\n     *  would be empty lists.\n     *\n     * @param {Object} newProps if provided, these will be used to update the\n     *  dropdowns instead of this.props\n     */\n    updateAllDropdowns = (newProps) => {\n        let props = this.props;\n        if (newProps) {\n            props = newProps;\n        }\n\n        let newHospitalDropdowns = this.state.hospitalDropdowns;\n        for (let i = 0; i < this.state.hospitalDropdowns.length; i++) {\n            newHospitalDropdowns = update(newHospitalDropdowns, {[i]: {props: {children: {0: {props: {listItems: {$set: props.hospitals}}}}}}});\n        }\n        let newVariableDropdowns = this.state.variableDropdowns;\n        for (let i = 0; i < this.state.variableDropdowns.length; i++) {\n            newVariableDropdowns = update(newVariableDropdowns, {[i]: {props: {children: {0: {props: {listItems: {$set: props.variables}}}}}}});\n        }\n        this.setState({\n            hospitalDropdowns : newHospitalDropdowns,\n            variableDropdowns : newVariableDropdowns,\n            dropdownsNeedUpdate : false,\n            dropdownsForceUpdate : false\n        });\n    }\n\n    /**\n     * componentWillReceiveProps - when the language was changed, the listItems\n     *  of the existing dropdowns need an update to display the correct items\n     */\n    componentWillReceiveProps(nextProps) {\n        if (this.state.languageDidChange) {\n            if (this.props.variables[0].text !== nextProps.variables[0].text) {\n                this.setState({\n                    languageDidChange : false\n                });\n                this.updateAllDropdowns(nextProps);\n            }\n        }\n    }\n\n\n    /**\n     * componentDidMount - Adds a dropdown on each dimension by default.\n     */\n    componentDidMount() {\n        this.addHospital();\n        this.addVariable();\n    }\n\n    /**\n     * addHospital - Creates a new dropdown menu to select a hospital to\n     *  display, with a new unique id. Then updates the state accordingly.\n     */\n    addHospital = () => {\n        let nextHospId = this.state.nextHospitalId + \"\";\n        let hosp = this.createNewHospital({}, nextHospId);\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n        let hosp_id_parts = nextHospId.split(\"-\");\n        nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n\n        let newSelectedHospitals = [...this.state.selectedHospitals, hosp[0]];\n        let newDropdowns = newDropdowns = [...this.state.hospitalDropdowns, hosp[1]];\n\n        this.setState({\n            hospitalDropdowns : newDropdowns,\n            selectedHospitals : newSelectedHospitals,\n            nextHospitalId : nextHospId\n        });\n    }\n\n    /**\n     * addAllHospitals - Adds all hospitals available in this.props.hospitals to\n     *  the table, deleting existing ones.\n     */\n    addAllHospitals = () => {\n        let hospDropdowns = [];\n        let selectedHosps = [];\n\n        let nextHospId = this.state.nextHospitalId + \"\";\n\n        for (let hosp of this.props.hospitals) {\n            let data = this.createNewHospital(hosp, nextHospId);\n\n            selectedHosps.push(hosp);\n            hospDropdowns.push(data[1]);\n\n            // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n            let hosp_id_parts = nextHospId.split(\"-\");\n            nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n        }\n\n        this.setState({\n            hospitalDropdowns : hospDropdowns,\n            selectedHospitals : selectedHosps,\n            nextHospitalId : nextHospId\n        });\n    }\n\n    /**\n     * createNewHospital - creates a new hospitalDropdown and the according\n     *  selectedVariable which is undefined by default, but can be set using\n     *  the parameter selectedHosp\n     *\n     * @param {Object} selectedHosp the hospital that will be selected by default\n     *\n     * @return {Array} Array containing the selectedHospital variable at index 0\n     *  and the new dropdown at index 1\n     */\n    createNewHospital = (selectedHosp, id) => {\n        let newSelectedHospital = {};\n        if (selectedHosp) {\n            newSelectedHospital = selectedHosp;\n        }\n        let newDropdown = (\n            <div className='hospitalDropdown' key={id}>\n                <DropdownMenu id={id}\n                    listItems={this.props.hospitals}\n                    selectItem={this.selectHospital}\n                    selectedItem={newSelectedHospital}\n                />\n            <button className=\"btnSubtractHospital\" onClick={() => this.subtractHospital(id)}>X</button>\n            </div>\n        );\n        return [newSelectedHospital, newDropdown];\n    }\n\n    /**\n     * subtractHospital - Gets called when the remove button is clicked. Removes\n     *  the according dropdown from state.\n     *\n     * @param {String} senderId Id of the dropdown that should be removed\n     */\n    subtractHospital = (senderId) => {\n        let index;\n\n\t\tfor (let hD of this.state.hospitalDropdowns) {\n\t\t\tif (hD.props.children[0].props.id === senderId) {\n\t\t\t\tindex = this.state.hospitalDropdowns.indexOf(hD);\n                break;\n\t\t\t}\n\t\t}\n\n        let updSelHos1 = this.state.selectedHospitals.slice(0, index);\n        let updSelHos2 = this.state.selectedHospitals.slice(index + 1, this.state.selectedHospitals.length);\n        let updSelHos = updSelHos1.concat(updSelHos2);\n\n        let updHosDrp1 = this.state.hospitalDropdowns.slice(0, index);\n        let updHosDrp2 = this.state.hospitalDropdowns.slice(index + 1, this.state.hospitalDropdowns.length);\n        let updHosDrp = updHosDrp1.concat(updHosDrp2);\n\n        this.setState({\n\t\t\tselectedHospitals: updSelHos,\n\t\t\thospitalDropdowns: updHosDrp\n\t\t});\n    }\n\n    /**\n     * selectHospital - Called when a hospital is selected on a dropdown menu.\n     *  It uses the id of the dropdown that called this function to identify it's\n     *  index in the dropdowns array and update its displayed text. The index is\n     *  as well used to identify the according object in the array of selected\n     *  items and update it. Immutabilit-helper is used for that.\n     *\n     * @param {Object} item the selected item\n     * @param {String} senderId Id of the dropdown that selected something\n     */\n    selectHospital = (item, senderId) => {\n        let index;\n\n        for (let hD of this.state.hospitalDropdowns) {\n            if (hD.props.children[0].props.id === senderId) {\n                index = this.state.hospitalDropdowns.indexOf(hD);\n                break;\n            }\n        }\n\n        this.setState({\n            // selectedHospitals : newList\n            selectedHospitals: update(this.state.selectedHospitals, {[index]: {$set: item}}),\n            hospitalDropdowns: update(this.state.hospitalDropdowns, {[index]: {props: {children: {0: {props: {selectedItem: {$set: item}}}}}}})\n        });\n    }\n\n    /**\n     * addVariable - Creates a new dropdown menu to select a variable to display,\n     *  with a new unique id. Then updates the state accordingly.\n     */\n\taddVariable = () => {\n        let newVariables = [];\n        let newSelectedVariables = [];\n\n        let nextVariableId = this.state.nextVariableId + \"\";\n\n        let newSelectedVariable = {};\n        let newDrp = (\n            <div className=\"variableDropdown\" key={this.state.nextVariableId}>\n                <DropdownMenu id={this.state.nextVariableId}\n                    listItems={this.props.variables}\n                    selectItem={this.selectVariable}\n                    selectedItem={newSelectedVariable}\n                />\n                <button className=\"btnSubtractVariable\" onClick={() => this.subtractVariable(nextVariableId)}>X</button>\n                <button className=\"btnSortAsc\" onClick={() => this.sortHospitals(nextVariableId, 'asc')}>{this.props.t('tableView.sortAsc')}</button>\n                <button className=\"btnSortDesc\" onClick={() => this.sortHospitals(nextVariableId, 'desc')}>{this.props.t('tableView.sortDesc')}</button>\n            </div>\n        );\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n        let id_parts = this.state.nextVariableId.split(\"-\");\n        let nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);;\n        newVariables = [...this.state.variableDropdowns, newDrp];\n        newSelectedVariables = [...this.state.selectedVariables, newSelectedVariable];\n\n        this.setState({\n            nextVariableId: nextVariableIdInc,\n            variableDropdowns : newVariables,\n            selectedVariables : newSelectedVariables\n        });\n    }\n\n    /**\n     * subtractVariable - Gets called when the remove button is clicked.\n     *  Removes the according dropdown from state.\n     *\n     * @param {String} senderId Id of the dropdown that should be removed\n     */\n    subtractVariable = (senderId) => {\n        let index;\n\n\t\tfor (let vD of this.state.variableDropdowns) {\n\t\t\tif (vD.props.children[0].props.id === senderId) {\n\t\t\t\tindex = this.state.variableDropdowns.indexOf(vD);\n                break;\n\t\t\t}\n\t\t}\n\n        let updSelVar1 = this.state.selectedVariables.slice(0, index);\n        let updSelVar2 = this.state.selectedVariables.slice(index + 1, this.state.selectedVariables.length);\n        let updSelVar = updSelVar1.concat(updSelVar2);\n\n        let updVarDrp1 = this.state.variableDropdowns.slice(0, index);\n        let updVarDrp2 = this.state.variableDropdowns.slice(index + 1, this.state.variableDropdowns.length);\n        let updVarDrp = updVarDrp1.concat(updVarDrp2);\n\n        this.setState({\n\t\t\tselectedVariables: updSelVar,\n\t\t\tvariableDropdowns: updVarDrp\n\t\t});\n    }\n\n    /**\n     * canTableBeSorted - checks if in each dropdown something is selected,\n     *  and if the data has been fetched for these selected things.\n     *\n     * @return {bool} true, if everything is selected and the data is loaded,\n     *  false otherwise\n     */\n    canTableBeSorted = () => {\n        let shouldGenerate = true;\n\n        // check if in each hospital dropdown something was selected\n        for (let hosp of this.state.selectedHospitals) {\n            if (Object.keys(hosp).length === 0 && hosp.constructor === Object) {\n                shouldGenerate = false;\n                break;\n            }\n        }\n        // check the same for variables\n        if (shouldGenerate) {\n            for (let variable of this.state.selectedVariables) {\n                if (Object.keys(variable).length === 0 && variable.constructor === Object) {\n                    shouldGenerate = false;\n                    break;\n                }\n                // also check if for the selected variables the data was fetched\n                if (!this.props.hospitals[0].attributes[variable.name]) {\n                    shouldGenerate = false;\n                    break;\n                }\n            }\n        }\n        if (!shouldGenerate) {\n            window.alert(this.props.t('tableView.missingData'));\n        }\n\n        return shouldGenerate;\n    }\n\n    /**\n     * sortHospitals - Sorts selectedHospitals and hospitalDropdowns according\n     *  to their value on the variable with senderId.\n     *\n     * @param {String} senderId the id of the variable according to which the\n     *  hospitals should be sorted\n     * @param {String} order either 'asc' for sorting in ascending order or 'desc'\n     *  for sorting in descending order\n     */\n    sortHospitals = (senderId, order) => {\n        // first get the whole variable object using the senderId\n        let senderIndex;\n\n\t\tfor (let vD of this.state.variableDropdowns) {\n\t\t\tif (vD.props.children[0].props.id === senderId) {\n\t\t\t\tsenderIndex = this.state.variableDropdowns.indexOf(vD);\n\t\t\t}\n\t\t}\n\n        let variable = this.state.selectedVariables[senderIndex];\n\n        // then create an array containing arrays of length 2 that contain the\n        // index of the selectedHospital and its value on the variable\n        let selectedHospitals = this.state.selectedHospitals;\n        let referenceArr = [];\n\n        if (this.canTableBeSorted()) {\n            for (let i = 0; i < selectedHospitals.length; i++) {\n                let currentHosp;\n                for (let hosp of this.props.hospitals) {\n                    if (hosp.name === selectedHospitals[i].name) {\n                        currentHosp = hosp;\n                        break;\n                    }\n                }\n                const latestYear = Object.keys(currentHosp.attributes[variable.name])\n                    .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n                let attributes = currentHosp.attributes[variable.name];\n                referenceArr.push([i, attributes[latestYear]]);\n            }\n\n            // then sort this array according to the value on the variable\n            const sortFunction = (\n                function sortFunction(a, b) {\n                    if (a[1] === b[1]) { return 0; }\n                    else {\n                        if (order === 'asc') {\n                            return (a[1] < b[1]) ? -1 : 1;\n                        }\n                        else {\n                            return (a[1] > b[1]) ? -1 : 1;\n                        }\n                    }\n                }\n            );\n\n            referenceArr.sort(sortFunction);\n\n            // according to the indices in the referenceArr, fill new sorted arrays\n            // for dropdowns and selected hospitals\n            let newHospitalDropdowns = [];\n            let newSelectedHospitals = [];\n\n            for (let i = 0; i < referenceArr.length; i++) {\n                let index = referenceArr[i][0];\n                newSelectedHospitals.push(selectedHospitals[index]);\n                newHospitalDropdowns.push(this.state.hospitalDropdowns[index]);\n            }\n\n            // then set the state\n            this.setState({\n                hospitalDropdowns : newHospitalDropdowns,\n                selectedHospitals : newSelectedHospitals\n            });\n\n            this.props.retriggerTableGeneration();\n        }\n    }\n\n    /**\n     * selectVariable - Called when a variable is selected on a dropdown menu.\n     *  It uses the id of the dropdown that called this function to identify it's\n     *  index in the dropdowns array and update its displayed text. The index is\n     *  as well used to identify the according object in the array of selected\n     *  items and update it. Immutabilit-helper is used for that.\n     *\n     * @param {Object} item the selected item\n     * @param {String} senderId Id of the dropdown that selected something\n     */\n\tselectVariable = (item, senderId) => {\n\t\tlet index;\n\n\t\tfor (let vD of this.state.variableDropdowns) {\n\t\t\tif (vD.props.children[0].props.id === senderId) {\n\t\t\t\tindex = this.state.variableDropdowns.indexOf(vD);\n                break;\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({\n\t\t\tselectedVariables: update(this.state.selectedVariables, {[index]: {$set: item}}),\n\t\t\tvariableDropdowns: update(this.state.variableDropdowns, {[index]: {props: {children: {0: {props: {selectedItem: {$set: item}}}}}}})\n\t\t});\n\t}\n\n    /**\n     * submitTableData - Called when the ResultTable finished generating.\n     * Adds row and column names to the array for CSV export.\n     *\n     * @param {Object} data the generated 2D array\n     */\n    submitTableData = (data) => {\n        const {selectedVariables, selectedHospitals} = this.state;\n\n        let namedData = [];\n\n        let headers = [];\n        headers.push(\"-\");\n        for (let v of selectedVariables) {\n            headers.push(v.text);\n        }\n        namedData.push(headers);\n\n        for (let i = 0; i < data.length; i++) {\n            let row = [selectedHospitals[i].name].concat(data[i]);\n            namedData.push(row);\n        }\n\n        this.setState({\n            csvData : namedData\n        });\n    }\n\n    /**\n     * dataFetched - Called when the API-Request is completed\n     */\n    dataFetched = () => {\n        console.log('whoeeh');\n    }\n\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    render() {\n        const { t } = this.props;\n        return (\n            <div className=\"interactiveTable\">\n                <VariableSelector\n                    className=\"variableSelector\"\n                    variables={this.props.variables}\n                    variableDropdowns={this.state.variableDropdowns}\n\t\t\t\t\taddVariable={this.addVariable}\n                />\n                <HospitalSelector\n                    className=\"hospitalSelector\"\n                    hospitals={this.props.hospitals}\n                    hospitalDropdowns={this.state.hospitalDropdowns}\n                    selectedHospitals={this.state.selectedHospitals}\n                    addHospital={this.addHospital}\n                />\n                <ResultTable\n                    className=\"resultTable\"\n                    selectedHospitals={this.state.selectedHospitals}\n                    selectedVariables={this.state.selectedVariables}\n                    hospitalData={this.props.hospitals}\n                    dataLoaded={this.props.tableDataLoaded}\n                    dataGenerated={this.props.tableDataGenerated}\n                    submitTableData={this.submitTableData}\n                />\n\t\t\t\t{/*<CSVLink\n\t\t\t\t\tdata={this.state.csvData}\n\t\t\t\t\tfilename=\"medlandscapeCSV.csv\"\n\t\t\t\t\tclassName=\"CSVButton\"\n\t\t\t\t\tref={(r) => this.csvLink = r}\n\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t/>\n                <YearSelector\n                    className='yearSelector'\n                    yearDropdowns={this.state.yearDropdowns}\n                />*/}\n\n\t\t\t\t<button className=\"btnCreateCSV\"\n\t\t\t\tonClick={() => this.csvLink.link.click()}>\n\t\t\t\t{t('tableView.btnCreateCSV')}\n\t\t\t\t</button>\n                <button\n                    className=\"btnGenerateTable\"\n                    onClick={() => this.props.requestData(this.state.selectedVariables, this.dataFetched)}>{t('tableView.btnCreateTable')}\n                </button>\n                <button\n                    className=\"btnAddAllHospitals\"\n                    onClick={() => this.addAllHospitals()}>{t('tableView.btnAddAllHospitals')}\n                </button>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n * requestData: function that will be called to download the requested data\n * hasLoaded: bool that will be true if the data is loaded\n * retriggerTableGeneration: will cause resultTable to regenerate its table\n *  without resending a request\n */\nInteractiveTable.propTypes = {\n    variables: PropTypes.array.isRequired,\n    hospitals: PropTypes.array.isRequired,\n    requestData: PropTypes.func.isRequired,\n    hasLoaded: PropTypes.bool.isRequired,\n    retriggerTableGeneration: PropTypes.func.isRequired,\n\n}\n\nconst LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;\n"]},"metadata":{},"sourceType":"module"}