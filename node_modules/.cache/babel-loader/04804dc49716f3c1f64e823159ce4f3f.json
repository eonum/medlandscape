{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js';\nimport CentralPanel from './components/CentralPanel/CentralPanel.js';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js';\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      hospitalsByEnums: [],\n      hospitalsByType: [],\n      years: [],\n      selectedYear: \"\",\n      view: 1,\n      hasLoaded: false,\n      tableDataLoaded: false,\n      selectedHospitalTypes: []\n      /**\n      * Calls the API with specific query\n      * @param {String} key String value that is either hospitals or cantons.\n      * @param  {String} query The specific query to use for the API call.\n      */\n\n    };\n\n    _this.applyVariables = function (key, query) {\n      return _this.apiCall(query).then(function (results) {\n        if (key === \"hospitals\") {\n          var _this$setState;\n\n          _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"selectedHospitals\", results), _this$setState));\n        } else {\n          _this.setState(_defineProperty({}, key, results));\n        }\n      }).then(function () {\n        if (_this.state.view !== 1) {\n          _this.setState({\n            hasLoaded: true\n          });\n        } else {\n          var years = _this.getYears(_this.state[key]);\n\n          _this.setState({\n            years: years,\n            selectedYear: years[0],\n            hasLoaded: true\n          });\n        }\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + _this.props.i18n.language + apiRequest + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr = []; // fetches all Variables from the API\n\n      _this.apiCall(\"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        }); // the \"type\" variable which is loaded with every request\n\n\n        var typeVar = result.filter(function (variable) {\n          return variable.name === \"Typ\";\n        }); // the default variable chosen when loading the app\n\n        _this.selectVariable(result[1]);\n\n        var query = \"hospitals?variables=\";\n        query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n\n        _this.applyVariables(\"hospitals\", query);\n      });\n    };\n\n    _this.selectVariable = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.filteredHospitals = function () {\n      var _this$state = _this.state,\n          hospitalsByEnums = _this$state.hospitalsByEnums,\n          hospitalsByType = _this$state.hospitalsByType;\n      var filteredHospitals = [];\n\n      if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n        filteredHospitals = _this.state.hospitalsByEnums.filter(function (hospital) {\n          return _this.state.hospitalsByType.includes(hospital);\n        });\n      } else {\n        filteredHospitals = hospitalsByType > hospitalsByEnums ? hospitalsByType : hospitalsByEnums;\n      }\n\n      return filteredHospitals;\n    };\n\n    _this.getYears = function (objects) {\n      var _this$state$selectedV = _this.state.selectedVariable,\n          variable_model = _this$state$selectedV.variable_model,\n          is_time_series = _this$state$selectedV.is_time_series,\n          name = _this$state$selectedV.name;\n      var maxYears = [],\n          years;\n\n      for (var i = 0; i < objects.length; i++) {\n        years = Object.keys(objects[i].attributes[name]);\n        maxYears = years.length > maxYears.length ? years : maxYears;\n      }\n\n      return maxYears;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.setView = function (view) {\n      _this.setState({\n        view: view\n      });\n    };\n\n    _this.sethospitalsByEnums = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByEnums: selectedHospitals\n      });\n    };\n\n    _this.sethospitalsByType = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByType: selectedHospitals\n      });\n    };\n\n    _this.setSelectedHospitalTypes = function (selectedHospitalTypes) {\n      _this.setState({\n        selectedHospitalTypes: selectedHospitalTypes\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          selectedVariable = _this$state2.selectedVariable,\n          selectedHospitals = _this$state2.selectedHospitals,\n          selectedYear = _this$state2.selectedYear,\n          hasLoaded = _this$state2.hasLoaded,\n          view = _this$state2.view,\n          hospitals = _this$state2.hospitals,\n          cantons = _this$state2.cantons,\n          variables = _this$state2.variables,\n          years = _this$state2.years;\n      var centralPanel = view !== 1 ? React.createElement(CentralPanel, {\n        view: view,\n        variables: variables,\n        hospitals: hospitals,\n        hasLoaded: hasLoaded,\n        fetchData: this.applyVariables,\n        objects: selectedVariable.variable_model === \"Hospital\" ? this.state.selectedHospitals : this.state.cantons,\n        variableInfo: selectedVariable,\n        year: selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }) : null;\n      var slider = years.length > 1 && view === 1 ? React.createElement(Slider, {\n        years: years,\n        selectedYear: selectedYear,\n        setYear: this.setYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }) : null;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(Maps, {\n        objects: selectedVariable.variable_model === \"Hospital\" ? this.filteredHospitals : cantons,\n        variableInfo: selectedVariable,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(ControlPanel, {\n        view: view,\n        setView: this.setView,\n        hospitals: hospitals,\n        selectVariable: this.selectVariable,\n        selectedVariable: selectedVariable,\n        variables: variables,\n        fetchData: this.applyVariables,\n        filterByEnum: this.sethospitalsByEnums,\n        filterByType: this.sethospitalsByType,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        setSelectedHospitalTypes: this.setSelectedHospitalTypes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }), centralPanel, React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }), slider));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","Maps","withTranslation","ControlPanel","CentralPanel","LanguagePicker","Slider","InteractiveTable","apiURL","apiRequest","App","state","variables","cantons","hospitals","selectedVariable","hospitalsByEnums","hospitalsByType","years","selectedYear","view","hasLoaded","tableDataLoaded","selectedHospitalTypes","applyVariables","key","query","apiCall","then","results","setState","getYears","fetch","props","i18n","language","res","json","initApiCall","varResultArr","result","typeVar","filter","variable","name","selectVariable","encodeURIComponent","item","tableDataGenerated","filteredHospitals","length","hospital","includes","objects","variable_model","is_time_series","maxYears","i","Object","keys","attributes","setYear","year","setView","sethospitalsByEnums","selectedHospitals","sethospitalsByType","setSelectedHospitalTypes","centralPanel","slider","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js'\nimport CentralPanel from './components/CentralPanel/CentralPanel.js'\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js'\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables: [],\n        cantons : [],\n        hospitals : [],\n\n        selectedVariable : {},\n        hospitalsByEnums : [],\n        hospitalsByType : [],\n        years : [],\n        selectedYear : \"\",\n        view : 1,\n        hasLoaded : false,\n        tableDataLoaded : false,\n        selectedHospitalTypes : []\n    }\n\n    /**\n    * Calls the API with specific query\n    * @param {String} key String value that is either hospitals or cantons.\n    * @param  {String} query The specific query to use for the API call.\n    */\n    applyVariables = (key, query) => {\n        return this.apiCall(query).then((results) => {\n            if (key === \"hospitals\") {\n                this.setState({\n                    [key] : results,\n                    selectedHospitals : results\n                });\n            } else {\n                this.setState({\n                    [key] : results,\n                });\n            }\n        }).then(() => {\n            if (this.state.view !== 1) {\n                this.setState({\n                    hasLoaded : true\n                })\n            } else {\n                let years = this.getYears(this.state[key]);\n                this.setState({\n                    years : years,\n                    selectedYear : years[0],\n                    hasLoaded : true\n                })\n            }\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + this.props.i18n.language + apiRequest + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        let varResultArr = [];\n\n        // fetches all Variables from the API\n        this.apiCall((\"variables\")).then((result) => {\n            this.setState({\n                variables : result,\n            });\n\n            // the \"type\" variable which is loaded with every request\n            let typeVar = result.filter((variable) => {\n                return (variable.name === \"Typ\");\n            })\n\n            // the default variable chosen when loading the app\n            this.selectVariable(result[1]);\n            let query = \"hospitals?variables=\";\n            query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n            this.applyVariables(\"hospitals\", query);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * then calls applyVariables to fetch data from the API.\n    * @param  {Variable object} item The selected variable.\n    */\n    selectVariable = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n    }\n\n    /**\n     * Comment here please\n     */\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    filteredHospitals = () => {\n        const {hospitalsByEnums, hospitalsByType} = this.state;\n\n        let filteredHospitals = [];\n        if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n            filteredHospitals = this.state.hospitalsByEnums.filter((hospital) => {\n                return (this.state.hospitalsByType.includes(hospital))\n            })\n        } else {\n            filteredHospitals = (hospitalsByType > hospitalsByEnums) ? hospitalsByType : hospitalsByEnums;\n        }\n\n        return filteredHospitals\n    }\n\n    /**\n     * Returns list of available years for selected Variable.\n     * @return {Array} The available years.\n     */\n    getYears = (objects) => {\n        const {variable_model, is_time_series, name} = this.state.selectedVariable;\n        let maxYears = [], years;\n        for (var i = 0; i < objects.length; i++) {\n            years = Object.keys(objects[i].attributes[name]);\n            maxYears = (years.length > maxYears.length) ? years : maxYears;\n        }\n        return maxYears;\n    }\n\n    /**\n     * Setter for the selectedYear state variable.\n     * @param {String} year The selected year.\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year\n        })\n    }\n\n    /**\n     * Setter for the view state variable.\n     * @param {int} view The selected view.\n     */\n    setView = (view) => {\n        this.setState({\n            view : view\n        })\n    }\n\n    /**\n     * Set hospitalsByEnums to the selected Hospital Variable\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    sethospitalsByEnums = (selectedHospitals) => {\n        this.setState({\n            hospitalsByEnums : selectedHospitals\n        })\n    }\n\n    /**\n     * Set hospitalsByType to selected Hospital Type\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    sethospitalsByType = (selectedHospitals) => {\n        this.setState({\n            hospitalsByType : selectedHospitals\n        })\n    }\n\n    setSelectedHospitalTypes = (selectedHospitalTypes) => {\n        this.setState({\n            selectedHospitalTypes : selectedHospitalTypes\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n\n        const {selectedVariable, selectedHospitals, selectedYear, hasLoaded, view, hospitals, cantons, variables, years} = this.state;\n\n\n        let centralPanel = (view !== 1)\n            ? (\n                <CentralPanel\n                    view={view}\n                    variables={variables}\n                    hospitals={hospitals}\n                    hasLoaded={hasLoaded}\n                    fetchData={this.applyVariables}\n\t\t\t\t\tobjects={(selectedVariable.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons}\n                    variableInfo={selectedVariable}\n                    year={selectedYear}\n                />\n            )\n            : null\n        ;\n\n        let slider = (years.length > 1 && view === 1)\n            ? (\n                <Slider years={years} selectedYear={selectedYear} setYear={this.setYear}/>\n            )\n            : null\n        ;\n\n        return (\n\t\t\t<div className=\"App\">\n                <Maps\n                    objects={(selectedVariable.variable_model === \"Hospital\") ? this.filteredHospitals : cantons}\n                    variableInfo={selectedVariable}\n                    year={selectedYear}\n                    hasLoaded={hasLoaded}\n                    view={view}\n                />\n\t\t\t\t<div className=\"grid-container\">\n                    <ControlPanel\n                        view={view}\n                        setView={this.setView}\n                        hospitals={hospitals}\n                        selectVariable={this.selectVariable}\n                        selectedVariable={selectedVariable}\n                        variables={variables}\n                        fetchData={this.applyVariables}\n                        filterByEnum={this.sethospitalsByEnums}\n                        filterByType={this.sethospitalsByType}\n                        year={selectedYear}\n                        hasLoaded={hasLoaded}\n                        setSelectedHospitalTypes={this.setSelectedHospitalTypes}\n                    />\n                    {centralPanel}\n                    <LanguagePicker resendInitApiCall={this.initApiCall} />\n                    {slider}\n\t\t\t\t</div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}