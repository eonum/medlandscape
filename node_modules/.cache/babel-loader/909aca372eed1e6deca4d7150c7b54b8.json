{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js';\nimport CentralPanel from './components/CentralPanel/CentralPanel.js';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      hospitals: [],\n      cantons: [],\n      // different variables applied to the different views\n      hospitalMapSelectedVariable: {},\n      cantonMapSelectedVariable: {},\n      boxPlotSelectedVariable: {},\n      regressionSelectedVariableX: {},\n      regressionSelectedVariableY: {},\n      // different hospital results stored per view\n      mapHospitals: [],\n      tableHospitals: [],\n      boxPlotHospitals: [],\n      regressionHospitals: [],\n      // results of the different filters\n      hospitalsByEnums: [],\n      hospitalsByType: [],\n      linRegHospitalsByType: [],\n      unfilteredHospitals: [],\n      filteredHospitals: [],\n      years: [],\n      selectedYear: \"\",\n      view: 1,\n      mapView: 1,\n      graphView: 1,\n      csvData: [],\n      hasLoaded: false,\n      tableDataLoaded: false\n      /**\n      * Calls the API with specific query.\n      * @param  {String} query The specific query to use for the API call.\n      */\n\n    };\n\n    _this.applyVariables = function (query) {\n      console.log(\"FETCHING DATA, QUERY: \" + query);\n      var key;\n      return _this.apiCall(query).then(function (results) {\n        var _this$setState;\n\n        console.log(\"DATA FETCHED\"); // determining which state variable to store the results in\n\n        if (_this.state.view === 1) {\n          key = _this.state.mapView === 1 ? \"mapHospitals\" : \"cantons\";\n        } else if (_this.state.view === 2) {\n          key = \"tableHospitals\";\n        } else {\n          key = _this.state.graphView === 1 ? \"boxPlotHospitals\" : \"regressionHospitals\";\n        }\n\n        _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"hasLoaded\", _this.state.view === 2), _this$setState), function () {\n          // On the map, years and which hospitals to pass to Maps need to be redetermined\n          if (_this.state.view === 1) {\n            if (_this.state.mapView === 1) {\n              _this.filterHospitals(true); // only needed for hospitals\n\n            } else {\n              _this.setYears(results);\n            }\n          } else if (_this.state.view === 3) {\n            if (_this.state.graphView === 2) {\n              _this.filterHospitals(true); // only needed for hospitals\n\n            } else {\n              _this.setYears(results);\n            }\n          }\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + _this.props.i18n.language + apiRequest + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.changeLanguage = function () {\n      console.log(\"TRANSLATING\");\n\n      _this.apiCall(\"variables\").then(function (results) {\n        var currentVariableKey = _this.getViewSpecificVariable();\n\n        if (currentVariableKey !== \"regressionSelectedVariableX\") {\n          var currentVariable = _this.state[currentVariableKey];\n          var translatedCurrentVariable = currentVariable; // as fallback, this makes sure nothing changes\n\n          if (Object.keys(currentVariable).length > 0) {\n            // making sure that currentVariable.name exists\n            for (var i = 0; i < results.length; i++) {\n              if (results[i].name === currentVariable.name) {\n                translatedCurrentVariable = results[i];\n              }\n            }\n          }\n\n          _this.setState(_defineProperty({\n            variables: results\n          }, currentVariableKey, translatedCurrentVariable));\n        } else {\n          var _currentVariable = _this.state.regressionSelectedVariableX;\n          var currentVariable2 = _this.state.regressionSelectedVariableY;\n          var _translatedCurrentVariable = _currentVariable;\n          var translatedCurrentVariable2 = currentVariable2;\n\n          if (Object.keys(_currentVariable).length > 0 && Object.keys(currentVariable2).length > 0) {\n            // making sure that currentVariable.name exists\n            for (var i = 0; i < results.length; i++) {\n              if (results[i].name === _currentVariable.name) {\n                _translatedCurrentVariable = results[i];\n              } else if (results[i].name === currentVariable2.name) {\n                translatedCurrentVariable2 = results[i];\n              }\n            }\n          }\n\n          _this.setState({\n            variables: results,\n            regressionSelectedVariableX: _translatedCurrentVariable,\n            regressionSelectedVariableY: translatedCurrentVariable2\n          });\n        }\n      });\n    };\n\n    _this.initApiCall = function () {\n      // fetching all hospitals from the API\n      _this.apiCall(\"hospitals\").then(function (result) {\n        _this.setState({\n          hospitals: result\n        });\n      }); // fetches all Variables from the API\n\n\n      _this.apiCall(\"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        }); // the default variable chosen when loading the app\n\n\n        _this.setVariable(result[1]);\n\n        var query = \"hospitals?variables=\";\n        query += encodeURIComponent(result[1].name + \"$Typ\");\n\n        _this.applyVariables(query);\n      });\n    };\n\n    _this.setVariable = function (item) {\n      console.log(\"============================\");\n\n      if (item.length === 2) {\n        if (item[0] !== _this.state.regressionSelectedVariableX || item[1] !== _this.state.regressionSelectedVariableY) {\n          console.log(\"SETTING variable to \" + item[0].name + \", \" + item[1].name);\n\n          _this.setState({\n            regressionSelectedVariableX: item[0],\n            regressionSelectedVariableY: item[1],\n            hasLoaded: false\n          });\n        }\n      } else {\n        console.log(\"SETTING variable to \" + item.name);\n\n        var key = _this.getViewSpecificVariable();\n\n        if (_this.state[key] !== item) {\n          var _this$setState3;\n\n          _this.setState((_this$setState3 = {}, _defineProperty(_this$setState3, key, item), _defineProperty(_this$setState3, \"hasLoaded\", false), _this$setState3));\n        } else {\n          console.log(\"Same Variable selected, nothing to change.\");\n        }\n      }\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.filterHospitals = function (updateYears) {\n      var _this$state = _this.state,\n          hospitalsByEnums = _this$state.hospitalsByEnums,\n          hospitalsByType = _this$state.hospitalsByType,\n          linRegHospitalsByType = _this$state.linRegHospitalsByType,\n          mapHospitals = _this$state.mapHospitals,\n          regressionHospitals = _this$state.regressionHospitals;\n      var filteredHospitals = [],\n          intersectingHospitals = []; // filtering for maps\n\n      if (_this.state.view === 1) {\n        // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n        if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n          // in case of no matches, there would be no need to do intersection\n          if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n            // we have to compare names because the attribute of each hospital has a different length\n            for (var i = 0; i < hospitalsByType.length; i++) {\n              for (var j = 0; j < hospitalsByEnums.length; j++) {\n                if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                  intersectingHospitals.push(hospitalsByEnums[j]);\n                }\n              }\n            }\n          } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n            intersectingHospitals = hospitalsByType > hospitalsByEnums ? hospitalsByType : hospitalsByEnums;\n          } else {\n            filteredHospitals = mapHospitals;\n          }\n\n          if (intersectingHospitals.length > 0) {\n            for (var _i = 0; _i < intersectingHospitals.length; _i++) {\n              for (var _j = 0; _j < mapHospitals.length; _j++) {\n                if (intersectingHospitals[_i].name === mapHospitals[_j].name) {\n                  filteredHospitals.push(mapHospitals[_j]);\n                }\n              }\n            }\n          }\n        }\n      } else if (_this.state.view === 3) {\n        // filtering for lin. regression\n        if (linRegHospitalsByType.length > 0 && regressionHospitals.length > 0) {\n          for (var _i2 = 0; _i2 < linRegHospitalsByType.length; _i2++) {\n            for (var _j2 = 0; _j2 < regressionHospitals.length; _j2++) {\n              if (linRegHospitalsByType[_i2].name === regressionHospitals[_j2].name) {\n                filteredHospitals.push(regressionHospitals[_j2]);\n              }\n            }\n          }\n        } else {\n          filteredHospitals = regressionHospitals;\n        }\n      }\n\n      console.log(\"DATA FILTERED\");\n      var unfiltered = mapHospitals;\n      var toDeriveYearsFrom = _this.state.view === 1 ? mapHospitals : regressionHospitals;\n\n      _this.setState({\n        filteredHospitals: filteredHospitals,\n        unfilteredHospitals: unfiltered,\n        hasLoaded: !updateYears\n      }, function () {\n        if (updateYears) {\n          _this.setYears(toDeriveYearsFrom);\n        }\n      });\n    };\n\n    _this.setYears = function (objects) {\n      console.log(\"GETTING YEARS\");\n\n      var name = _this.state[_this.getViewSpecificVariable()].name;\n\n      var maxYears = [],\n          years,\n          recent;\n\n      for (var i = 0; i < objects.length; i++) {\n        years = Object.keys(objects[i].attributes[name]);\n        maxYears = years.length > maxYears.length ? years : maxYears;\n      }\n\n      recent = maxYears.length - 1;\n\n      _this.setState({\n        years: maxYears,\n        selectedYear: maxYears.length > 0 ? maxYears[recent] : \"\",\n        hasLoaded: true\n      });\n    };\n\n    _this.getViewSpecificVariable = function () {\n      var v;\n\n      switch (_this.state.view) {\n        case 1:\n          v = _this.state.mapView === 1 ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\";\n          break;\n\n        case 3:\n          v = _this.state.graphView === 1 ? \"boxPlotSelectedVariable\" : \"regressionSelectedVariableX\";\n          break;\n\n        default:\n          v = \"hospitalMapSelectedVariable\";\n      }\n\n      return v;\n    };\n\n    _this.setYear = function (year) {\n      console.log(\"============================\");\n      console.log(\"CHANGING YEAR\");\n\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.setView = function (view) {\n      console.log(\"============================\");\n      console.log(\"SWITCHING TABVIEW\");\n\n      _this.setState({\n        view: view,\n        hasLoaded: view === 2\n      }, function () {\n        if (view === 1) {\n          var objects = _this.state.mapView === 1 ? _this.state.mapHospitals : _this.state.cantons;\n\n          if (_this.state.mapView === 1) {\n            _this.filterHospitals(true);\n          } else {\n            _this.setYears(objects);\n          }\n        } else if (view === 3) {\n          var _objects = _this.state.graphView === 1 ? _this.state.boxPlotHospitals : _this.state.regressionHospitals;\n\n          if (_this.state.graphView === 2) {\n            _this.filterHospitals(true);\n          } else {\n            _this.setYears(_objects);\n          }\n        }\n      });\n    };\n\n    _this.setMapView = function (view) {\n      console.log(\"============================\");\n      console.log(\"SWITCHING MAPVIEW\");\n\n      _this.setState({\n        mapView: view,\n        hasLoaded: false\n      }, function () {\n        var objects = view === 1 ? _this.state.mapHospitals : _this.state.cantons;\n\n        if (view === 1) {\n          _this.filterHospitals(true);\n        } else {\n          _this.setYears(objects);\n        }\n      });\n    };\n\n    _this.setGraphView = function (view) {\n      console.log(\"============================\");\n      console.log(\"SWITCHING GRAPHVIEW\");\n\n      _this.setState({\n        graphView: view,\n        hasLoaded: false\n      }, function () {\n        var objects = view === 1 ? _this.state.boxPlotHospitals : _this.state.regressionHospitals;\n\n        if (view === 2) {\n          _this.filterHospitals(true);\n        } else {\n          _this.setYears(objects);\n        }\n      });\n    };\n\n    _this.setHospitalsByEnums = function (selectedHospitals) {\n      var isEmpty = !(selectedHospitals.length > 0);\n\n      _this.setState({\n        hospitalsByEnums: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        if (!isEmpty) {\n          console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n\n          _this.filterHospitals(false); // years do not need to be updated\n\n        }\n      });\n    };\n\n    _this.setHospitalsByType = function (selectedHospitals) {\n      var isEmpty = !(selectedHospitals.length > 0);\n\n      _this.setState({\n        hospitalsByType: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        if (!isEmpty) {\n          console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n\n          _this.filterHospitals(false); // years do not need to be updated\n\n        }\n      });\n    };\n\n    _this.setLinRegHospitalsByType = function (selectedHospitals) {\n      var isEmpty = !(selectedHospitals.length > 0);\n\n      _this.setState({\n        linRegHospitalsByType: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        if (!isEmpty) {\n          console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n\n          _this.filterHospitals(false); // years do not need to be updated\n\n        }\n      });\n    };\n\n    _this.setCSVData = function (data) {\n      _this.setState({\n        csvData: data\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          variables = _this$state2.variables,\n          hospitals = _this$state2.hospitals,\n          cantons = _this$state2.cantons,\n          hospitalMapSelectedVariable = _this$state2.hospitalMapSelectedVariable,\n          cantonMapSelectedVariable = _this$state2.cantonMapSelectedVariable,\n          boxPlotSelectedVariable = _this$state2.boxPlotSelectedVariable,\n          regressionSelectedVariableX = _this$state2.regressionSelectedVariableX,\n          regressionSelectedVariableY = _this$state2.regressionSelectedVariableY,\n          mapHospitals = _this$state2.mapHospitals,\n          tableHospitals = _this$state2.tableHospitals,\n          boxPlotHospitals = _this$state2.boxPlotHospitals,\n          unfilteredHospitals = _this$state2.unfilteredHospitals,\n          filteredHospitals = _this$state2.filteredHospitals,\n          years = _this$state2.years,\n          selectedYear = _this$state2.selectedYear,\n          view = _this$state2.view,\n          mapView = _this$state2.mapView,\n          graphView = _this$state2.graphView,\n          csvData = _this$state2.csvData,\n          hasLoaded = _this$state2.hasLoaded;\n      var viewSpecificObjects;\n      var viewSpecificVariable; // determines which objects to pass to children components depending on the view\n\n      switch (view) {\n        case 1:\n          viewSpecificObjects = mapView === 1 ? filteredHospitals : cantons;\n          viewSpecificVariable = mapView === 1 ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n          break;\n\n        case 2:\n          viewSpecificObjects = tableHospitals.length > 0 ? tableHospitals : hospitals;\n          break;\n\n        case 3:\n          viewSpecificObjects = graphView === 1 ? boxPlotHospitals : filteredHospitals;\n          viewSpecificVariable = graphView === 1 ? boxPlotSelectedVariable : [regressionSelectedVariableX, regressionSelectedVariableY];\n          break;\n\n        default:\n          viewSpecificObjects = mapHospitals;\n          viewSpecificVariable = hospitalMapSelectedVariable;\n          break;\n      }\n\n      if (hasLoaded) {\n        console.log(\"DATA READY\");\n        console.log(\"PASSING VAR: \");\n        console.log(viewSpecificVariable);\n        console.log(\"PASSING OBJ: \" + viewSpecificObjects.length);\n        console.log(\"OBJ SAMPLE: \");\n        console.log(viewSpecificObjects[0]);\n      }\n\n      var centralPanel = view !== 1 ? React.createElement(CentralPanel, {\n        view: view,\n        graphView: graphView,\n        variables: variables,\n        hasLoaded: hasLoaded,\n        fetchData: this.applyVariables,\n        objects: viewSpecificObjects,\n        setVariable: this.setVariable,\n        selectedVariable: viewSpecificVariable,\n        setCSVData: this.setCSVData,\n        year: selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      }) : null;\n      var slider; // display the slider only on Maps or Graphs and only if more than one year is available\n\n      if (years.length > 1 && view !== 2 && Object.keys(viewSpecificVariable).length > 0) {\n        slider = React.createElement(Slider, {\n          years: years,\n          selectedYear: selectedYear,\n          setYear: this.setYear,\n          hasLoaded: hasLoaded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 536\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }, React.createElement(Maps, {\n        objects: viewSpecificObjects,\n        selectedVariable: viewSpecificVariable,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        mapView: mapView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      }, React.createElement(ControlPanel, {\n        variables: variables,\n        setVariable: this.setVariable,\n        selectedVariable: viewSpecificVariable,\n        fetchData: this.applyVariables,\n        unfilteredHospitals: unfilteredHospitals,\n        filterByEnum: this.setHospitalsByEnums,\n        filterByType: this.setHospitalsByType,\n        filterLinRegByType: this.setLinRegHospitalsByType,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        setView: this.setView,\n        mapView: mapView,\n        setMapView: this.setMapView,\n        graphView: graphView,\n        setGraphView: this.setGraphView,\n        csvData: csvData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551\n        },\n        __self: this\n      }), centralPanel, React.createElement(LanguagePicker, {\n        changeLanguage: this.changeLanguage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }), slider));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","Maps","withTranslation","ControlPanel","CentralPanel","LanguagePicker","Slider","apiURL","apiRequest","App","state","variables","hospitals","cantons","hospitalMapSelectedVariable","cantonMapSelectedVariable","boxPlotSelectedVariable","regressionSelectedVariableX","regressionSelectedVariableY","mapHospitals","tableHospitals","boxPlotHospitals","regressionHospitals","hospitalsByEnums","hospitalsByType","linRegHospitalsByType","unfilteredHospitals","filteredHospitals","years","selectedYear","view","mapView","graphView","csvData","hasLoaded","tableDataLoaded","applyVariables","query","console","log","key","apiCall","then","results","setState","filterHospitals","setYears","fetch","props","i18n","language","res","json","changeLanguage","currentVariableKey","getViewSpecificVariable","currentVariable","translatedCurrentVariable","Object","keys","length","i","name","currentVariable2","translatedCurrentVariable2","initApiCall","result","setVariable","encodeURIComponent","item","tableDataGenerated","updateYears","intersectingHospitals","j","push","unfiltered","toDeriveYearsFrom","objects","maxYears","recent","attributes","v","setYear","year","setView","setMapView","setGraphView","setHospitalsByEnums","selectedHospitals","isEmpty","setHospitalsByType","setLinRegHospitalsByType","setCSVData","data","viewSpecificObjects","viewSpecificVariable","centralPanel","slider","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js'\nimport CentralPanel from './components/CentralPanel/CentralPanel.js'\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js'\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables : [],\n        hospitals : [],\n        cantons : [],\n\n        // different variables applied to the different views\n        hospitalMapSelectedVariable : {},\n        cantonMapSelectedVariable : {},\n        boxPlotSelectedVariable : {},\n        regressionSelectedVariableX : {},\n        regressionSelectedVariableY : {},\n\n        // different hospital results stored per view\n        mapHospitals : [],\n        tableHospitals : [],\n        boxPlotHospitals : [],\n        regressionHospitals : [],\n\n        // results of the different filters\n        hospitalsByEnums : [],\n        hospitalsByType : [],\n        linRegHospitalsByType : [],\n        unfilteredHospitals : [],\n        filteredHospitals : [],\n\n        years : [],\n        selectedYear : \"\",\n\n        view : 1,\n        mapView : 1,\n        graphView : 1,\n\n        csvData : [],\n\n        hasLoaded : false,\n        tableDataLoaded : false\n    }\n\n    /**\n    * Calls the API with specific query.\n    * @param  {String} query The specific query to use for the API call.\n    */\n    applyVariables = (query) => {\n        console.log(\"FETCHING DATA, QUERY: \" + query);\n        let key;\n        return this.apiCall(query).then((results) => {\n            console.log(\"DATA FETCHED\");\n\n            // determining which state variable to store the results in\n            if (this.state.view === 1) {\n                key = (this.state.mapView === 1) ? \"mapHospitals\" : \"cantons\";\n            } else if (this.state.view === 2) {\n                key = \"tableHospitals\";\n            } else {\n                key = (this.state.graphView === 1) ? \"boxPlotHospitals\" : \"regressionHospitals\";\n            }\n\n            this.setState({\n                [key] : results,\n                hasLoaded : (this.state.view === 2)\n            }, () => {\n                // On the map, years and which hospitals to pass to Maps need to be redetermined\n                if (this.state.view === 1) {\n                    if (this.state.mapView === 1) {\n                        this.filterHospitals(true); // only needed for hospitals\n                    } else {\n                        this.setYears(results);\n                    }\n                } else if (this.state.view === 3) {\n                    if (this.state.graphView === 2) {\n                        this.filterHospitals(true); // only needed for hospitals\n                    } else {\n                        this.setYears(results);\n                    }\n                }\n            })\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + this.props.i18n.language + apiRequest + query).then(res => res.json());\n    }\n\n    /**\n     * Handles the change of language:\n     * Replaces state.variables\n     * Replaces viewSpecificVariable with translated equivalent\n     */\n    changeLanguage = () => {\n        console.log(\"TRANSLATING\");\n        this.apiCall(\"variables\").then((results) => {\n            let currentVariableKey = this.getViewSpecificVariable();\n\n            if (currentVariableKey !== \"regressionSelectedVariableX\") {\n                let currentVariable = this.state[currentVariableKey];\n                let translatedCurrentVariable = currentVariable; // as fallback, this makes sure nothing changes\n                if (Object.keys(currentVariable).length > 0) { // making sure that currentVariable.name exists\n                    for (var i = 0; i < results.length; i++) {\n                        if (results[i].name === currentVariable.name) {\n                            translatedCurrentVariable = results[i];\n                        }\n                    }\n                }\n                this.setState({\n                    variables : results,\n                    [currentVariableKey] : translatedCurrentVariable\n                });\n            } else {\n                let currentVariable = this.state.regressionSelectedVariableX;\n                let currentVariable2 = this.state.regressionSelectedVariableY;\n                let translatedCurrentVariable = currentVariable;\n                let translatedCurrentVariable2 = currentVariable2;\n                if (Object.keys(currentVariable).length > 0 && Object.keys(currentVariable2).length > 0) { // making sure that currentVariable.name exists\n                    for (var i = 0; i < results.length; i++) {\n                        if (results[i].name === currentVariable.name) {\n                            translatedCurrentVariable = results[i];\n                        } else if (results[i].name === currentVariable2.name){\n                            translatedCurrentVariable2 = results[i];\n                        }\n                    }\n                }\n                this.setState({\n                    variables : results,\n                    regressionSelectedVariableX : translatedCurrentVariable,\n                    regressionSelectedVariableY : translatedCurrentVariable2\n                })\n            }\n        });\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        // fetching all hospitals from the API\n        this.apiCall(\"hospitals\").then((result) => {\n            this.setState({\n                hospitals : result\n            });\n        })\n\n        // fetches all Variables from the API\n        this.apiCall(\"variables\").then((result) => {\n            this.setState({\n                variables : result\n            });\n\n            // the default variable chosen when loading the app\n            this.setVariable(result[1]);\n            let query = \"hospitals?variables=\";\n            query += encodeURIComponent(result[1].name + \"$Typ\");\n            this.applyVariables(query);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component (or two if lin. reg.),\n    * @param  {Variable object} item The selected variable.\n    */\n    setVariable = (item) => {\n        console.log(\"============================\");\n        if (item.length === 2) {\n            if (item[0] !== this.state.regressionSelectedVariableX || item[1] !== this.state.regressionSelectedVariableY) {\n                console.log(\"SETTING variable to \" + item[0].name + \", \" + item[1].name);\n                this.setState({\n                    regressionSelectedVariableX : item[0],\n                    regressionSelectedVariableY : item[1],\n                    hasLoaded : false\n                })\n            }\n        } else {\n            console.log(\"SETTING variable to \" + item.name);\n            let key = this.getViewSpecificVariable();\n\n            if (this.state[key] !== item) {\n                this.setState({\n                    [key] : item,\n                    hasLoaded : false\n                });\n            } else {\n                console.log(\"Same Variable selected, nothing to change.\");\n            }\n        }\n    }\n\n    /**\n     * Comment here please\n     */\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    /**\n     * Determines which Hospitals to pass to MAPS.js according to type & enum filters,\n     * saves the list into filteredHospitals in the state.\n     */\n    filterHospitals = (updateYears) => {\n        const {hospitalsByEnums, hospitalsByType, linRegHospitalsByType, mapHospitals, regressionHospitals} = this.state;\n\n        let filteredHospitals = [], intersectingHospitals = [];\n\n        // filtering for maps\n        if (this.state.view === 1) {\n            // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n            if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n\n                // in case of no matches, there would be no need to do intersection\n                if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n                    // we have to compare names because the attribute of each hospital has a different length\n                    for (let i = 0; i < hospitalsByType.length; i++) {\n                        for (let j = 0; j < hospitalsByEnums.length; j++) {\n                            if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                                intersectingHospitals.push(hospitalsByEnums[j]);\n                            }\n                        }\n                    }\n                } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n                    intersectingHospitals = (hospitalsByType > hospitalsByEnums) ? hospitalsByType : hospitalsByEnums;\n                } else {\n                    filteredHospitals = mapHospitals;\n                }\n\n                if (intersectingHospitals.length > 0) {\n                    for (let i = 0; i < intersectingHospitals.length; i++) {\n                        for (let j = 0; j < mapHospitals.length; j++) {\n                            if (intersectingHospitals[i].name === mapHospitals[j].name) {\n                                filteredHospitals.push(mapHospitals[j]);\n                            }\n                        }\n                    }\n                }\n            }\n        } else if (this.state.view === 3) { // filtering for lin. regression\n            if (linRegHospitalsByType.length > 0 && regressionHospitals.length > 0) {\n                for (let i = 0; i < linRegHospitalsByType.length; i++) {\n                    for (let j = 0; j < regressionHospitals.length; j++) {\n                        if (linRegHospitalsByType[i].name === regressionHospitals[j].name) {\n                            filteredHospitals.push(regressionHospitals[j]);\n                        }\n                    }\n                }\n            } else {\n                filteredHospitals = regressionHospitals;\n            }\n        }\n        console.log(\"DATA FILTERED\");\n        let unfiltered = mapHospitals;\n        let toDeriveYearsFrom = (this.state.view === 1) ? mapHospitals : regressionHospitals;\n        this.setState({\n            filteredHospitals : filteredHospitals,\n            unfilteredHospitals : unfiltered,\n            hasLoaded : !updateYears\n        }, () => {\n            if (updateYears) {\n                this.setYears(toDeriveYearsFrom);\n            }\n        });\n    }\n\n    /**\n     * Returns list of available years for selected Variable.\n     * @return {Array} The available years.\n     */\n    setYears = (objects) => {\n        console.log(\"GETTING YEARS\");\n        const {name} = this.state[this.getViewSpecificVariable()];\n        let maxYears = [], years, recent;\n        for (let i = 0; i < objects.length; i++) {\n            years = Object.keys(objects[i].attributes[name]);\n            maxYears = (years.length > maxYears.length) ? years : maxYears;\n        }\n        recent = maxYears.length - 1;\n        this.setState({\n            years : maxYears,\n            selectedYear : (maxYears.length > 0) ? maxYears[recent] : \"\",\n            hasLoaded : true\n        })\n    }\n\n    /**\n     * Determines which selectedVariable of the state to use, depending on the currently selected view.\n     * @return {String} The current relevant variable.\n     */\n    getViewSpecificVariable = () => {\n        let v;\n        switch (this.state.view) {\n            case 1:\n                v = (this.state.mapView === 1) ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\"\n                break;\n            case 3:\n                v = (this.state.graphView === 1) ? \"boxPlotSelectedVariable\" : \"regressionSelectedVariableX\";\n                break;\n            default:\n                v = \"hospitalMapSelectedVariable\";\n        }\n        return v;\n    }\n\n    /**\n     * Setter for the selectedYear state variable.\n     * @param {String} year The selected year.\n     */\n    setYear = (year) => {\n        console.log(\"============================\");\n        console.log(\"CHANGING YEAR\");\n        this.setState({\n            selectedYear : year\n        });\n    }\n\n    /**\n     * Setter for the view state variable.\n     * @param {int} view The selected view.\n     */\n    setView = (view) => {\n        console.log(\"============================\");\n        console.log(\"SWITCHING TABVIEW\");\n        this.setState({\n            view : view,\n            hasLoaded : (view === 2)\n        }, () => {\n            if (view === 1) {\n                let objects = (this.state.mapView === 1) ? this.state.mapHospitals : this.state.cantons\n                if (this.state.mapView === 1) {\n                    this.filterHospitals(true);\n                } else {\n                    this.setYears(objects);\n                }\n            } else if (view === 3) {\n                let objects = (this.state.graphView === 1) ? this.state.boxPlotHospitals : this.state.regressionHospitals;\n                if (this.state.graphView === 2) {\n                    this.filterHospitals(true);\n                } else {\n                    this.setYears(objects);\n                }\n            }\n        })\n    }\n\n    /**\n     * Setter for the mapView state variable.\n     * @param {int} view The selected view.\n     */\n    setMapView = (view) => {\n        console.log(\"============================\");\n        console.log(\"SWITCHING MAPVIEW\");\n\n        this.setState({\n            mapView : view,\n            hasLoaded : false\n        }, () => {\n            let objects = (view === 1) ? this.state.mapHospitals : this.state.cantons;\n            if (view === 1) {\n                this.filterHospitals(true);\n            } else {\n                this.setYears(objects);\n            }\n        })\n    }\n\n    /**\n     * Setter for the graphView state variable.\n     * @param {int} view The selected view.\n     */\n    setGraphView = (view) => {\n        console.log(\"============================\");\n        console.log(\"SWITCHING GRAPHVIEW\");\n        this.setState({\n            graphView : view,\n            hasLoaded : false\n        }, () => {\n            let objects = (view === 1) ? this.state.boxPlotHospitals : this.state.regressionHospitals;\n            if (view === 2) {\n                this.filterHospitals(true);\n            } else {\n                this.setYears(objects);\n            }\n        });\n    }\n\n    /**\n     * Set hospitalsByEnums to the selected Hospital Variable\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByEnums = (selectedHospitals) => {\n        let isEmpty = !(selectedHospitals.length > 0);\n        this.setState({\n            hospitalsByEnums : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            if (!isEmpty) {\n                console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n                this.filterHospitals(false);  // years do not need to be updated\n            }\n        })\n    }\n\n    /**\n     * Set hospitalsByType to selected Hospital Type\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByType = (selectedHospitals) => {\n        let isEmpty = !(selectedHospitals.length > 0);\n        this.setState({\n            hospitalsByType : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            if (!isEmpty) {\n                console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n                this.filterHospitals(false); // years do not need to be updated\n            }\n        })\n    }\n\n    setLinRegHospitalsByType = (selectedHospitals) => {\n        let isEmpty = !(selectedHospitals.length > 0);\n        this.setState({\n            linRegHospitalsByType : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            if (!isEmpty) {\n                console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n                this.filterHospitals(false); // years do not need to be updated\n            }\n        })\n    }\n\n    setCSVData = (data) => {\n        this.setState({\n            csvData : data\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        const {\n            variables,\n            hospitals,\n            cantons,\n            hospitalMapSelectedVariable,\n            cantonMapSelectedVariable,\n            boxPlotSelectedVariable,\n            regressionSelectedVariableX,\n            regressionSelectedVariableY,\n            mapHospitals,\n            tableHospitals,\n            boxPlotHospitals,\n            unfilteredHospitals,\n            filteredHospitals,\n            years,\n            selectedYear,\n            view,\n            mapView,\n            graphView,\n            csvData,\n            hasLoaded\n        } = this.state;\n\n        let viewSpecificObjects;\n        let viewSpecificVariable;\n\n        // determines which objects to pass to children components depending on the view\n        switch (view) {\n            case 1:\n                viewSpecificObjects = (mapView === 1) ? filteredHospitals : cantons;\n                viewSpecificVariable = (mapView === 1) ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n                break;\n            case 2:\n                viewSpecificObjects = (tableHospitals.length > 0) ? tableHospitals : hospitals;\n                break;\n            case 3:\n                viewSpecificObjects = (graphView === 1) ? boxPlotHospitals : filteredHospitals;\n                viewSpecificVariable = (graphView === 1) ? boxPlotSelectedVariable : [regressionSelectedVariableX, regressionSelectedVariableY];\n                break;\n            default:\n                viewSpecificObjects = mapHospitals;\n                viewSpecificVariable = hospitalMapSelectedVariable;\n                break;\n        }\n\n        if (hasLoaded) {\n            console.log(\"DATA READY\");\n            console.log(\"PASSING VAR: \")\n            console.log(viewSpecificVariable);\n            console.log(\"PASSING OBJ: \" + viewSpecificObjects.length);\n            console.log(\"OBJ SAMPLE: \");\n            console.log(viewSpecificObjects[0]);\n        }\n\n        let centralPanel = (view !== 1)\n            ? (\n                <CentralPanel\n                    view={view}\n                    graphView={graphView}\n                    variables={variables}\n                    hasLoaded={hasLoaded}\n                    fetchData={this.applyVariables}\n\t\t\t\t\tobjects={viewSpecificObjects}\n                    setVariable={this.setVariable}\n                    selectedVariable={viewSpecificVariable}\n                    setCSVData={this.setCSVData}\n                    year={selectedYear}\n                />\n            )\n            : null\n        ;\n\n        let slider;\n\n        // display the slider only on Maps or Graphs and only if more than one year is available\n        if (years.length > 1 && view !== 2 && Object.keys(viewSpecificVariable).length > 0) {\n            slider = (<Slider years={years} selectedYear={selectedYear} setYear={this.setYear} hasLoaded={hasLoaded}/>);\n        }\n\n\n        return (\n\t\t\t<div className=\"App\">\n                <Maps\n                    objects={viewSpecificObjects}\n                    selectedVariable={viewSpecificVariable}\n                    year={selectedYear}\n                    hasLoaded={hasLoaded}\n                    view={view}\n                    mapView={mapView}\n                />\n                <div className=\"grid-container\">\n                    <ControlPanel\n                        variables={variables}\n                        setVariable={this.setVariable}\n                        selectedVariable={viewSpecificVariable}\n                        fetchData={this.applyVariables}\n                        unfilteredHospitals={unfilteredHospitals}\n                        filterByEnum={this.setHospitalsByEnums}\n                        filterByType={this.setHospitalsByType}\n                        filterLinRegByType={this.setLinRegHospitalsByType}\n                        year={selectedYear}\n                        hasLoaded={hasLoaded}\n                        view={view}\n                        setView={this.setView}\n                        mapView={mapView}\n                        setMapView={this.setMapView}\n                        graphView={graphView}\n                        setGraphView={this.setGraphView}\n                        csvData={csvData}\n                    />\n                    {centralPanel}\n                    <LanguagePicker changeLanguage={this.changeLanguage} />\n                    {slider}\n                </div>\n\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}