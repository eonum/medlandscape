{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/FilterEditor/HospitalTypeFilter/HospitalTypeFilter.js\";\nimport React, { Component } from 'react';\nimport CheckboxList from '../../CheckboxList/CheckboxList.js';\n\nvar HospitalTypeFilter =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HospitalTypeFilter, _Component);\n\n  function HospitalTypeFilter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HospitalTypeFilter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HospitalTypeFilter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      mappingObject: {},\n      selectedValues: []\n    };\n\n    _this.checkboxSelectItem = function (item) {\n      // removes item if in selectedValues\n      var values = _this.state.selectedValues.filter(function (value) {\n        return value !== item;\n      }); // adds item if not in selectedValues\n\n\n      if (values.length === _this.state.selectedValues.length) {\n        values.push(item);\n      } // for (let i = 0; i < values.length; i++) {\n      //     switch (values) {\n      //         case (K11):\n      //\n      //             break;\n      //         case (K112):\n      //\n      //             break;\n      //         case (K121 || K122 || K123):\n      //\n      //             break;\n      //         case (K211 || K212):\n      //\n      //             break;\n      //         case (K221):\n      //\n      //             break;\n      //         case (K231 || K232 || K233 || K234 || K235):\n      //\n      //             break;\n      //     }\n      // }\n\n\n      _this.setState({\n        selectedValues: values\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HospitalTypeFilter, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props$item = this.props.item,\n          values = _this$props$item.values,\n          values_text = _this$props$item.values_text; // categories for different hospitals\n      // University: K111\n      // Allgemeinspital, Zentrumversorgung: K112\n      // Allgemeinspital, Grundversorgung: K121, K122, K123\n      // Psychiatrische Klinik: K211, K212\n      // Rehabilitationsklinik: K221\n      // Spezialklinik: K231, K232, K233, K234, K235\n\n      var categorizedHospitalTypes = [\"Universitätsspital\", \"Allgemeinspital, Zentrumversorgung\", \"Allgemeinspital, Grundversorgung\", \"Psychiatrische Klinik\", \"Rehabilitationsklinik\", \"Spezialklinik\"];\n      return React.createElement(CheckboxList, {\n        items: categorizedHospitalTypes,\n        checkboxSelectItem: this.checkboxSelectItem,\n        titles: categorizedHospitalTypes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return HospitalTypeFilter;\n}(Component);\n\nexport default HospitalTypeFilter;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/FilterEditor/HospitalTypeFilter/HospitalTypeFilter.js"],"names":["React","Component","CheckboxList","HospitalTypeFilter","state","mappingObject","selectedValues","checkboxSelectItem","item","values","filter","value","length","push","setState","props","values_text","categorizedHospitalTypes"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;IAEMC,kB;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,aAAa,EAAG,EADZ;AAEJC,MAAAA,cAAc,EAAG;AAFb,K;;UAMRC,kB,GAAqB,UAACC,IAAD,EAAU;AAE3B;AACA,UAAIC,MAAM,GAAG,MAAKL,KAAL,CAAWE,cAAX,CAA0BI,MAA1B,CAAiC,UAACC,KAAD,EAAW;AACrD,eAAQA,KAAK,KAAKH,IAAlB;AACH,OAFY,CAAb,CAH2B,CAO3B;;;AACA,UAAIC,MAAM,CAACG,MAAP,KAAkB,MAAKR,KAAL,CAAWE,cAAX,CAA0BM,MAAhD,EAAwD;AACpDH,QAAAA,MAAM,CAACI,IAAP,CAAYL,IAAZ;AACH,OAV0B,CAY3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,YAAKM,QAAL,CAAc;AACVR,QAAAA,cAAc,EAAGG;AADP,OAAd;AAGH,K;;;;;;;6BAKQ;AAAA,6BACyB,KAAKM,KAAL,CAAWP,IADpC;AAAA,UACEC,MADF,oBACEA,MADF;AAAA,UACUO,WADV,oBACUA,WADV,EAGL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIC,wBAAwB,GAAG,CAAC,oBAAD,EAAuB,oCAAvB,EAA6D,kCAA7D,EAAiG,uBAAjG,EAA0H,uBAA1H,EAAmJ,eAAnJ,CAA/B;AAGA,aACI,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAEA,wBAArB;AAA+C,QAAA,kBAAkB,EAAE,KAAKV,kBAAxE;AAA4F,QAAA,MAAM,EAAEU,wBAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;;;EApE4BhB,S;;AAuEjC,eAAeE,kBAAf","sourcesContent":["import React, { Component } from 'react';\nimport CheckboxList from '../../CheckboxList/CheckboxList.js';\n\nclass HospitalTypeFilter extends Component {\n\n    state = {\n        mappingObject : {},\n        selectedValues : []\n    }\n\n\n    checkboxSelectItem = (item) => {\n\n        // removes item if in selectedValues\n        let values = this.state.selectedValues.filter((value) => {\n            return (value !== item)\n        });\n\n        // adds item if not in selectedValues\n        if (values.length === this.state.selectedValues.length) {\n            values.push(item);\n        }\n\n        // for (let i = 0; i < values.length; i++) {\n        //     switch (values) {\n        //         case (K11):\n        //\n        //             break;\n        //         case (K112):\n        //\n        //             break;\n        //         case (K121 || K122 || K123):\n        //\n        //             break;\n        //         case (K211 || K212):\n        //\n        //             break;\n        //         case (K221):\n        //\n        //             break;\n        //         case (K231 || K232 || K233 || K234 || K235):\n        //\n        //             break;\n        //     }\n        // }\n\n        this.setState({\n            selectedValues : values\n        })\n    }\n\n\n\n\n    render() {\n        const {values, values_text} = this.props.item;\n\n        // categories for different hospitals\n        // University: K111\n        // Allgemeinspital, Zentrumversorgung: K112\n        // Allgemeinspital, Grundversorgung: K121, K122, K123\n        // Psychiatrische Klinik: K211, K212\n        // Rehabilitationsklinik: K221\n        // Spezialklinik: K231, K232, K233, K234, K235\n\n        let categorizedHospitalTypes = [\"Universitätsspital\", \"Allgemeinspital, Zentrumversorgung\", \"Allgemeinspital, Grundversorgung\", \"Psychiatrische Klinik\", \"Rehabilitationsklinik\", \"Spezialklinik\"];\n\n\n        return (\n            <CheckboxList items={categorizedHospitalTypes} checkboxSelectItem={this.checkboxSelectItem} titles={categorizedHospitalTypes}/>\n        )\n    }\n}\n\nexport default HospitalTypeFilter;\n"]},"metadata":{},"sourceType":"module"}