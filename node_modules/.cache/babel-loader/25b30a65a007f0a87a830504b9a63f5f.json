{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js';\nimport CentralPanel from './components/CentralPanel/CentralPanel.js';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      hospitals: [],\n      cantons: [],\n      // different variables applied to the different views\n      hospitalMapSelectedVariable: {},\n      cantonMapSelectedVariable: {},\n      boxPlotSelectedVariable: {},\n      regressionSelectedVariable: {},\n      // different hospital results stored per view\n      mapHospitals: [],\n      tableHospitals: [],\n      boxPlotHospitals: [],\n      regressionHospitals: [],\n      // results of the different filters\n      hospitalsByEnums: [],\n      hospitalsByType: [],\n      linRegHospitalsByType: [],\n      unfilteredHospitals: [],\n      filteredHospitals: [],\n      years: [],\n      selectedYear: \"\",\n      view: 1,\n      mapView: 1,\n      graphView: 1,\n      hasLoaded: false,\n      tableDataLoaded: false\n      /**\n      * Calls the API with specific query.\n      * @param  {String} query The specific query to use for the API call.\n      */\n\n    };\n\n    _this.applyVariables = function (query) {\n      console.log(\"FETCHING DATA, QUERY: \" + query);\n      var key;\n      return _this.apiCall(query).then(function (results) {\n        var _this$setState;\n\n        console.log(\"DATA FETCHED\"); // determining which state variable to store the results in\n\n        if (_this.state.view === 1) {\n          key = _this.state.mapView === 1 ? \"mapHospitals\" : \"cantons\";\n        } else if (_this.state.view === 2) {\n          key = \"tableHospitals\";\n        } else {\n          key = _this.state.graphView === 1 ? \"boxPlotHospitals\" : \"regressionHospitals\";\n        }\n\n        _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"hasLoaded\", _this.state.view !== 1), _this$setState), function () {\n          // On the map, years and which hospitals to pass to Maps need to be redetermined\n          if (_this.state.view === 1) {\n            if (_this.state.mapView === 1) {\n              _this.filterHospitals(); // only needed for hospitals\n\n            } else {\n              _this.setYears(results);\n            }\n          }\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + _this.props.i18n.language + apiRequest + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.changeLanguage = function () {\n      console.log(\"TRANSLATING\");\n\n      _this.apiCall(\"variables\").then(function (results) {\n        var currentVariableKey = _this.getViewSpecificVariable();\n\n        var currentVariable = _this.state[currentVariableKey];\n        var translatedCurrentVariable = currentVariable; // as fallback, this makes sure nothing changes\n\n        if (Object.keys(currentVariable).length > 0) {\n          // making sure that currentVariable.name exists\n          for (var i = 0; i < results.length; i++) {\n            if (results[i].name === currentVariable.name) {\n              translatedCurrentVariable = results[i];\n            }\n          }\n        }\n\n        _this.setState(_defineProperty({\n          variables: results\n        }, currentVariableKey, translatedCurrentVariable));\n      });\n    };\n\n    _this.initApiCall = function () {\n      // fetching all hospitals from the API\n      _this.apiCall(\"hospitals\").then(function (result) {\n        _this.setState({\n          hospitals: result\n        });\n      }); // fetches all Variables from the API\n\n\n      _this.apiCall(\"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        }); // the \"type\" variable which is loaded with every request\n\n\n        var typeVar = result.filter(function (variable) {\n          return variable.name === \"Typ\";\n        }); // the default variable chosen when loading the app\n\n        _this.setVariable(result[1]);\n\n        var query = \"hospitals?variables=\";\n        query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n\n        _this.applyVariables(query);\n      });\n    };\n\n    _this.setVariable = function (item) {\n      console.log(\"============================\");\n      console.log(\"SETTING variable to \" + item.name);\n\n      var key = _this.getViewSpecificVariable();\n\n      if (_this.state[key] !== item) {\n        var _this$setState3;\n\n        _this.setState((_this$setState3 = {}, _defineProperty(_this$setState3, key, item), _defineProperty(_this$setState3, \"hasLoaded\", false), _this$setState3));\n      } else {\n        console.log(\"Same Variable selected, nothing to change.\");\n      }\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.filterHospitals = function () {\n      var _this$state = _this.state,\n          hospitalsByEnums = _this$state.hospitalsByEnums,\n          hospitalsByType = _this$state.hospitalsByType,\n          mapHospitals = _this$state.mapHospitals;\n      var filteredHospitals = [],\n          intersectingHospitals = []; // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n\n      if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n        // in case of no matches, there would be no need to do intersection\n        if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n          // we have to compare names because the attribute of each hospital has a different length\n          for (var i = 0; i < hospitalsByType.length; i++) {\n            for (var j = 0; j < hospitalsByEnums.length; j++) {\n              if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                intersectingHospitals.push(hospitalsByEnums[j]);\n              }\n            }\n          }\n        } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n          intersectingHospitals = hospitalsByType > hospitalsByEnums ? hospitalsByType : hospitalsByEnums;\n        } else {\n          filteredHospitals = mapHospitals;\n        }\n\n        if (intersectingHospitals.length > 0) {\n          for (var _i = 0; _i < intersectingHospitals.length; _i++) {\n            for (var _j = 0; _j < mapHospitals.length; _j++) {\n              if (intersectingHospitals[_i].name === mapHospitals[_j].name) {\n                filteredHospitals.push(mapHospitals[_j]);\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"DATA FILTERED\");\n      var unfiltered = mapHospitals;\n\n      _this.setState({\n        filteredHospitals: filteredHospitals,\n        unfilteredHospitals: unfiltered\n      }, function () {\n        _this.setYears(_this.state.mapHospitals);\n      });\n    };\n\n    _this.setYears = function (objects) {\n      console.log(\"GETTING YEARS\");\n\n      var name = _this.state[_this.getViewSpecificVariable()].name;\n\n      var maxYears = [],\n          years,\n          recent;\n\n      for (var i = 0; i < objects.length; i++) {\n        years = Object.keys(objects[i].attributes[name]);\n        maxYears = years.length > maxYears.length ? years : maxYears;\n      }\n\n      recent = maxYears.length - 1;\n\n      _this.setState({\n        years: maxYears,\n        selectedYear: maxYears[recent],\n        hasLoaded: true\n      });\n    };\n\n    _this.getViewSpecificVariable = function () {\n      var v;\n\n      switch (_this.state.view) {\n        case 1:\n          v = _this.state.mapView === 1 ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\";\n          break;\n\n        case 3:\n          v = \"boxPlotSelectedVariable\";\n          break;\n\n        default:\n          v = \"hospitalMapSelectedVariable\";\n      }\n\n      return v;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.setView = function (view) {\n      console.log(\"SWITCHING TABVIEW\");\n\n      _this.setState({\n        view: view\n      });\n    };\n\n    _this.setMapView = function (view) {\n      console.log(\"SWITCHING MAPVIEW\");\n\n      _this.setState({\n        mapView: view,\n        hasLoaded: false\n      }, function () {\n        var objects = view === 1 ? _this.state.mapHospitals : _this.state.cantons;\n\n        if (view == 1) {\n          _this.filterHospitals();\n        } else {\n          _this.setYears(objects);\n        }\n      });\n    };\n\n    _this.setGraphView = function (view) {\n      console.log(\"SWITCHING GRAPHVIEW\");\n\n      _this.setState({\n        graphView: view\n      });\n    };\n\n    _this.setHospitalsByEnums = function (selectedHospitals) {\n      var isEmpty = !(selectedHospitals.length > 0);\n\n      _this.setState({\n        hospitalsByEnums: selectedHospitals,\n        hasLoaded: isEmpty\n      }, function () {\n        if (!isEmpty) {\n          console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n\n          _this.filterHospitals();\n        }\n      });\n    };\n\n    _this.setHospitalsByType = function (selectedHospitals) {\n      var _this$setState4;\n\n      var isEmpty = !(selectedHospitals.length > 0);\n      var key = _this.state.view === 1 ? \"hospitalsByType\" : \"linRegHospitalsByType\";\n\n      _this.setState((_this$setState4 = {}, _defineProperty(_this$setState4, key, selectedHospitals), _defineProperty(_this$setState4, \"hasLoaded\", isEmpty), _this$setState4), function () {\n        if (!isEmpty && _this.state.view !== 3) {\n          console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n\n          _this.filterHospitals();\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          variables = _this$state2.variables,\n          hospitals = _this$state2.hospitals,\n          cantons = _this$state2.cantons,\n          hospitalMapSelectedVariable = _this$state2.hospitalMapSelectedVariable,\n          cantonMapSelectedVariable = _this$state2.cantonMapSelectedVariable,\n          boxPlotSelectedVariable = _this$state2.boxPlotSelectedVariable,\n          mapHospitals = _this$state2.mapHospitals,\n          tableHospitals = _this$state2.tableHospitals,\n          boxPlotHospitals = _this$state2.boxPlotHospitals,\n          regressionHospitals = _this$state2.regressionHospitals,\n          linRegHospitalsByType = _this$state2.linRegHospitalsByType,\n          unfilteredHospitals = _this$state2.unfilteredHospitals,\n          filteredHospitals = _this$state2.filteredHospitals,\n          years = _this$state2.years,\n          selectedYear = _this$state2.selectedYear,\n          view = _this$state2.view,\n          mapView = _this$state2.mapView,\n          graphView = _this$state2.graphView,\n          hasLoaded = _this$state2.hasLoaded;\n      var viewSpecificObjects;\n      var viewSpecificVariable; // determines which objects to pass to children components depending on the view\n\n      switch (view) {\n        case 1:\n          viewSpecificObjects = mapView === 1 ? filteredHospitals : cantons;\n          viewSpecificVariable = mapView === 1 ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n          break;\n\n        case 2:\n          viewSpecificObjects = tableHospitals.length > 0 ? tableHospitals : hospitals;\n          break;\n\n        case 3:\n          viewSpecificObjects = graphView === 1 ? boxPlotHospitals : regressionHospitals.length > linRegHospitalsByType.length && linRegHospitalsByType.length > 0 ? linRegHospitalsByType : regressionHospitals;\n          viewSpecificVariable = boxPlotSelectedVariable;\n          break;\n\n        default:\n          viewSpecificObjects = mapHospitals;\n          viewSpecificVariable = hospitalMapSelectedVariable;\n          break;\n      }\n\n      if (hasLoaded) {\n        console.log(\"DATA READY\"); //console.log(\"PASSING VAR: \" + viewSpecificVariable.name);\n\n        console.log(\"PASSING OBJ: \" + viewSpecificObjects.length);\n        console.log(\"OBJ SAMPLE: \");\n        console.log(viewSpecificObjects[0]);\n      }\n\n      var centralPanel = view !== 1 ? React.createElement(CentralPanel, {\n        view: view,\n        graphView: graphView,\n        variables: variables,\n        hasLoaded: hasLoaded,\n        fetchData: this.applyVariables,\n        objects: viewSpecificObjects,\n        setVariable: this.setVariable,\n        selectedVariable: viewSpecificVariable,\n        year: selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }) : null;\n      var slider; // display the slider only on Maps or Graphs and only if more than one year is available\n\n      if (years.length > 1 && view !== 2 && Object.keys(viewSpecificVariable).length !== 0) {\n        slider = React.createElement(Slider, {\n          years: years,\n          selectedYear: selectedYear,\n          setYear: this.setYear,\n          hasLoaded: hasLoaded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 429\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, React.createElement(Maps, {\n        objects: viewSpecificObjects,\n        selectedVariable: viewSpecificVariable,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        mapView: mapView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, React.createElement(ControlPanel, {\n        variables: variables,\n        setVariable: this.setVariable,\n        selectedVariable: viewSpecificVariable,\n        fetchData: this.applyVariables,\n        unfilteredHospitals: unfilteredHospitals,\n        filterByEnum: this.setHospitalsByEnums,\n        filterByType: this.setHospitalsByType,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        setView: this.setView,\n        mapView: mapView,\n        setMapView: this.setMapView,\n        graphView: graphView,\n        setGraphView: this.setGraphView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }), centralPanel, React.createElement(LanguagePicker, {\n        changeLanguage: this.changeLanguage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }), slider));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","Maps","withTranslation","ControlPanel","CentralPanel","LanguagePicker","Slider","apiURL","apiRequest","App","state","variables","hospitals","cantons","hospitalMapSelectedVariable","cantonMapSelectedVariable","boxPlotSelectedVariable","regressionSelectedVariable","mapHospitals","tableHospitals","boxPlotHospitals","regressionHospitals","hospitalsByEnums","hospitalsByType","linRegHospitalsByType","unfilteredHospitals","filteredHospitals","years","selectedYear","view","mapView","graphView","hasLoaded","tableDataLoaded","applyVariables","query","console","log","key","apiCall","then","results","setState","filterHospitals","setYears","fetch","props","i18n","language","res","json","changeLanguage","currentVariableKey","getViewSpecificVariable","currentVariable","translatedCurrentVariable","Object","keys","length","i","name","initApiCall","result","typeVar","filter","variable","setVariable","encodeURIComponent","item","tableDataGenerated","intersectingHospitals","j","push","unfiltered","objects","maxYears","recent","attributes","v","setYear","year","setView","setMapView","setGraphView","setHospitalsByEnums","selectedHospitals","isEmpty","setHospitalsByType","viewSpecificObjects","viewSpecificVariable","centralPanel","slider","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js'\nimport CentralPanel from './components/CentralPanel/CentralPanel.js'\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js'\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables : [],\n        hospitals : [],\n        cantons : [],\n\n        // different variables applied to the different views\n        hospitalMapSelectedVariable : {},\n        cantonMapSelectedVariable : {},\n        boxPlotSelectedVariable : {},\n        regressionSelectedVariable : {},\n\n        // different hospital results stored per view\n        mapHospitals : [],\n        tableHospitals : [],\n        boxPlotHospitals : [],\n        regressionHospitals : [],\n\n        // results of the different filters\n        hospitalsByEnums : [],\n        hospitalsByType : [],\n        linRegHospitalsByType : [],\n        unfilteredHospitals : [],\n        filteredHospitals : [],\n\n        years : [],\n        selectedYear : \"\",\n\n        view : 1,\n        mapView : 1,\n        graphView : 1,\n\n        hasLoaded : false,\n        tableDataLoaded : false\n    }\n\n    /**\n    * Calls the API with specific query.\n    * @param  {String} query The specific query to use for the API call.\n    */\n    applyVariables = (query) => {\n        console.log(\"FETCHING DATA, QUERY: \" + query);\n        let key;\n        return this.apiCall(query).then((results) => {\n            console.log(\"DATA FETCHED\");\n\n            // determining which state variable to store the results in\n            if (this.state.view === 1) {\n                key = (this.state.mapView === 1) ? \"mapHospitals\" : \"cantons\";\n            } else if (this.state.view === 2) {\n                key = \"tableHospitals\";\n            } else {\n                key = (this.state.graphView === 1) ? \"boxPlotHospitals\" : \"regressionHospitals\";\n            }\n\n            this.setState({\n                [key] : results,\n                hasLoaded : (this.state.view !== 1)\n            }, () => {\n                // On the map, years and which hospitals to pass to Maps need to be redetermined\n                if (this.state.view === 1) {\n                    if (this.state.mapView === 1) {\n                        this.filterHospitals(); // only needed for hospitals\n                    } else {\n                        this.setYears(results);\n                    }\n                }\n            })\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + this.props.i18n.language + apiRequest + query).then(res => res.json());\n    }\n\n    /**\n     * Handles the change of language:\n     * Replaces state.variables\n     * Replaces viewSpecificVariable with translated equivalent\n     */\n    changeLanguage = () => {\n        console.log(\"TRANSLATING\");\n        this.apiCall(\"variables\").then((results) => {\n            let currentVariableKey = this.getViewSpecificVariable();\n            let currentVariable = this.state[currentVariableKey];\n            let translatedCurrentVariable = currentVariable; // as fallback, this makes sure nothing changes\n\n            if (Object.keys(currentVariable).length > 0) { // making sure that currentVariable.name exists\n                for (var i = 0; i < results.length; i++) {\n                    if (results[i].name === currentVariable.name) {\n                        translatedCurrentVariable = results[i];\n                    }\n                }\n            }\n\n            this.setState({\n                variables : results,\n                [currentVariableKey] : translatedCurrentVariable\n            });\n        });\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        // fetching all hospitals from the API\n        this.apiCall(\"hospitals\").then((result) => {\n            this.setState({\n                hospitals : result\n            });\n        })\n\n        // fetches all Variables from the API\n        this.apiCall(\"variables\").then((result) => {\n            this.setState({\n                variables : result\n            });\n\n            // the \"type\" variable which is loaded with every request\n            let typeVar = result.filter((variable) => {\n                return (variable.name === \"Typ\");\n            })\n\n            // the default variable chosen when loading the app\n            this.setVariable(result[1]);\n            let query = \"hospitals?variables=\";\n            query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n            this.applyVariables(query);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * @param  {Variable object} item The selected variable.\n    */\n    setVariable = (item) => {\n        console.log(\"============================\");\n        console.log(\"SETTING variable to \" + item.name);\n        let key = this.getViewSpecificVariable();\n\n        if (this.state[key] !== item) {\n            this.setState({\n                [key] : item,\n                hasLoaded : false\n            });\n        } else {\n            console.log(\"Same Variable selected, nothing to change.\");\n        }\n    }\n\n    /**\n     * Comment here please\n     */\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    /**\n     * Determines which Hospitals to pass to MAPS.js according to type & enum filters,\n     * saves the list into filteredHospitals in the state.\n     */\n    filterHospitals = () => {\n        const {hospitalsByEnums, hospitalsByType, mapHospitals} = this.state;\n        let filteredHospitals = [], intersectingHospitals = [];\n        // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n        if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n\n            // in case of no matches, there would be no need to do intersection\n            if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n                // we have to compare names because the attribute of each hospital has a different length\n                for (let i = 0; i < hospitalsByType.length; i++) {\n                    for (let j = 0; j < hospitalsByEnums.length; j++) {\n                        if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                            intersectingHospitals.push(hospitalsByEnums[j]);\n                        }\n                    }\n                }\n            } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n                intersectingHospitals = (hospitalsByType > hospitalsByEnums) ? hospitalsByType : hospitalsByEnums;\n            } else {\n                filteredHospitals = mapHospitals;\n            }\n\n            if (intersectingHospitals.length > 0) {\n                for (let i = 0; i < intersectingHospitals.length; i++) {\n                    for (let j = 0; j < mapHospitals.length; j++) {\n                        if (intersectingHospitals[i].name === mapHospitals[j].name) {\n                            filteredHospitals.push(mapHospitals[j]);\n                        }\n                    }\n                }\n            }\n        }\n        console.log(\"DATA FILTERED\");\n        let unfiltered = mapHospitals;\n        this.setState({\n            filteredHospitals : filteredHospitals,\n            unfilteredHospitals : unfiltered,\n        }, () => {\n            this.setYears(this.state.mapHospitals);\n        });\n    }\n\n    /**\n     * Returns list of available years for selected Variable.\n     * @return {Array} The available years.\n     */\n    setYears = (objects) => {\n        console.log(\"GETTING YEARS\");\n        const {name} = this.state[this.getViewSpecificVariable()];\n        let maxYears = [], years, recent;\n        for (var i = 0; i < objects.length; i++) {\n            years = Object.keys(objects[i].attributes[name]);\n            maxYears = (years.length > maxYears.length) ? years : maxYears;\n        }\n        recent = maxYears.length - 1;\n        this.setState({\n            years : maxYears,\n            selectedYear : maxYears[recent],\n            hasLoaded : true\n        })\n    }\n\n    /**\n     * Determines which selectedVariable of the state to use, depending on the currently selected view.\n     * @return {String} The current relevant variable.\n     */\n    getViewSpecificVariable = () => {\n        let v;\n        switch (this.state.view) {\n            case 1:\n                v = (this.state.mapView === 1) ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\"\n                break;\n            case 3:\n                v = \"boxPlotSelectedVariable\";\n                break;\n            default:\n                v = \"hospitalMapSelectedVariable\";\n        }\n        return v;\n    }\n\n    /**\n     * Setter for the selectedYear state variable.\n     * @param {String} year The selected year.\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year\n        })\n    }\n\n    /**\n     * Setter for the view state variable.\n     * @param {int} view The selected view.\n     */\n    setView = (view) => {\n        console.log(\"SWITCHING TABVIEW\");\n        this.setState({\n            view : view,\n        })\n    }\n\n    /**\n     * Setter for the mapView state variable.\n     * @param {int} view The selected view.\n     */\n    setMapView = (view) => {\n        console.log(\"SWITCHING MAPVIEW\");\n\n        this.setState({\n            mapView : view,\n            hasLoaded : false\n        }, () => {\n            let objects = (view === 1) ? this.state.mapHospitals : this.state.cantons\n            if (view == 1) {\n                this.filterHospitals();\n            } else {\n                this.setYears(objects);\n            }\n        })\n    }\n\n    /**\n     * Setter for the graphView state variable.\n     * @param {int} view The selected view.\n     */\n    setGraphView = (view) => {\n        console.log(\"SWITCHING GRAPHVIEW\");\n        this.setState({\n            graphView : view\n        })\n    }\n\n    /**\n     * Set hospitalsByEnums to the selected Hospital Variable\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByEnums = (selectedHospitals) => {\n        let isEmpty = !(selectedHospitals.length > 0);\n        this.setState({\n            hospitalsByEnums : selectedHospitals,\n            hasLoaded : isEmpty\n        }, () => {\n            if (!isEmpty) {\n                console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n                this.filterHospitals();\n            }\n        })\n    }\n\n    /**\n     * Set hospitalsByType to selected Hospital Type\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByType = (selectedHospitals) => {\n        let isEmpty = !(selectedHospitals.length > 0);\n        let key = (this.state.view === 1) ? \"hospitalsByType\" : \"linRegHospitalsByType\";\n        this.setState({\n            [key] : selectedHospitals,\n            hasLoaded : isEmpty\n        }, () => {\n            if (!isEmpty && this.state.view !== 3) {\n                console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n                this.filterHospitals();\n            }\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        const {\n            variables,\n            hospitals,\n            cantons,\n            hospitalMapSelectedVariable,\n            cantonMapSelectedVariable,\n            boxPlotSelectedVariable,\n            mapHospitals,\n            tableHospitals,\n            boxPlotHospitals,\n            regressionHospitals,\n            linRegHospitalsByType,\n            unfilteredHospitals,\n            filteredHospitals,\n            years,\n            selectedYear,\n            view,\n            mapView,\n            graphView,\n            hasLoaded\n        } = this.state;\n\n        let viewSpecificObjects;\n        let viewSpecificVariable;\n\n        // determines which objects to pass to children components depending on the view\n        switch (view) {\n            case 1:\n                viewSpecificObjects = (mapView === 1) ? filteredHospitals : cantons;\n                viewSpecificVariable = (mapView === 1) ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n                break;\n            case 2:\n                viewSpecificObjects = (tableHospitals.length > 0) ? tableHospitals : hospitals;\n                break;\n            case 3:\n                viewSpecificObjects = (graphView === 1) ? boxPlotHospitals : ((regressionHospitals.length > linRegHospitalsByType.length && linRegHospitalsByType.length > 0) ? linRegHospitalsByType : regressionHospitals);\n                viewSpecificVariable = boxPlotSelectedVariable;\n                break;\n            default:\n                viewSpecificObjects = mapHospitals;\n                viewSpecificVariable = hospitalMapSelectedVariable;\n                break;\n        }\n\n        if (hasLoaded) {\n            console.log(\"DATA READY\");\n            //console.log(\"PASSING VAR: \" + viewSpecificVariable.name);\n            console.log(\"PASSING OBJ: \" + viewSpecificObjects.length);\n            console.log(\"OBJ SAMPLE: \");\n            console.log(viewSpecificObjects[0]);\n        }\n\n        let centralPanel = (view !== 1)\n            ? (\n                <CentralPanel\n                    view={view}\n                    graphView={graphView}\n                    variables={variables}\n                    hasLoaded={hasLoaded}\n                    fetchData={this.applyVariables}\n\t\t\t\t\tobjects={viewSpecificObjects}\n                    setVariable={this.setVariable}\n                    selectedVariable={viewSpecificVariable}\n                    year={selectedYear}\n                />\n            )\n            : null\n        ;\n\n        let slider;\n\n        // display the slider only on Maps or Graphs and only if more than one year is available\n        if (years.length > 1 && view !== 2 && Object.keys(viewSpecificVariable).length !== 0) {\n            slider = (<Slider years={years} selectedYear={selectedYear} setYear={this.setYear} hasLoaded={hasLoaded}/>);\n        }\n\n\n        return (\n\t\t\t<div className=\"App\">\n                <Maps\n                    objects={viewSpecificObjects}\n                    selectedVariable={viewSpecificVariable}\n                    year={selectedYear}\n                    hasLoaded={hasLoaded}\n                    view={view}\n                    mapView={mapView}\n                />\n                <div className=\"grid-container\">\n                    <ControlPanel\n                        variables={variables}\n                        setVariable={this.setVariable}\n                        selectedVariable={viewSpecificVariable}\n                        fetchData={this.applyVariables}\n                        unfilteredHospitals={unfilteredHospitals}\n                        filterByEnum={this.setHospitalsByEnums}\n                        filterByType={this.setHospitalsByType}\n                        year={selectedYear}\n                        hasLoaded={hasLoaded}\n                        view={view}\n                        setView={this.setView}\n                        mapView={mapView}\n                        setMapView={this.setMapView}\n                        graphView={graphView}\n                        setGraphView={this.setGraphView}\n                    />\n                    {centralPanel}\n                    <LanguagePicker changeLanguage={this.changeLanguage} />\n                    {slider}\n                </div>\n\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}