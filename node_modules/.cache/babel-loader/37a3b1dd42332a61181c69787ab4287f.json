{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css';\n\nvar ControlPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlPanel, _Component);\n\n  function ControlPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      mapView: 1\n      /**\n       * Called when asking for a Variable to be displayed on the map\n       * Prepares correct query to ask App.js\n       * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n       */\n\n    };\n\n    _this.fetchMapData = function (variable) {\n      var name = variable.name,\n          variable_model = variable.variable_model;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      var query = key + \"?variables=\";\n      query += encodeURIComponent(variable.name);\n      return _this.props.fetchData(key, query);\n    };\n\n    _this.fetchEnumData = function (variable) {\n      var name = variable.name;\n      var query = \"hospitals?variables=\";\n      query += encodeURIComponent(_this.props.selectedVariable.name + \"$\");\n      query += encodeURIComponent(name);\n      return _this.props.fetchData(\"hospitals\", query);\n    };\n\n    _this.selectVariable = function (item) {\n      _this.props.selectVariable(item);\n\n      return _this.fetchMapData(item);\n    };\n\n    _this.setTabView = function (view) {\n      var oldView = _this.props.view;\n\n      if (oldView !== view) {\n        _this.props.setView(view);\n\n        document.getElementById('t' + oldView).classList.toggle('selectedTab');\n        document.getElementById('t' + view).classList.toggle('selectedTab');\n      }\n    };\n\n    _this.setMapView = function (view) {\n      if (_this.state.view !== view) {\n        _this.setState({\n          mapView: view\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ControlPanel, [{\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [],\n          enums = [];\n      var selectedCanton = {},\n          selectedHospital = {}; // filtering variables\n\n      this.props.variables.filter(function (variable) {\n        if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n          hospitalVars.push(variable);\n        } else if (variable.variable_model === \"Canton\") {\n          cantonVars.push(variable);\n        } else {\n          enums.push(variable);\n        }\n      }); // setting selectedItem for Dropdowns\n\n      if (this.props.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.props.selectedVariable;\n        selectedCanton = undefined;\n      } else {\n        selectedCanton = this.props.selectedVariable;\n        selectedHospital = undefined;\n      }\n\n      var t = this.props.t;\n      var mapViewHospitals = React.createElement(\"div\", {\n        className: \"mapViewHospitals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedHospital,\n        defaultText: t('dropDowns.cantonFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, t('mapView.filter')), React.createElement(FilterEditor, {\n        hospitals: this.props.hospitals,\n        updateHospitals: this.props.updateHospitals,\n        fetchData: this.fetchEnumData,\n        hasLoaded: this.props.hasLoaded,\n        selectedYear: this.props.year,\n        variables: enums,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }));\n      var mapViewCantons = React.createElement(\"div\", {\n        className: \"mapViewCantons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedCanton,\n        defaultText: t('dropDowns.cantonFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }));\n      var mapView = React.createElement(\"div\", {\n        className: \"view1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, t('mapView.title')), React.createElement(\"div\", {\n        className: \"viewSwitcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"l1\",\n        className: this.state.mapView === 1 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, t('mapView.hospitals')), React.createElement(\"p\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"|\"), React.createElement(\"p\", {\n        id: \"l2\",\n        className: this.state.mapView === 2 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, t('mapView.cantons')))), this.state.mapView === 1 ? mapViewHospitals : mapViewCantons);\n      var tableView = React.createElement(\"div\", {\n        className: \"view2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, t('tableView.title'))));\n      var graphView = React.createElement(\"div\", {\n        className: \"view3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, t('graphView.title'))));\n      var controlPanelView;\n\n      switch (this.props.view) {\n        case 1:\n          controlPanelView = mapView;\n          break;\n\n        case 2:\n          controlPanelView = tableView;\n          break;\n\n        case 3:\n          controlPanelView = graphView;\n          break;\n\n        default:\n          controlPanelView = mapView;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tabs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"t1\",\n        className: \"tab selectedTab\",\n        onClick: this.setTabView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t2\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t3\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tabContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, controlPanelView));\n    }\n  }]);\n\n  return ControlPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js"],"names":["React","Component","DropdownMenu","FilterEditor","withTranslation","ControlPanel","state","mapView","fetchMapData","variable","name","variable_model","key","query","encodeURIComponent","props","fetchData","fetchEnumData","selectedVariable","selectVariable","item","setTabView","view","oldView","setView","document","getElementById","classList","toggle","setMapView","setState","cantonVars","hospitalVars","years","enums","selectedCanton","selectedHospital","variables","filter","variable_type","push","undefined","t","mapViewHospitals","hospitals","updateHospitals","hasLoaded","year","mapViewCantons","bind","tableView","graphView","controlPanelView","LocalizedControlPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css'\n\nclass ControlPanel extends Component {\n\n    state = {\n        mapView : 1\n    }\n\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchMapData = (variable) => {\n        const {name, variable_model} = variable;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        let query = key + \"?variables=\";\n        query += encodeURIComponent(variable.name);\n        return this.props.fetchData(key, query);\n    }\n\n    /**\n     * Called when filtering Hospital variables.\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchEnumData = (variable) => {\n        const {name} = variable;\n        let query =\"hospitals?variables=\";\n        query += encodeURIComponent(this.props.selectedVariable.name + \"$\");\n        query += encodeURIComponent(name);\n        return this.props.fetchData(\"hospitals\", query);\n    }\n\n\n    /**\n     * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n     * then calls fetchMapData to fetch data from the API.\n     * @param  {Variable object} item The selected variable.\n     */\n    selectVariable = (item) => {\n        this.props.selectVariable(item);\n        return this.fetchMapData(item);\n    }\n\n    setTabView = (view) => {\n        let oldView = this.props.view;\n        if (oldView !== view) {\n            this.props.setView(view);\n            document.getElementById('t' + oldView).classList.toggle('selectedTab');\n            document.getElementById('t' + view).classList.toggle('selectedTab');\n        }\n    }\n\n    setMapView = (view) => {\n        if (this.state.view !== view) {\n            this.setState({\n                mapView : view\n            });\n        }\n    }\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [], enums = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        // filtering variables\n        this.props.variables.filter(variable => {\n            if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n                hospitalVars.push(variable);\n            } else if (variable.variable_model === \"Canton\") {\n                cantonVars.push(variable);\n            } else {\n                enums.push(variable);\n            }\n        });\n\n        // setting selectedItem for Dropdowns\n        if (this.props.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.props.selectedVariable;\n            selectedCanton = undefined;\n        } else {\n            selectedCanton = this.props.selectedVariable;\n            selectedHospital = undefined;\n        }\n\n        const { t } = this.props;\n\n        let mapViewHospitals = (\n            <div className=\"mapViewHospitals\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.selectVariable} selectedItem={selectedHospital} defaultText={t('dropDowns.cantonFallback')}/>\n                <p>{t('mapView.filter')}</p>\n                <FilterEditor hospitals={this.props.hospitals} updateHospitals={this.props.updateHospitals} fetchData={this.fetchEnumData} hasLoaded={this.props.hasLoaded} selectedYear={this.props.year} variables={enums} />\n            </div>\n        )\n\n        let mapViewCantons = (\n            <div className=\"mapViewCantons\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.selectVariable} selectedItem={selectedCanton} defaultText={t('dropDowns.cantonFallback')}/>\n            </div>\n        )\n\n        let mapView = (\n            <div className=\"view1\">\n                <div className=\"header\">\n                    <h1>{t('mapView.title')}</h1>\n                    <div className=\"viewSwitcher\">\n                        <p id=\"l1\" className={(this.state.mapView === 1) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 1)}>{t('mapView.hospitals')}</p>\n                        <p className=\"separator\">|</p>\n                        <p id=\"l2\" className={(this.state.mapView === 2) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 2)}>{t('mapView.cantons')}</p>\n                    </div>\n                </div>\n                {\n                    (this.state.mapView === 1)\n                    ? mapViewHospitals\n                    : mapViewCantons\n                }\n            </div>\n        );\n\n        let tableView = (\n            <div className=\"view2\">\n                <div className=\"header\">\n                    <h1>{t('tableView.title')}</h1>\n                </div>\n            </div>\n        );\n\n        let graphView = (\n            <div className=\"view3\">\n                <div className=\"header\">\n                    <h1>{t('graphView.title')}</h1>\n                </div>\n            </div>\n        );\n\n        let controlPanelView;\n        switch(this.props.view) {\n            case 1:\n                controlPanelView = mapView;\n                break;\n            case 2:\n                controlPanelView = tableView;\n                break;\n            case 3:\n                controlPanelView = graphView;\n                break;\n            default:\n                controlPanelView = mapView;\n        }\n\n        return (\n\t\t\t<div className=\"control-panel\">\n                <div className=\"tabs\">\n                    <div id=\"t1\" className=\"tab selectedTab\" onClick={this.setTabView.bind(this, 1)}></div>\n                    <div id=\"t2\" className=\"tab\" onClick={this.setTabView.bind(this, 2)}></div>\n                    <div id=\"t3\" className=\"tab\" onClick={this.setTabView.bind(this, 3)}></div>\n                </div>\n                <div className=\"tabContent\">\n                    {controlPanelView}\n                </div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;\n"]},"metadata":{},"sourceType":"module"}