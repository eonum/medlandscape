{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactLeaflet = require(\"react-leaflet\");\n\nvar _leaflet = require(\"leaflet\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar DumbControl = _leaflet.Control.extend({\n  options: {\n    className: \"\",\n    onOff: \"\",\n    handleOff: function noop() {}\n  },\n  onAdd: function onAdd()\n  /* map */\n  {\n    var _controlDiv = _leaflet.DomUtil.create(\"div\", this.options.className);\n\n    _leaflet.DomEvent.disableClickPropagation(_controlDiv);\n\n    return _controlDiv;\n  },\n  onRemove: function onRemove(map) {\n    if (this.options.onOff) {\n      map.off(this.options.onOff, this.options.handleOff, this);\n    }\n\n    return this;\n  }\n});\n\nexports.default = (0, _reactLeaflet.withLeaflet)(function (_MapControl) {\n  _inherits(LeafletControl, _MapControl);\n\n  function LeafletControl() {\n    _classCallCheck(this, LeafletControl);\n\n    return _possibleConstructorReturn(this, (LeafletControl.__proto__ || Object.getPrototypeOf(LeafletControl)).apply(this, arguments));\n  }\n\n  _createClass(LeafletControl, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      return new DumbControl(Object.assign({}, props));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _get(LeafletControl.prototype.__proto__ || Object.getPrototypeOf(LeafletControl.prototype), \"componentDidMount\", this).call(this); // This is needed because the control is only attached to the map in\n      // MapControl's componentDidMount, so the container is not available\n      // until this is called. We need to now force a render so that the\n      // portal and children are actually rendered.\n\n\n      this.forceUpdate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.leafletElement || !this.leafletElement.getContainer()) {\n        return null;\n      }\n\n      return _reactDom2.default.createPortal(this.props.children, this.leafletElement.getContainer());\n    }\n  }]);\n\n  return LeafletControl;\n}(_reactLeaflet.MapControl));","map":null,"metadata":{},"sourceType":"script"}