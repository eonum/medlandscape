{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js';\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      enums: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      selectedCantons: [],\n      selectedHospitals: [],\n      selectedYear: \"\",\n      hasLoaded: false\n      /**\n      * Fetches Cantons or Hospitals with the selected Variable information.\n      * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n      */\n\n    };\n\n    _this.applyVar = function (selectedVar) {\n      var name = selectedVar.name,\n          variable_model = selectedVar.variable_model;\n      var query = _this.props.i18n.language + apiRequest;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      query += key + \"?variables=\" + encodeURIComponent(name);\n\n      _this.apiCall(query).then(function (results) {\n        _this.setState(_defineProperty({}, key, results.map(function (obj) {\n          return obj;\n        })));\n\n        if (key === \"hospitals\") {\n          _this.setState({\n            selectedHospitals: results.map(function (obj) {\n              return obj;\n            })\n          });\n        }\n      }).then(function () {\n        _this.setState({\n          hasLoaded: true,\n          selectedYear: _this.getYears()[0]\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr,\n          enumVars,\n          cantonResultArr = [];\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"variables\").then(function (result) {\n        varResultArr = result.map(function (obj) {\n          return obj;\n        });\n        enumVars = varResultArr.filter(function (obj) {\n          return obj.variable_type === \"enum\";\n        });\n      }); // hospitals already fetched in applyVar()\n\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"cantons\").then(function (result) {\n        cantonResultArr = result.map(function (obj) {\n          return obj;\n        });\n      }).then(function () {\n        _this.setState({\n          variables: varResultArr,\n          enums: enumVars,\n          cantons: cantonResultArr,\n          selectedVariable: varResultArr[0]\n        });\n\n        _this.applyVar(varResultArr[0]);\n      });\n    };\n\n    _this.dropdownSelectItem = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n\n      _this.applyVar(item);\n    };\n\n    _this.checkboxSelectItem = function (object) {\n      var selectedObj = object.text ? \"selectedCantons\" : \"selectedHospitals\";\n      var newList = [];\n\n      if (_this.state[selectedObj].includes(object)) {\n        newList = _this.state[selectedObj].filter(function (checkedObj) {\n          return checkedObj !== object;\n        });\n      } else {\n        newList = [].concat(_toConsumableArray(_this.state[selectedObj]), [object]);\n      }\n\n      _this.setState(_defineProperty({}, selectedObj, newList));\n    };\n\n    _this.create2dArr = function (selectedObject) {\n      var arr = [];\n\n      for (var key in selectedObject) {\n        if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n          arr.push([key, selectedObject[key]]);\n        }\n      }\n\n      return arr;\n    };\n\n    _this.getYears = function () {\n      var selVar = _this.state.selectedVariable;\n      var selObj = selVar.variable_model === \"Hospital\" ? _this.state.selectedHospitals : _this.state.cantons;\n      var years = selVar.is_time_series ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n      return years;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year,\n        hasLoaded: true\n      });\n    };\n\n    _this.updateSelectedHospitals = function (selectedHospitals) {\n      _this.setState({\n        selectedHospitals: selectedHospitals\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [];\n      var selectedCanton = {},\n          selectedHospital = {};\n      hospitalVars = this.state.variables.filter(function (variable) {\n        if (variable.variable_model === \"Hospital\") return variable;\n      });\n      cantonVars = this.state.variables.filter(function (variable) {\n        if (variable.variable_model === \"Canton\") return variable;\n      });\n\n      if (this.state.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.state.selectedVariable;\n        selectedCanton = cantonVars[0];\n      } else {\n        selectedCanton = this.state.selectedVariable;\n        selectedHospital = hospitalVars[0];\n      }\n\n      var t = this.props.t;\n      years = this.state.hasLoaded ? this.getYears() : [];\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, t('variables.name_canton')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: selectedCanton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, t('variables.name_hospital')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: selectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      })), years.length > 1 ? React.createElement(Slider, {\n        years: years,\n        selectedYear: this.state.selectedYear,\n        setYear: this.setYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }) : null), React.createElement(Maps, {\n        objects: this.state.selectedVariable.variable_model === \"Hospital\" ? this.state.selectedHospitals : this.state.cantons,\n        variableInfo: this.state.selectedVariable,\n        year: this.state.selectedYear,\n        hasLoaded: this.state.hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), React.createElement(FilterEditor, {\n        hospitals: this.state.hospitals,\n        updateHospitals: this.updateSelectedHospitals,\n        hasLoaded: this.state.hasLoaded,\n        variables: this.state.variables,\n        selectedYear: this.state.selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","DropdownMenu","Maps","Slider","FilterEditor","withTranslation","LanguagePicker","apiURL","apiRequest","App","state","variables","enums","cantons","hospitals","selectedVariable","selectedCantons","selectedHospitals","selectedYear","hasLoaded","applyVar","selectedVar","name","variable_model","query","props","i18n","language","key","encodeURIComponent","apiCall","then","results","setState","map","obj","getYears","fetch","res","json","initApiCall","varResultArr","enumVars","cantonResultArr","result","filter","variable_type","dropdownSelectItem","item","checkboxSelectItem","object","selectedObj","text","newList","includes","checkedObj","create2dArr","selectedObject","arr","push","selVar","selObj","years","is_time_series","Object","keys","attributes","setYear","year","updateSelectedHospitals","cantonVars","hospitalVars","selectedCanton","selectedHospital","variable","t","length","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js'\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables: [],\n        enums : [],\n        cantons : [],\n        hospitals : [],\n\n        selectedVariable : {},\n        selectedCantons : [],\n        selectedHospitals : [],\n        selectedYear : \"\",\n        hasLoaded : false\n    }\n\n    /**\n    * Fetches Cantons or Hospitals with the selected Variable information.\n    * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n    */\n    applyVar = (selectedVar) => {\n        const {name, variable_model} = selectedVar;\n\n        let query = this.props.i18n.language + apiRequest;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        query += key + \"?variables=\" + encodeURIComponent(name);\n\n        this.apiCall(query).then((results) => {\n            this.setState({\n                [key] : results.map(obj => {\n                    return obj;\n                }),\n            });\n            if (key === \"hospitals\"){\n                this.setState({selectedHospitals : results.map(obj => {\n                    return obj;\n                    }),\n                });\n            }\n        }).then(() => {\n            this.setState({\n                hasLoaded : true,\n                selectedYear : this.getYears()[0]\n            });\n        })\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with several calls to the API.\n    */\n    initApiCall = () => {\n        let varResultArr, enumVars, cantonResultArr = [];\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"variables\")).then((result) => {\n            varResultArr = result.map(obj => {\n                return obj;\n            })\n            enumVars = varResultArr.filter(obj => {\n                return obj.variable_type === \"enum\";\n            })\n        });\n\n        // hospitals already fetched in applyVar()\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"cantons\")).then((result) => {\n            cantonResultArr = result.map(obj => {\n                return obj;\n            })\n        }).then(() => {\n            this.setState({\n                variables : varResultArr,\n                enums : enumVars,\n                cantons : cantonResultArr,\n                selectedVariable : varResultArr[0]\n            });\n            this.applyVar(varResultArr[0]);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * then calls applyVar to fetch data from the API.\n    * @param  {Variable object} item The selected variable.\n    */\n    dropdownSelectItem = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n        this.applyVar(item);\n    }\n\n    /**\n    * Adds / removes objects to the respective List of selected canton / hospitals.\n    * @param  {Canton/Hospital object} object The object to add / remove from the list.\n    */\n    checkboxSelectItem = (object) => {\n        let selectedObj = (object.text) ? \"selectedCantons\" : \"selectedHospitals\";\n        let newList = [];\n        if (this.state[selectedObj].includes(object)) {\n            newList = this.state[selectedObj].filter(checkedObj => {\n                return checkedObj !== object;\n            });\n        } else {\n            newList = [...this.state[selectedObj], object];\n        }\n        this.setState({\n            [selectedObj] : newList\n        })\n    }\n\n    /**\n    * Creates a 2d array out of an object (Used for Table Component).\n    * @param  {Object} selectedObject The object to convert to a 2d array.\n    * @return {Array} The 2d array.\n    */\n    create2dArr = (selectedObject) => {\n        let arr = [];\n        for (var key in selectedObject) {\n            if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n                arr.push([key, selectedObject[key]]);\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * Returns list of available years depending on variable\n     * @return {Array} The available years.\n     */\n    getYears = () => {\n        let selVar = this.state.selectedVariable;\n        let selObj = (selVar.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons;\n        let years = (selVar.is_time_series) ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n        return years;\n    }\n\n    /**\n     * [setYear description]\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year,\n            hasLoaded : true\n        })\n    }\n\n    /**\n     * Set selectedHospitals to\n     * @param {Array} the selected hospitals.\n     */\n    updateSelectedHospitals = (selectedHospitals) => {\n        this.setState({\n            selectedHospitals: selectedHospitals\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        hospitalVars = this.state.variables.filter(variable => {\n            if (variable.variable_model === \"Hospital\")\n            return variable\n        })\n        cantonVars = this.state.variables.filter(variable => {\n            if (variable.variable_model === \"Canton\")\n            return variable\n        })\n\n        if (this.state.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.state.selectedVariable;\n            selectedCanton = cantonVars[0];\n        } else {\n            selectedCanton = this.state.selectedVariable;\n            selectedHospital = hospitalVars[0];\n        }\n\n        const { t } = this.props;\n        years = (this.state.hasLoaded) ? this.getYears() : [];\n\n        return (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t<div className=\"control-panel\">\n\t\t\t\t\t\t<p>{t('variables.name_canton')}</p>\n\t\t\t\t\t\t<DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.dropdownSelectItem} selectedItem={selectedCanton} />\n\t\t\t\t\t\t<p>{t('variables.name_hospital')}</p>\n\t\t\t\t\t\t<DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.dropdownSelectItem} selectedItem={selectedHospital} />\n\t\t\t\t\t\t<LanguagePicker resendInitApiCall={this.initApiCall} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{\n\t\t\t\t\t\t(years.length > 1)\n\t\t\t\t\t\t? <Slider years={years} selectedYear={this.state.selectedYear} setYear={this.setYear}/>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<Maps objects={(this.state.selectedVariable.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons} variableInfo={this.state.selectedVariable} year={this.state.selectedYear} hasLoaded={this.state.hasLoaded} />\n\t\t\t\t<FilterEditor hospitals={this.state.hospitals} updateHospitals={this.updateSelectedHospitals} hasLoaded={this.state.hasLoaded} variables={this.state.variables} selectedYear={this.state.selectedYear}/>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}