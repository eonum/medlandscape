{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/LinearRegression.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport './LinearRegression.css';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport { withTranslation } from 'react-i18next';\n/**\n* LinearRegression is the entity we use to calculate and draw a scatterplot with a regression line.\n* The rendered JSX also consists of two dropdowns where variables can be selected to display a scatterplot.\n* The currently selected variables and language are stored in the state.\n* Width, heigth and passing of the chart are also stored in the state.\n*/\n\nvar LinearRegression =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LinearRegression, _Component);\n\n  function LinearRegression() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LinearRegression);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LinearRegression)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      xVariable: undefined,\n      yVariable: undefined,\n      language: _this.props.i18n.language,\n      w: 700,\n      h: 400,\n      padding: 30\n    };\n\n    _this.returnData = function (item) {\n      var xVarName = _this.state.xVariable.name;\n      var yVarName = _this.state.yVariable.name;\n      var xValues = item.attributes[xVarName];\n      var yValues = item.attributes[yVarName];\n      var xData = xValues[_this.props.year];\n      var yData = yValues[_this.props.year];\n      return {\n        x: xData,\n        y: yData\n      };\n    };\n\n    _this.makeDataArrays = function () {\n      var xArray = [];\n      var yArray = [];\n      var objArray = [];\n\n      _this.props.hospitals.forEach(function (obj) {\n        var data = _this.returnData(obj);\n\n        if (data.x && data.y) {\n          // sort out undefined values for given year\n          xArray.push(data.x);\n          yArray.push(data.y);\n          objArray.push(obj);\n        }\n      });\n\n      return {\n        x: xArray,\n        y: yArray,\n        obj: objArray //pointer to the hospital\n\n      };\n    };\n\n    _this.drawChart = function () {\n      //remove old svg\n      _this.removeChart(); // get width, heigth and padding\n\n\n      var _this$state = _this.state,\n          w = _this$state.w,\n          h = _this$state.h,\n          padding = _this$state.padding; //create data points\n\n      var dataset = _this.createChartdata(); // function for creation of regression line\n\n\n      var newline = d3.line().x(function (d) {\n        return xScale(d.x);\n      }).y(function (d) {\n        return yScale(d.yhat);\n      }); // Define Scales\n\n      var xScale = d3.scaleLinear().domain([0, d3.max(dataset, function (d) {\n        return d.x;\n      })]).range([padding, w - padding * 2]);\n      var yScale = d3.scaleLinear().domain([d3.min(dataset, function (d) {\n        return d.y;\n      }), d3.max(dataset, function (d) {\n        return d.y;\n      })]) //y range is reversed because svg\n      .range([h - padding, padding]); // Add a tooltip div. Here we define the general feature of the tooltip: stuff that do not depend on the data point.\n      // Its opacity is set to 0: we don't see it by default.\n      // var tooltip = d3.select(\"#linearregression\")\n      //     .append(\"div\")\n      //     .style(\"opacity\", 0)\n      //     .attr(\"class\", \"tooltip\")\n\n      var popup = d3.select(\"#linearregression\").append(\"div\").style(\"display\", \"none\").attr(\"id\", \"popup\");\n      var table = popup.append(\"table\");\n      var firstRow = table.append(\"tr\");\n      firstRow.append(\"td\").text(_this.props.t(\"popup.hospital\"));\n      firstRow.append(\"td\").attr(\"id\", \"popupName\");\n      var secondRow = table.append(\"tr\");\n      secondRow.append(\"td\").text(_this.props.t(\"popup.address\"));\n      secondRow.append(\"td\").attr(\"id\", \"popupAddress\");\n      var thirdRow = table.append(\"tr\");\n      thirdRow.append(\"td\").text(_this.state.xVariable.text);\n      thirdRow.append(\"td\").attr(\"id\", \"popupXVariable\");\n      var fourthRow = table.append(\"tr\");\n      fourthRow.append(\"td\").text(_this.state.yVariable.text);\n      fourthRow.append(\"td\").attr(\"id\", \"popupYVariable\"); // function that changes  tooltip when the user hovers over a point.\n      // opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)\n\n      var mouseover = function mouseover(d) {\n        d3.select(\"#linearregression .tooltip\").style(\"opacity\", 1).text(d.obj.name);\n      };\n\n      var mousemove = function mousemove(d) {\n        d3.select(\"#linearregression .tooltip\").style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY - 28 + \"px\");\n      }; // close popup if you click outside\n\n\n      var func = function func(e) {\n        d3.select(\"#popup\").style(\"display\", \"none\");\n        document.removeEventListener(\"click\", func);\n      };\n\n      var mouseclick = function mouseclick(d) {\n        d3.select(\"#popup\").style(\"display\", \"block\").style(\"left\", d3.event.pageX + \"px\").style(\"top\", d3.event.pageY - 28 + \"px\");\n        d3.select(\"#popupName\").text(d.obj.name);\n        d3.select(\"#popupAddress\").html(\"<dd>\" + d.obj.street + \",</dd>\" + d.obj.city);\n        d3.select(\"#popupXVariable\").text(d.x);\n        d3.select(\"#popupYVariable\").text(d.y); // prevent that the click event closes the popup\n\n        d3.event.stopPropagation();\n        document.addEventListener(\"click\", func);\n      }; // A function that change this tooltip when the leaves a point: just need to set opacity to 0 again\n\n\n      var mouseleave = function mouseleave(d) {\n        d3.select(\"#linearregression .tooltip\").transition().duration(200).style(\"opacity\", 0);\n      }; // create svg\n\n\n      var svg = _this.createSvg(); // cut off datapoints that are outside the axis\n\n\n      svg.append(\"clipPath\").attr(\"id\", \"chart-area\").append(\"rect\").attr(\"x\", padding).attr(\"y\", padding).attr(\"width\", w - padding * 3).attr(\"height\", h - padding * 2); // append data points\n\n      svg.append(\"g\").attr(\"id\", \"circles\").attr(\"clip-path\", \"url(#chart-area)\").selectAll(\"circle\").data(dataset, function (d) {\n        return d;\n      }).enter().append(\"circle\").attr(\"class\", \"dot\").attr(\"cx\", function (d) {\n        return xScale(d.x);\n      }).attr(\"cy\", function (d) {\n        return yScale(d.y);\n      }).attr(\"r\", 3.5).style(\"cursor\", \"pointer\").on(\"mouseover\", mouseover).on(\"mousemove\", mousemove).on(\"mouseleave\", mouseleave).on(\"click\", mouseclick); // append regression line\n\n      svg.append(\"path\").datum(dataset).attr(\"clip-path\", \"url(#chart-area)\").attr(\"class\", \"line\").attr(\"d\", newline); // define and append axes\n\n      _this.appendAxes(svg, xScale, yScale); // call this to set back and prepare for reupdate\n\n\n      _this.props.tableDataGenerated();\n    };\n\n    _this.createChartdata = function () {\n      var dataArrays = _this.makeDataArrays();\n\n      var x = dataArrays.x;\n      var y = dataArrays.y;\n      var obj = dataArrays.obj;\n      var n = x.length; // create x and y sums\n\n      var xSum = 0;\n      var ySum = 0;\n\n      for (var i = 0; i < n; i++) {\n        xSum += x[i];\n        ySum += y[i];\n      } // calculate mean x and y\n\n\n      var xMean = xSum / n;\n      var yMean = ySum / n; // calculate coefficients\n\n      var xvariance = 0;\n      var yvariance = 0;\n      var term1 = 0;\n      var term2 = 0;\n\n      for (i = 0; i < x.length; i++) {\n        xvariance = x[i] - xMean;\n        yvariance = y[i] - yMean;\n        term1 += xvariance * yvariance;\n        term2 += xvariance * xvariance;\n      }\n\n      var b1 = term1 / term2;\n      var b0 = yMean - b1 * xMean; // perform regression\n\n      var yhat = []; // fit line using coeffs\n\n      for (i = 0; i < x.length; i++) {\n        yhat.push(b0 + x[i] * b1);\n      } // create actual data objects\n\n\n      var data = [];\n\n      for (i = 0; i < y.length && i < x.length; i++) {\n        data.push({\n          yhat: yhat[i],\n          y: y[i],\n          x: x[i],\n          obj: obj[i]\n        });\n      }\n\n      return data;\n    };\n\n    _this.drawEmptyChart = function () {\n      _this.removeChart();\n\n      var _this$state2 = _this.state,\n          w = _this$state2.w,\n          h = _this$state2.h,\n          padding = _this$state2.padding; // Define Scales\n\n      var xScale = d3.scaleLinear().domain([undefined, undefined]).range([padding, w - padding * 2]);\n      var yScale = d3.scaleLinear().domain([undefined, undefined]).range([h - padding, padding]);\n\n      var svg = _this.createSvg();\n\n      _this.appendAxes(svg, xScale, yScale);\n    };\n\n    _this.createSvg = function () {\n      var _this$state3 = _this.state,\n          w = _this$state3.w,\n          h = _this$state3.h;\n      var svg = d3.select(\"#linearregression\").append(\"svg\").attr(\"id\", \"linearregressionsvg\").attr(\"width\", w).attr(\"height\", h);\n      return svg;\n    };\n\n    _this.appendAxes = function (svg, xScale, yScale) {\n      var _this$state4 = _this.state,\n          h = _this$state4.h,\n          padding = _this$state4.padding; //define axes\n\n      var xAxis = d3.axisBottom().scale(xScale);\n      var yAxis = d3.axisLeft().scale(yScale).ticks(5); //append axes\n\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + (h - padding) + \")\").call(xAxis);\n      svg.append(\"g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(\" + padding + \",0)\").call(yAxis);\n    };\n\n    _this.selectXAxis = function (item) {\n      _this.setState({\n        xVariable: item\n      }, function () {\n        _this.updateChart();\n      });\n    };\n\n    _this.selectYAxis = function (item) {\n      _this.setState({\n        yVariable: item\n      }, function () {\n        _this.updateChart();\n      });\n    };\n\n    _this.updateChart = function () {\n      if (_this.state.xVariable && _this.state.yVariable) _this.props.requestData([_this.state.xVariable, _this.state.yVariable]);\n    };\n\n    _this.removeChart = function () {\n      d3.select(\"#linearregressionsvg\").remove();\n      d3.select(\"#popup\").remove();\n      d3.select(\"#linearregression .tooltip\").remove();\n    };\n\n    return _this;\n  }\n\n  _createClass(LinearRegression, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawEmptyChart();\n    }\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate() {\n      // if the language is changed,set back variables and remove chart\n      if (this.props.i18n.language !== this.state.language) {\n        this.setState({\n          language: this.props.i18n.language,\n          xVariable: undefined,\n          yVariable: undefined\n        });\n        this.drawEmptyChart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // check if response is there and draw chart if so\n      if (this.props.tableDataLoaded) {\n        this.drawChart();\n      }\n    }\n    /**\n    * Returns the values stored in a this.props.objects canton/hospital\n    * @param  {Canton || Hospital Object} item The object to extract the values from\n    * @return {Object} with x: Data for the xVariable and y: Data for the yVariable\n    */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * Creates zwo dropdowns and scatterplot with regression line\n     * @return {JSX}\n     */\n    value: function render() {\n      var variables = this.props.variables.filter(function (variable) {\n        return variable.variable_type !== \"enum\" && variable.variable_type !== \"string\";\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"yAxisBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }, \"Y-Achse:\"), React.createElement(DropdownMenu, {\n        id: \"yAxis\",\n        listItems: variables,\n        selectItem: this.selectYAxis,\n        selectedItem: this.state.yVariable,\n        defaultText: this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"linearregression\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"xAxisBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }, \"X-Achse:\"), React.createElement(DropdownMenu, {\n        id: \"xAxis\",\n        listItems: variables,\n        selectItem: this.selectXAxis,\n        selectedItem: this.state.xVariable,\n        defaultText: this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return LinearRegression;\n}(Component);\n\nvar LocalizedLinearRegression = withTranslation()(LinearRegression);\nexport default LocalizedLinearRegression;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/LinearRegression.js"],"names":["React","Component","d3","DropdownMenu","withTranslation","LinearRegression","state","xVariable","undefined","yVariable","language","props","i18n","w","h","padding","returnData","item","xVarName","name","yVarName","xValues","attributes","yValues","xData","year","yData","x","y","makeDataArrays","xArray","yArray","objArray","hospitals","forEach","obj","data","push","drawChart","removeChart","dataset","createChartdata","newline","line","d","xScale","yScale","yhat","scaleLinear","domain","max","range","min","popup","select","append","style","attr","table","firstRow","text","t","secondRow","thirdRow","fourthRow","mouseover","mousemove","event","pageX","pageY","func","e","document","removeEventListener","mouseclick","html","street","city","stopPropagation","addEventListener","mouseleave","transition","duration","svg","createSvg","selectAll","enter","on","datum","appendAxes","tableDataGenerated","dataArrays","n","length","xSum","ySum","i","xMean","yMean","xvariance","yvariance","term1","term2","b1","b0","drawEmptyChart","xAxis","axisBottom","scale","yAxis","axisLeft","ticks","call","selectXAxis","setState","updateChart","selectYAxis","requestData","remove","tableDataLoaded","variables","filter","variable","variable_type","LocalizedLinearRegression"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport * as d3 from \"d3\";\nimport './LinearRegression.css'\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport { withTranslation } from 'react-i18next';\n\n/**\n* LinearRegression is the entity we use to calculate and draw a scatterplot with a regression line.\n* The rendered JSX also consists of two dropdowns where variables can be selected to display a scatterplot.\n* The currently selected variables and language are stored in the state.\n* Width, heigth and passing of the chart are also stored in the state.\n*/\nclass LinearRegression extends Component {\n\n\tstate = {\n        xVariable : undefined,\n        yVariable : undefined,\n\t\tlanguage: this.props.i18n.language,\n\t\tw : 700,\n\t\th : 400,\n\t\tpadding : 30,\n\t};\n\n\tcomponentDidMount(){\n\t\tthis.drawEmptyChart();\n\t}\n\n\tcomponentWillUpdate(){\n\t\t// if the language is changed,set back variables and remove chart\n\t\tif (this.props.i18n.language !== this.state.language){\n\t\t\tthis.setState({\n\t\t\t\tlanguage : this.props.i18n.language,\n\t\t\t\txVariable: undefined,\n\t\t\t\tyVariable: undefined,\n\t\t\t});\n\t\tthis.drawEmptyChart();\n\t\t}\n\t}\n\n\tcomponentDidUpdate(){\n\t\t// check if response is there and draw chart if so\n\t\tif(this.props.tableDataLoaded) {\n\t\t\tthis.drawChart();\n\t\t}\n\t}\n\n\t/**\n\t* Returns the values stored in a this.props.objects canton/hospital\n\t* @param  {Canton || Hospital Object} item The object to extract the values from\n\t* @return {Object} with x: Data for the xVariable and y: Data for the yVariable\n\t*/\n   returnData = (item) => {\n\t   let xVarName = this.state.xVariable.name;\n\t   let yVarName = this.state.yVariable.name;\n\t   let xValues = item.attributes[xVarName];\n\t   let yValues = item.attributes[yVarName];\n\t   let xData = xValues[this.props.year];\n\t   let yData = yValues[this.props.year];\n\t   return {\n\t\t   x: xData,\n\t\t   y: yData,\n\t   };\n   }\n\n   /**\n\t* Returns an Object with arrays containing all Values of the chosen variables\n\t* @return {Object} with x: all data values for the xVariable and y: all data values for the yVariable\n\t*/\n   makeDataArrays = () => {\n\t   let xArray = [];\n\t   let yArray = [];\n\t   let objArray = [];\n\t   this.props.hospitals.forEach((obj) => {\n\t\t   let data = this.returnData(obj);\n\t\t   if (data.x && data.y){ // sort out undefined values for given year\n\t\t\t\txArray.push(data.x);\n\t\t\t\tyArray.push(data.y);\n\t\t\t\tobjArray.push(obj);\n\t\t   }\n\t   })\n\t   return {\n\t\t   x: xArray,\n\t\t   y: yArray,\n\t\t   obj: objArray, //pointer to the hospital\n\t   };\n   }\n\n\t/**\n\t * Draws a Scatterplot with a regression line\n\t */\n\tdrawChart = () => {\n\t\t//remove old svg\n\t\tthis.removeChart();\n\n\t\t// get width, heigth and padding\n\t\tconst {w, h, padding} = this.state;\n\n\t\t//create data points\n\t\tvar dataset = this.createChartdata();\n\n\t\t// function for creation of regression line\n\t\tvar newline = d3.line()\n\t\t\t.x(function(d) {\n\t\t\t\treturn xScale(d.x);\n\t\t\t})\n\t\t\t.y(function(d) {\n\t\t\t\treturn yScale(d.yhat);\n\t\t\t});\n\n\t\t// Define Scales\n\t\tvar xScale = d3.scaleLinear()\n\t\t\t.domain([0,d3.max(dataset, function(d){\n\t\t\t\treturn d.x;\n\t\t\t})])\n\t\t\t.range([padding,w - padding*2]);\n\t\tvar yScale = d3.scaleLinear()\n\t\t\t.domain([\n\t\t\t\td3.min(dataset, function(d){\n\t\t\t\t\treturn(d.y);\n\t\t\t\t}),\n\t\t\t\td3.max(dataset, function(d){\n\t\t\t  \t\treturn d.y;\n\t\t\t\t})\n\t\t\t]) //y range is reversed because svg\n\t\t\t.range([h-padding, padding]);\n\n\t\t// Add a tooltip div. Here we define the general feature of the tooltip: stuff that do not depend on the data point.\n     \t// Its opacity is set to 0: we don't see it by default.\n     \t// var tooltip = d3.select(\"#linearregression\")\n\t\t//     .append(\"div\")\n\t\t//     .style(\"opacity\", 0)\n\t\t//     .attr(\"class\", \"tooltip\")\n\n\t\tvar popup = d3.select(\"#linearregression\")\n\t\t\t.append(\"div\")\n\t\t\t.style(\"display\", \"none\")\n\t\t\t.attr(\"id\", \"popup\");\n\n\t\tvar table = popup\n\t\t\t.append(\"table\");\n\n\t\tvar firstRow = table\n\t\t\t.append(\"tr\");\n\t\tfirstRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.props.t(\"popup.hospital\"));\n\t\tfirstRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupName\");\n\n\t\tvar secondRow = table\n\t\t\t.append(\"tr\");\n\t\tsecondRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.props.t(\"popup.address\"));\n\t\tsecondRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupAddress\");\n\n\t\tvar thirdRow = table\n\t\t\t.append(\"tr\");\n\t\tthirdRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.state.xVariable.text);\n\t\tthirdRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupXVariable\");\n\n\t\tvar fourthRow = table\n\t\t\t.append(\"tr\");\n\t\tfourthRow\n\t\t\t.append(\"td\")\n\t\t\t.text(this.state.yVariable.text);\n\t\tfourthRow\n\t\t\t.append(\"td\")\n\t\t\t.attr(\"id\", \"popupYVariable\");\n\n     \t// function that changes  tooltip when the user hovers over a point.\n     \t// opacity is set to 1: we can now see it. Plus it set the text and position of tooltip depending on the datapoint (d)\n    \tvar mouseover = function(d) {\n       \t\td3.select(\"#linearregression .tooltip\").style(\"opacity\", 1)\n\t\t\t\t.text(d.obj.name);\n\t\t}\n\n    \tvar mousemove = function(d) {\n       \t\td3.select(\"#linearregression .tooltip\")\n\t\t\t\t.style(\"left\", (d3.event.pageX) + \"px\")\n\t\t\t\t.style(\"top\", (d3.event.pageY - 28) + \"px\");\n    \t}\n\n\n\t\t// close popup if you click outside\n\t\tvar func = function(e) {\n\t\t\td3.select(\"#popup\")\n\t\t\t\t.style(\"display\", \"none\");\n\t\t\tdocument.removeEventListener(\"click\", func);\n\t\t}\n\n\t\tvar mouseclick = function(d) {\n       \t\td3.select(\"#popup\")\n\t\t\t\t.style(\"display\", \"block\")\n\t\t\t\t.style(\"left\", (d3.event.pageX) + \"px\")\n\t\t\t\t.style(\"top\", (d3.event.pageY - 28) + \"px\")\n\t\t\td3.select(\"#popupName\")\n\t\t\t\t.text(d.obj.name);\n\t\t\td3.select(\"#popupAddress\")\n\t\t\t\t.html(\"<dd>\" + d.obj.street + \",</dd>\" + d.obj.city);\n\t\t\td3.select(\"#popupXVariable\")\n\t\t\t\t.text(d.x);\n\t\t\td3.select(\"#popupYVariable\")\n\t\t\t\t.text(d.y);\n\n\t\t\t// prevent that the click event closes the popup\n\t\t\td3.event.stopPropagation();\n\t\t\tdocument.addEventListener(\"click\", func);\n    \t}\n\n     \t// A function that change this tooltip when the leaves a point: just need to set opacity to 0 again\n    \tvar mouseleave = function(d) {\n       \t\td3.select(\"#linearregression .tooltip\").transition()\n        \t\t.duration(200)\n        \t\t.style(\"opacity\", 0)\n    \t}\n\n\t\t// create svg\n\t\tvar svg = this.createSvg();\n\n\t\t// cut off datapoints that are outside the axis\n\t\tsvg.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"chart-area\")\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", padding)\n\t\t\t.attr(\"y\", padding)\n\t\t\t.attr(\"width\", w-padding * 3)\n\t\t\t.attr(\"height\", h-padding *2);\n\n\t\t// append data points\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"id\", \"circles\")\n\t\t\t.attr(\"clip-path\", \"url(#chart-area)\")\n\t\t\t.selectAll(\"circle\")\n\t\t\t.data(dataset, function(d){return d;})\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", \"dot\")\n\t\t\t.attr(\"cx\", function(d){\n\t\t\t\treturn xScale(d.x);\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d){\n\t\t\t\treturn yScale(d.y);\n\t\t\t})\n\t\t\t.attr(\"r\", 3.5)\n\t\t\t.style(\"cursor\", \"pointer\")\n\t\t\t.on(\"mouseover\", mouseover)\n\t\t\t.on(\"mousemove\", mousemove)\n\t\t\t.on(\"mouseleave\", mouseleave)\n\t\t\t.on(\"click\", mouseclick);\n\n\t\t// append regression line\n\t\tsvg.append(\"path\")\n\t\t\t.datum(dataset)\n\t\t\t.attr(\"clip-path\", \"url(#chart-area)\")\n\t\t\t.attr(\"class\", \"line\")\n\t\t\t.attr(\"d\", newline);\n\n\t\t// define and append axes\n\t\tthis.appendAxes(svg, xScale, yScale);\n\n\t\t// call this to set back and prepare for reupdate\n\t\tthis.props.tableDataGenerated();\n\t}\n\n\t/**\n\t* creates the dataset from arrays of data for x and y values\n\t* @return {Object} dataset that will be visualized\n\t*/\n\tcreateChartdata = () => {\n\t\tlet dataArrays = this.makeDataArrays();\n\t\tvar x = dataArrays.x;\n\t\tvar y = dataArrays.y;\n\t\tvar obj = dataArrays.obj;\n\t\tvar n = x.length;\n\n\t\t// create x and y sums\n\t\tlet xSum = 0;\n\t\tlet ySum = 0;\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\txSum += x[i]\n\t\t\tySum += y[i]\n\t\t}\n\n\t\t// calculate mean x and y\n\t\tlet xMean = xSum / n;\n\t\tlet yMean = ySum / n;\n\n\t\t// calculate coefficients\n\t\tvar xvariance = 0;\n\t\tvar yvariance = 0;\n\t\tvar term1 = 0;\n\t\tvar term2 = 0;\n\t\tfor (i = 0; i < x.length; i++) {\n\t\t\txvariance = x[i] - xMean;\n\t\t\tyvariance = y[i] - yMean;\n\t\t\tterm1 += xvariance * yvariance;\n\t\t\tterm2 += xvariance * xvariance;\n\t\t}\n\t\tvar b1 = term1 / term2;\n\t\tvar b0 = yMean - (b1 * xMean);\n\n\t\t// perform regression\n\t\tlet yhat = [];\n\n\t\t// fit line using coeffs\n\t\tfor (i = 0; i < x.length; i++) {\n\t\t\tyhat.push(b0 + (x[i] * b1));\n\t\t}\n\n\t\t// create actual data objects\n\t\tvar data = [];\n\t\tfor (i = 0; i < y.length && i < x.length; i++) {\n\t\t\tdata.push({\n\t\t\t\tyhat: yhat[i],\n\t\t\t\ty: y[i],\n\t\t\t\tx: x[i],\n\t\t\t\tobj: obj[i],\n\t\t\t})\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n\t * Draws an empty scatterplot (only axes without any text)\n\t */\n\tdrawEmptyChart = () => {\n\t\tthis.removeChart();\n\t\tconst {w, h, padding} = this.state;\n\t\t// Define Scales\n\t\tvar xScale = d3.scaleLinear()\n\t\t\t.domain([undefined, undefined])\n\t\t\t.range([padding,w - padding*2]);\n\t\tvar yScale = d3.scaleLinear()\n\t\t\t.domain([undefined, undefined])\n\t\t\t.range([h-padding, padding]);\n\n\t\tvar svg = this.createSvg();\n\t\tthis.appendAxes(svg, xScale, yScale);\n\t}\n\n\t/**\n\t* create svg\n\t* @return {svg}\n\t*/\n\tcreateSvg = () =>{\n\t\tconst {w, h} = this.state;\n\t\tvar svg = d3.select(\"#linearregression\")\n\t\t\t.append(\"svg\")\n\t\t\t.attr(\"id\",\"linearregressionsvg\")\n\t\t\t.attr(\"width\",w)\n\t\t\t.attr(\"height\", h);\n\t\treturn svg;\n\t}\n\n\t/**\n\t* append axes to a svg\n\t* @param {svg}\n\t* @param {xScale} xScale to append to svg\n\t* @param {xScale} yScale to append to svg\n\t*/\n\tappendAxes = (svg, xScale, yScale) => {\n\t\tconst {h, padding} = this.state;\n\t\t//define axes\n\t\tvar xAxis = d3.axisBottom()\n\t\t\t.scale(xScale);\n\n\t\tvar yAxis = d3.axisLeft()\n\t\t\t.scale(yScale)\n\t\t\t.ticks(5);\n\n\t\t//append axes\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"transform\", \"translate(0,\" + (h-padding) + \")\")\n\t\t\t.call(xAxis);\n\n\t\tsvg.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t.attr(\"transform\", \"translate(\" + padding + \",0)\")\n\t\t\t.call(yAxis);\n\t}\n\n\t/**\n    * defining behaviour on dropdown click\n\t* write the selected variable to state and update chart on X axis\n    */\n    selectXAxis = (item) => {\n\t\tthis.setState({\n\t\t\txVariable : item,\n\t\t}, () => {\n\t\t\tthis.updateChart();\n\t\t});\n\t}\n\n\t/**\n    * defining behaviour on dropdown click\n\t* write the selected variable to state and update chart on Y axis\n    */\n    selectYAxis = (item) => {\n\t\tthis.setState({\n\t\t\tyVariable : item,\n\t\t}, () => {\n\t\t\tthis.updateChart();\n\t\t});\n\t}\n\n\t/**\n\t* check if both x and y variable have been selected\n\t* update selected variables in state if so\n\t*/\n\tupdateChart = () => {\n\t\tif(this.state.xVariable && this.state.yVariable)\n\t\t\tthis.props.requestData([this.state.xVariable,this.state.yVariable]);\n\t}\n\n\t/**\n\t* remove drawn chart\n\t*/\n\tremoveChart = () => {\n\t\td3.select(\"#linearregressionsvg\").remove();\n\t\td3.select(\"#popup\").remove();\n\t\td3.select(\"#linearregression .tooltip\").remove();\n\t}\n\n\t/**\n\t * Creates zwo dropdowns and scatterplot with regression line\n\t * @return {JSX}\n\t */\n\trender() {\n\t\tlet variables = this.props.variables.filter((variable)=>{\n\t\t\treturn(variable.variable_type !== \"enum\" && variable.variable_type !== \"string\")\n\t\t});\n\t\treturn (\n        \t<div>\n\t\t\t\t<div className=\"yAxisBtn\">\n\t\t\t\t\t<p>Y-Achse:</p>\n\t\t\t\t\t<DropdownMenu id=\"yAxis\"\n\t\t                listItems={variables}\n\t\t                selectItem={this.selectYAxis}\n\t\t                selectedItem={this.state.yVariable}\n\t\t                defaultText={this.props.t('dropDowns.variablesFallback')}\n\t\t            />\n\t\t\t\t</div>\n\t\t\t\t<div id=\"linearregression\"></div>\n\t\t\t\t<div className=\"xAxisBtn\">\n\t\t\t\t\t<p>X-Achse:</p>\n\t\t\t\t\t<DropdownMenu id=\"xAxis\"\n\t\t\t\t\t\tlistItems={variables}\n\t\t\t\t\t\tselectItem={this.selectXAxis}\n\t\t\t\t\t\tselectedItem={this.state.xVariable}\n\t\t\t\t\t\tdefaultText={this.props.t('dropDowns.variablesFallback')}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n        )\n\t}\n}\n\nconst LocalizedLinearRegression = withTranslation()(LinearRegression);\nexport default LocalizedLinearRegression;\n"]},"metadata":{},"sourceType":"module"}