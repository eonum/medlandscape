{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/BoxPlot.js\";\nimport React, { Component } from 'react';\nimport exploding_boxplot from 'd3_exploding_boxplot';\nimport './BoxPlot.css';\nimport * as d3 from \"d3\";\n/**\n* BoxPlot is the entity we use to calculate and draw a boxplot from data given as props\n*/\n\nvar BoxPlot =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BoxPlot, _Component);\n\n  function BoxPlot() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BoxPlot);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BoxPlot)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.returnData = function (item) {\n      var varName = _this.props.selectedVariable.name;\n      var values = item.attributes[varName];\n      var data = values[_this.props.year];\n      return {\n        v: data,\n        g: \"box1\",\n        t: item.name\n      };\n    };\n\n    _this.makeDataArray = function () {\n      // sort out undefined values for given year\n      var filteredArr = _this.props.objects.filter(function (obj) {\n        return _this.returnData(obj) !== undefined && obj.name !== \"Ganze Schweiz\";\n      });\n\n      console.log(filteredArr);\n      return filteredArr.map(function (item) {\n        return _this.returnData(item);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BoxPlot, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // draw a chart if the variable information has been loaded via api-call\n      if (this.props.hasLoaded && !prevProps.hasLoaded) {\n        this.drawChart();\n      }\n    }\n    /**\n     * Returns the values stored in a this.props.objects canton/hospital\n     * @param  {Canton || Hospital Object} item The object to extract the values from\n     * @return {int || float} The selected entry in the item.values object\n     */\n\n  }, {\n    key: \"drawChart\",\n\n    /**\n     * Draws a BoxPlot\n     */\n    value: function drawChart() {\n      d3.select(\"#boxplot svg\").remove();\n      var data = this.makeDataArray();\n      var chart = exploding_boxplot(data, {\n        y: \"v\",\n        group: \"g\",\n        color: \"g\",\n        label: \"t\"\n      }); //call chart on a div\n\n      chart(\"#boxplot\"); //move the boxplot a bit, such that the scale is visible even for big numbers\n\n      d3.selectAll(\"#boxplot svg > g\").attr(\"transform\", \"translate(100,40)\"); //make the svg a bit bigger\n\n      d3.selectAll(\"#boxplot svg\").attr(\"height\", \"570\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"boxplot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return BoxPlot;\n}(Component);\n\nexport default BoxPlot;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Graphs/BoxPlot.js"],"names":["React","Component","exploding_boxplot","d3","BoxPlot","returnData","item","varName","props","selectedVariable","name","values","attributes","data","year","v","g","t","makeDataArray","filteredArr","objects","filter","obj","undefined","console","log","map","prevProps","hasLoaded","drawChart","select","remove","chart","y","group","color","label","selectAll","attr"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,iBAAP,MAA8B,sBAA9B;AACA,OAAO,eAAP;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA;;;;IAGMC,O;;;;;;;;;;;;;;;;;;UAeLC,U,GAAa,UAACC,IAAD,EAAU;AACtB,UAAIC,OAAO,GAAG,MAAKC,KAAL,CAAWC,gBAAX,CAA4BC,IAA1C;AACA,UAAIC,MAAM,GAAGL,IAAI,CAACM,UAAL,CAAgBL,OAAhB,CAAb;AACA,UAAIM,IAAI,GAAIF,MAAM,CAAC,MAAKH,KAAL,CAAWM,IAAZ,CAAlB;AAEA,aAAO;AAACC,QAAAA,CAAC,EAAEF,IAAJ;AAAUG,QAAAA,CAAC,EAAE,MAAb;AAAqBC,QAAAA,CAAC,EAAEX,IAAI,CAACI;AAA7B,OAAP;AACA,K;;UAODQ,a,GAAgB,YAAM;AACrB;AACA,UAAIC,WAAW,GAAG,MAAKX,KAAL,CAAWY,OAAX,CAAmBC,MAAnB,CAA0B,UAACC,GAAD,EAAS;AACpD,eAAQ,MAAKjB,UAAL,CAAgBiB,GAAhB,MAAyBC,SAAzB,IAAsCD,GAAG,CAACZ,IAAJ,KAAa,eAA3D;AACA,OAFiB,CAAlB;;AAIAc,MAAAA,OAAO,CAACC,GAAR,CAAYN,WAAZ;AAEA,aAAOA,WAAW,CAACO,GAAZ,CAAgB,UAACpB,IAAD;AAAA,eAAU,MAAKD,UAAL,CAAgBC,IAAhB,CAAV;AAAA,OAAhB,CAAP;AACA,K;;;;;;;uCAnCkBqB,S,EAAU;AAC5B;AACA,UAAI,KAAKnB,KAAL,CAAWoB,SAAX,IAAwB,CAACD,SAAS,CAACC,SAAvC,EACC;AACC,aAAKC,SAAL;AACA;AACF;AAED;;;;;;;;;AA6BA;;;gCAGY;AACX1B,MAAAA,EAAE,CAAC2B,MAAH,CAAU,cAAV,EAA0BC,MAA1B;AAEA,UAAIlB,IAAI,GAAG,KAAKK,aAAL,EAAX;AAEA,UAAIc,KAAK,GAAG9B,iBAAiB,CAACW,IAAD,EACnB;AAACoB,QAAAA,CAAC,EAAE,GAAJ;AAASC,QAAAA,KAAK,EAAE,GAAhB;AAAqBC,QAAAA,KAAK,EAAE,GAA5B;AAAiCC,QAAAA,KAAK,EAAE;AAAxC,OADmB,CAA7B,CALW,CAQX;;AACAJ,MAAAA,KAAK,CAAC,UAAD,CAAL,CATW,CAWX;;AACA7B,MAAAA,EAAE,CAACkC,SAAH,CAAa,kBAAb,EACEC,IADF,CACO,WADP,EACoB,mBADpB,EAZW,CAcX;;AACAnC,MAAAA,EAAE,CAACkC,SAAH,CAAa,cAAb,EACEC,IADF,CACO,QADP,EACiB,KADjB;AAEA;;;6BAEQ;AACR,aACO;AAAK,QAAA,EAAE,EAAC,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADP;AAGA;;;;EAjEoBrC,S;;AAoEtB,eAAeG,OAAf","sourcesContent":["import React, { Component } from 'react'\nimport exploding_boxplot from 'd3_exploding_boxplot'\nimport './BoxPlot.css'\nimport * as d3 from \"d3\";\n\n/**\n* BoxPlot is the entity we use to calculate and draw a boxplot from data given as props\n*/\nclass BoxPlot extends Component {\n\n\tcomponentDidUpdate(prevProps){\n\t\t// draw a chart if the variable information has been loaded via api-call\n\t\tif (this.props.hasLoaded && !prevProps.hasLoaded)\n\t\t\t{\n\t\t\t\tthis.drawChart();\n\t\t\t}\n\t}\n\n\t/**\n\t * Returns the values stored in a this.props.objects canton/hospital\n\t * @param  {Canton || Hospital Object} item The object to extract the values from\n\t * @return {int || float} The selected entry in the item.values object\n\t */\n\treturnData = (item) => {\n\t\tlet varName = this.props.selectedVariable.name;\n\t\tlet values = item.attributes[varName];\n\t\tlet data = (values[this.props.year]);\n\n\t\treturn {v: data, g: \"box1\", t: item.name};\n\t}\n\n\t/**\n\t * Returns an Array where all defined values for given year are stored\n\t * This needed to sort the values and draw the boxplot\n\t * @return {array} dataArray\n\t */\n\tmakeDataArray = () => {\n\t\t// sort out undefined values for given year\n\t\tlet filteredArr = this.props.objects.filter((obj) => {\n\t\t\treturn (this.returnData(obj) !== undefined && obj.name !== \"Ganze Schweiz\");\n\t\t});\n\n\t\tconsole.log(filteredArr);\n\n\t\treturn filteredArr.map((item) => this.returnData(item));\n\t}\n\n\t/**\n\t * Draws a BoxPlot\n\t */\n\tdrawChart() {\n\t\td3.select(\"#boxplot svg\").remove();\n\n\t\tlet data = this.makeDataArray();\n\n\t\tlet chart = exploding_boxplot(data,\n            {y: \"v\", group: \"g\", color: \"g\", label: \"t\"});\n\n\t\t//call chart on a div\n\t\tchart(\"#boxplot\");\n\n\t\t//move the boxplot a bit, such that the scale is visible even for big numbers\n\t\td3.selectAll(\"#boxplot svg > g\")\n\t\t\t.attr(\"transform\", \"translate(100,40)\");\n\t\t//make the svg a bit bigger\n\t\td3.selectAll(\"#boxplot svg\")\n\t\t\t.attr(\"height\", \"570\");\n\t}\n\n\trender() {\n\t\treturn (\n        \t<div id=\"boxplot\"></div>\n        )\n\t}\n}\n\nexport default BoxPlot;\n"]},"metadata":{},"sourceType":"module"}