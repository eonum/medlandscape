{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap/HospitalMap.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet';\nimport { withTranslation } from 'react-i18next';\nimport { numberFormat, calculateCircleColor } from './../../../utils.mjs';\n/*\n* Component to display the different hosptials on our map. Also displays the selected\n* HosptialVariable in context with our selected Hospitals on to our map\n*/\n\nvar HospitalMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HospitalMap, _Component);\n\n  function HospitalMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HospitalMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HospitalMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.getNormedRadius = function (item) {\n      if (_this.props.maxAndMin === 0) {\n        return 7;\n      } else {\n        var max = _this.props.maxAndMin.max;\n        var min = _this.props.maxAndMin.min; //const mean = this.props.maxAndMin.mean;\n        //const std = this.props.maxAndMin.std;\n        //const standardVal = ((this.props.returnData(item)-mean)/std);\n\n        var data = _this.props.returnData(item);\n\n        var biggestRadius = 50;\n        var a = (data + Math.abs(min)) / (max + Math.abs(min)) * Math.pow(biggestRadius, 2) * Math.PI;\n        var radius = Math.round(Math.sqrt(a / Math.PI));\n        return radius <= 7 ? 7 : radius;\n      }\n    };\n\n    _this.setNewStyle = function (e) {\n      e.target.setStyle({\n        weight: 3,\n        fillColor: \"#1996fa\",\n        color: \"#1996fa\"\n      });\n    };\n\n    _this.onMouseOut = function (item, e) {\n      if (!e.target.isPopupOpen()) _this.resetStyle(item, e);\n    };\n\n    _this.resetStyle = function (item, e) {\n      var oldColor = calculateCircleColor(item, _this.props.year);\n      e.target.setStyle({\n        weight: 2,\n        color: oldColor,\n        fillColor: oldColor\n      });\n    };\n\n    _this.onClick = function (e) {\n      _this.setNewStyle(e);\n\n      e.target.closeTooltip();\n    };\n\n    return _this;\n  }\n\n  _createClass(HospitalMap, [{\n    key: \"render\",\n\n    /**\n     * Creates circles to represent hospitals on a Map\n    * Adds popup an tooltip with hospital information to each circle\n    * @return {JSX}\n     */\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          data = _this$props.data,\n          selectedVariable = _this$props.selectedVariable,\n          returnData = _this$props.returnData,\n          year = _this$props.year;\n      return React.createElement(LayerGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.props.data.map(function (item) {\n        return React.createElement(CircleMarker, {\n          key: data.indexOf(item),\n          center: {\n            lon: item.longitude,\n            lat: item.latitude\n          },\n          color: calculateCircleColor(item, year),\n          weight: \"2\" // defining how big the outline of circle is\n          ,\n          opacity: \"1\",\n          fillColor: calculateCircleColor(item, year),\n          fillOpacity: \"0.7\",\n          radius: _this2.getNormedRadius(item) // norming function is here\n          ,\n          onMouseOver: _this2.setNewStyle.bind(_this2),\n          onMouseOut: _this2.onMouseOut.bind(_this2, item),\n          onClick: _this2.onClick.bind(_this2),\n          onPopupClose: _this2.resetStyle.bind(_this2, item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          sticky: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, item.name), React.createElement(Popup, {\n          maxWidth: \"250\",\n          closeButton: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, React.createElement(\"table\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"tbody\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, t(\"popup.hospital\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, item.name)), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, t(\"popup.address\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, React.createElement(\"dd\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, item.street, \",\"), item.city)), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, selectedVariable.text, \":\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, numberFormat(returnData(item))))))));\n      }));\n    }\n  }]);\n\n  return HospitalMap;\n}(Component);\n/**\n * PropTypes:\n * t: used to translate\n * data: Passes the Data from the corresponding selections\n * selectedVarialbe: The Variable that has been selected in the Controlpanel\n * returnData: returns the selected data\n * year: The year picked in the Slider componentToRender\n */\n\n\nHospitalMap.propTypes = {\n  t: PropTypes.string.isRequired,\n  data: PropTypes.func.isRequired,\n  selectedVariable: PropTypes.object.isRequired,\n  returnData: PropTypes.func.isRequired,\n  year: PropTypes.func.isRequired\n};\nvar LocalizedHospitalMap = withTranslation()(HospitalMap);\nexport default LocalizedHospitalMap;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap/HospitalMap.js"],"names":["React","Component","PropTypes","CircleMarker","Popup","LayerGroup","Tooltip","withTranslation","numberFormat","calculateCircleColor","HospitalMap","getNormedRadius","item","props","maxAndMin","max","min","data","returnData","biggestRadius","a","Math","abs","pow","PI","radius","round","sqrt","setNewStyle","e","target","setStyle","weight","fillColor","color","onMouseOut","isPopupOpen","resetStyle","oldColor","year","onClick","closeTooltip","t","selectedVariable","map","indexOf","lon","longitude","lat","latitude","bind","name","street","city","text","propTypes","string","isRequired","func","object","LocalizedHospitalMap"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,EAAuBC,KAAvB,EAA8BC,UAA9B,EAA0CC,OAA1C,QAAyD,eAAzD;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,sBAAnD;AAEA;;;;;IAOMC,W;;;;;;;;;;;;;;;;;;UASLC,e,GAAkB,UAACC,IAAD,EAAU;AAC3B,UAAI,MAAKC,KAAL,CAAWC,SAAX,KAAyB,CAA7B,EAAgC;AAC/B,eAAO,CAAP;AACA,OAFD,MAEO;AACN,YAAMC,GAAG,GAAG,MAAKF,KAAL,CAAWC,SAAX,CAAqBC,GAAjC;AACA,YAAMC,GAAG,GAAG,MAAKH,KAAL,CAAWC,SAAX,CAAqBE,GAAjC,CAFM,CAGN;AACA;AACA;;AACA,YAAMC,IAAI,GAAG,MAAKJ,KAAL,CAAWK,UAAX,CAAsBN,IAAtB,CAAb;;AACA,YAAMO,aAAa,GAAG,EAAtB;AAEA,YAAMC,CAAC,GAAI,CAACH,IAAI,GAAGI,IAAI,CAACC,GAAL,CAASN,GAAT,CAAR,KAA0BD,GAAG,GAAGM,IAAI,CAACC,GAAL,CAASN,GAAT,CAAhC,CAAD,GAAmDK,IAAI,CAACE,GAAL,CAASJ,aAAT,EAAwB,CAAxB,CAAnD,GAAgFE,IAAI,CAACG,EAA/F;AACA,YAAIC,MAAM,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACM,IAAL,CAAUP,CAAC,GAAGC,IAAI,CAACG,EAAnB,CAAX,CAAb;AAEA,eAAQC,MAAM,IAAI,CAAX,GAAgB,CAAhB,GAAoBA,MAA3B;AACA;AACD,K;;UAMDG,W,GAAc,UAACC,CAAD,EAAO;AACpBA,MAAAA,CAAC,CAACC,MAAF,CAASC,QAAT,CAAkB;AACjBC,QAAAA,MAAM,EAAE,CADS;AAEjBC,QAAAA,SAAS,EAAE,SAFM;AAGjBC,QAAAA,KAAK,EAAE;AAHU,OAAlB;AAKA,K;;UAMDC,U,GAAa,UAACvB,IAAD,EAAOiB,CAAP,EAAa;AACzB,UAAI,CAACA,CAAC,CAACC,MAAF,CAASM,WAAT,EAAL,EACC,MAAKC,UAAL,CAAgBzB,IAAhB,EAAsBiB,CAAtB;AACD,K;;UAMDQ,U,GAAa,UAACzB,IAAD,EAAOiB,CAAP,EAAa;AACzB,UAAIS,QAAQ,GAAG7B,oBAAoB,CAACG,IAAD,EAAO,MAAKC,KAAL,CAAW0B,IAAlB,CAAnC;AACAV,MAAAA,CAAC,CAACC,MAAF,CAASC,QAAT,CAAkB;AACjBC,QAAAA,MAAM,EAAE,CADS;AAEjBE,QAAAA,KAAK,EAAEI,QAFU;AAGjBL,QAAAA,SAAS,EAAEK;AAHM,OAAlB;AAKA,K;;UAMDE,O,GAAU,UAACX,CAAD,EAAO;AAChB,YAAKD,WAAL,CAAiBC,CAAjB;;AACAA,MAAAA,CAAC,CAACC,MAAF,CAASW,YAAT;AACA,K;;;;;;;;AAEE;;;;;6BAKM;AAAA;;AAAA,wBAC0C,KAAK5B,KAD/C;AAAA,UACD6B,CADC,eACDA,CADC;AAAA,UACCzB,IADD,eACCA,IADD;AAAA,UACM0B,gBADN,eACMA,gBADN;AAAA,UACuBzB,UADvB,eACuBA,UADvB;AAAA,UACkCqB,IADlC,eACkCA,IADlC;AAER,aACC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,KAAK1B,KAAL,CAAWI,IAAX,CAAgB2B,GAAhB,CAAoB,UAAChC,IAAD;AAAA,eACX,oBAAC,YAAD;AACC,UAAA,GAAG,EAAIK,IAAI,CAAC4B,OAAL,CAAajC,IAAb,CADR;AAED,UAAA,MAAM,EAAE;AAACkC,YAAAA,GAAG,EAAElC,IAAI,CAACmC,SAAX;AAAsBC,YAAAA,GAAG,EAAEpC,IAAI,CAACqC;AAAhC,WAFP;AAGP,UAAA,KAAK,EAAGxC,oBAAoB,CAACG,IAAD,EAAO2B,IAAP,CAHrB;AAIP,UAAA,MAAM,EAAG,GAJF,CAIM;AAJN;AAKP,UAAA,OAAO,EAAG,GALH;AAMD,UAAA,SAAS,EAAI9B,oBAAoB,CAACG,IAAD,EAAO2B,IAAP,CANhC;AAOP,UAAA,WAAW,EAAG,KAPP;AAQD,UAAA,MAAM,EAAE,MAAI,CAAC5B,eAAL,CAAqBC,IAArB,CARP,CAQmC;AARnC;AASP,UAAA,WAAW,EAAI,MAAI,CAACgB,WAAL,CAAiBsB,IAAjB,CAAsB,MAAtB,CATR;AAUP,UAAA,UAAU,EAAI,MAAI,CAACf,UAAL,CAAgBe,IAAhB,CAAqB,MAArB,EAA2BtC,IAA3B,CAVP;AAWP,UAAA,OAAO,EAAI,MAAI,CAAC4B,OAAL,CAAaU,IAAb,CAAkB,MAAlB,CAXJ;AAYP,UAAA,YAAY,EAAI,MAAI,CAACb,UAAL,CAAgBa,IAAhB,CAAqB,MAArB,EAA2BtC,IAA3B,CAZT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAcD,oBAAC,OAAD;AACL,UAAA,MAAM,EAAI,IADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEEA,IAAI,CAACuC,IAFP,CAdC,EAkBP,oBAAC,KAAD;AACC,UAAA,QAAQ,EAAG,KADZ;AAEC,UAAA,WAAW,EAAI,KAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKT,CAAC,CAAC,gBAAD,CAAN,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK9B,IAAI,CAACuC,IAAV,CAFD,CADD,EAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKT,CAAC,CAAC,eAAD,CAAN,CADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK9B,IAAI,CAACwC,MAAV,MAAJ,EAA4BxC,IAAI,CAACyC,IAAjC,CAFD,CALD,EASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKV,gBAAgB,CAACW,IAAtB,MADD,EAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK9C,YAAY,CAACU,UAAU,CAACN,IAAD,CAAX,CAAjB,CAFD,CATD,CADD,CAJD,CAlBO,CADW;AAAA,OAApB,CAFF,CADD;AAgDA;;;;EA9HwBX,S;AAkI1B;;;;;;;;;;AAUAS,WAAW,CAAC6C,SAAZ,GAAwB;AACvBb,EAAAA,CAAC,EAAExC,SAAS,CAACsD,MAAV,CAAiBC,UADG;AAEvBxC,EAAAA,IAAI,EAAEf,SAAS,CAACwD,IAAV,CAAeD,UAFE;AAGvBd,EAAAA,gBAAgB,EAAEzC,SAAS,CAACyD,MAAV,CAAiBF,UAHZ;AAIvBvC,EAAAA,UAAU,EAAEhB,SAAS,CAACwD,IAAV,CAAeD,UAJJ;AAKvBlB,EAAAA,IAAI,EAAErC,SAAS,CAACwD,IAAV,CAAeD;AALE,CAAxB;AAQA,IAAMG,oBAAoB,GAAGrD,eAAe,GAAGG,WAAH,CAA5C;AACA,eAAekD,oBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet'\nimport { withTranslation } from 'react-i18next';\nimport { numberFormat, calculateCircleColor } from './../../../utils.mjs';\n\n/*\n* Component to display the different hosptials on our map. Also displays the selected\n* HosptialVariable in context with our selected Hospitals on to our map\n*/\n\n\n\nclass HospitalMap extends Component {\n\n\n\n    /**\n     * Computes the Radius for a hospital point.\n     * @param  {Hospital Object} item The hospital\n     * @return {int} size of the radius\n     */\n\tgetNormedRadius = (item) => {\n\t\tif (this.props.maxAndMin === 0) {\n\t\t\treturn 7;\n\t\t} else {\n\t\t\tconst max = this.props.maxAndMin.max;\n\t\t\tconst min = this.props.maxAndMin.min;\n\t\t\t//const mean = this.props.maxAndMin.mean;\n\t\t\t//const std = this.props.maxAndMin.std;\n\t\t\t//const standardVal = ((this.props.returnData(item)-mean)/std);\n\t\t\tconst data = this.props.returnData(item);\n\t\t\tconst biggestRadius = 50;\n\n\t\t\tconst a = ((data + Math.abs(min)) / (max + Math.abs(min))) * Math.pow(biggestRadius, 2) * Math.PI;\n\t\t\tlet radius = Math.round(Math.sqrt(a / Math.PI));\n\n\t\t\treturn (radius <= 7) ? 7 : radius;\n\t\t}\n\t}\n\n\t/**\n\t* Changes hospital style if you hover on a hospital with your mouse\n\t* @param {Object} e the event\n\t*/\n\tsetNewStyle = (e) => {\n\t\te.target.setStyle({\n\t\t\tweight: 3,\n\t\t\tfillColor: \"#1996fa\",\n\t\t\tcolor: \"#1996fa\"\n\t\t});\n\t}\n\n\t/**\n\t* Set back hospital style if you hover off a hospital with your mouse\n\t* @param {Object} e the event\n\t*/\n\tonMouseOut = (item, e) => {\n\t\tif (!e.target.isPopupOpen())\n\t\t\tthis.resetStyle(item, e);\n\t}\n\n\t/**\n\t* Set back hospital style\n\t* @param {Object} e the event\n\t*/\n\tresetStyle = (item, e) => {\n\t\tlet oldColor = calculateCircleColor(item, this.props.year);\n\t\te.target.setStyle({\n\t\t\tweight: 2,\n\t\t\tcolor: oldColor,\n\t\t\tfillColor: oldColor,\n\t\t});\n\t}\n\n\t/**\n\t* Define behaviour of click on hospital\n\t* @param {Object} e the event\n\t*/\n\tonClick = (e) => {\n\t\tthis.setNewStyle(e);\n\t\te.target.closeTooltip();\n\t}\n\n    /**\n     * Creates circles to represent hospitals on a Map\n\t * Adds popup an tooltip with hospital information to each circle\n\t * @return {JSX}\n     */\n\trender() {\n\t\tconst {t,data,selectedVariable,returnData,year} = this.props;\n\t\treturn (\n\t\t\t<LayerGroup>\n\t\t\t\t{\n\t\t\t\t\tthis.props.data.map((item) => (\n          \t\t\t\t<CircleMarker\n          \t\t\t\t\tkey = {data.indexOf(item)}\n        \t\t\t\t\tcenter={{lon: item.longitude, lat: item.latitude}}\n\t\t\t\t\t\t\tcolor= {calculateCircleColor(item, year)}\n\t\t\t\t\t\t\tweight = \"2\" // defining how big the outline of circle is\n\t\t\t\t\t\t\topacity = \"1\"\n        \t\t\t\t\tfillColor = {calculateCircleColor(item, year)}\n\t\t\t\t\t\t\tfillOpacity = \"0.7\"\n        \t\t\t\t\tradius={this.getNormedRadius(item)} // norming function is here\n\t\t\t\t\t\t\tonMouseOver = {this.setNewStyle.bind(this)}\n\t\t\t\t\t\t\tonMouseOut = {this.onMouseOut.bind(this, item)}\n\t\t\t\t\t\t\tonClick = {this.onClick.bind(this)}\n\t\t\t\t\t\t\tonPopupClose = {this.resetStyle.bind(this, item)}\n        \t\t\t\t>\n        \t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\tsticky = {true}>\n        \t\t\t\t\t\t{item.name}\n        \t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t<Popup\n\t\t\t\t\t\t\t\tmaxWidth = \"250\"\n\t\t\t\t\t\t\t\tcloseButton = {false}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{t(\"popup.hospital\")}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{item.name}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{t(\"popup.address\")}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td><dd>{item.street},</dd>{item.city}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{selectedVariable.text}:</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{numberFormat(returnData(item))}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</Popup>\n        \t\t\t\t</CircleMarker>\n      \t             ))\n\t\t\t\t}\n\t\t\t</LayerGroup>\n\t\t)\n\t}\n}\n\n\n/**\n * PropTypes:\n * t: used to translate\n * data: Passes the Data from the corresponding selections\n * selectedVarialbe: The Variable that has been selected in the Controlpanel\n * returnData: returns the selected data\n * year: The year picked in the Slider componentToRender\n */\n\n\nHospitalMap.propTypes = {\n\tt: PropTypes.string.isRequired,\n\tdata: PropTypes.func.isRequired,\n\tselectedVariable: PropTypes.object.isRequired,\n\treturnData: PropTypes.func.isRequired,\n\tyear: PropTypes.func.isRequired,\n\n}\nconst LocalizedHospitalMap = withTranslation()(HospitalMap);\nexport default LocalizedHospitalMap;\n"]},"metadata":{},"sourceType":"module"}