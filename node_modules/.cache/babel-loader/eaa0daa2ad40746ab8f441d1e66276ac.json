{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport * as d3 from \"d3\";\nimport { withTranslation } from 'react-i18next';\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\n\nvar InteractiveTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(InteractiveTable, _Component);\n\n  /**\n   * constructor - initializes the component by calling the superclass's\n   *  constructor and setting the inital state\n   *\n   * @param  {object} props handed over by parent component\n   */\n  function InteractiveTable(_props) {\n    var _this;\n\n    _classCallCheck(this, InteractiveTable);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InteractiveTable).call(this, _props));\n\n    _this.updateAllDropdowns = function (newProps) {\n      var props = _this.props;\n\n      if (newProps) {\n        props = newProps;\n      }\n\n      var newHospitalDropdowns = _this.state.hospitalDropdowns;\n\n      for (var i = 0; i < _this.state.hospitalDropdowns.length; i++) {\n        newHospitalDropdowns = update(newHospitalDropdowns, _defineProperty({}, i, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  listItems: {\n                    $set: props.hospitals\n                  }\n                }\n              }\n            }\n          }\n        }));\n      }\n\n      var newVariableDropdowns = _this.state.variableDropdowns;\n\n      for (var _i = 0; _i < _this.state.variableDropdowns.length; _i++) {\n        newVariableDropdowns = update(newVariableDropdowns, _defineProperty({}, _i, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  listItems: {\n                    $set: props.variables\n                  }\n                }\n              }\n            }\n          }\n        }));\n      }\n\n      _this.setState({\n        hospitalDropdowns: newHospitalDropdowns,\n        variableDropdowns: newVariableDropdowns,\n        dropdownsNeedUpdate: false,\n        dropdownsForceUpdate: false\n      });\n    };\n\n    _this.addHospital = function () {\n      var nextHospId = _this.state.nextHospitalId + \"\";\n\n      var hosp = _this.createNewHospital(nextHospId); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n\n      var hosp_id_parts = nextHospId.split(\"-\");\n      nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n      var newSelectedHospitals = [].concat(_toConsumableArray(_this.state.selectedHospitals), [hosp[0]]);\n      var newDropdowns = [].concat(_toConsumableArray(_this.state.hospitalDropdowns), [hosp[1]]);\n\n      _this.setState({\n        hospitalDropdowns: newDropdowns,\n        selectedHospitals: newSelectedHospitals,\n        nextHospitalId: nextHospId\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.addAllHospitals = function () {\n      var hospDropdowns = [];\n      var selectedHosps = [];\n      var nextHospId = _this.state.nextHospitalId + \"\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _this.props.hospitals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var hosp = _step.value;\n\n          var data = _this.createNewHospital(nextHospId, hosp);\n\n          selectedHosps.push(hosp);\n          hospDropdowns.push(data[1]); // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n\n          var hosp_id_parts = nextHospId.split(\"-\");\n          nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      _this.setState({\n        hospitalDropdowns: hospDropdowns,\n        selectedHospitals: selectedHosps,\n        nextHospitalId: nextHospId\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.createNewHospital = function (id, newSelectedHospital) {\n      var newDropdown = React.createElement(\"div\", {\n        className: \"hospitalDropdown selectionElement\",\n        key: id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: id,\n        listItems: _this.props.hospitals,\n        selectItem: _this.selectHospital,\n        selectedItem: newSelectedHospital,\n        defaultText: _this.props.t('dropDowns.hospitalFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnSubtractDropDown\",\n        onClick: function onClick() {\n          return _this.subtractHospital(id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"X\"));\n      return [newSelectedHospital, newDropdown];\n    };\n\n    _this.subtractHospital = function (senderId) {\n      // findIndex does the same as indexOf for arrays, but with a function as input\n      var index = _this.state.hospitalDropdowns.findIndex(function (item) {\n        return item.props.children[0].props.id === senderId;\n      });\n\n      var newSelectedHospitals = _toConsumableArray(_this.state.selectedHospitals); // create a copy of the arrays (React state immutable)\n\n\n      var newHospitalDropDowns = _toConsumableArray(_this.state.hospitalDropdowns); // remove the hospital\n\n\n      newSelectedHospitals.splice(index, 1);\n      newHospitalDropDowns.splice(index, 1);\n\n      _this.setState({\n        selectedHospitals: newSelectedHospitals,\n        hospitalDropdowns: newHospitalDropDowns\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.selectHospital = function (item, senderId) {\n      // findIndex does the same as indexOf for arrays, but with a function as input\n      var index = _this.state.hospitalDropdowns.findIndex(function (item) {\n        return item.props.children[0].props.id === senderId;\n      });\n\n      _this.setState({\n        // selectedHospitals : newList\n        selectedHospitals: update(_this.state.selectedHospitals, _defineProperty({}, index, {\n          $set: item\n        })),\n        hospitalDropdowns: update(_this.state.hospitalDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  selectedItem: {\n                    $set: item\n                  }\n                }\n              }\n            }\n          }\n        }))\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.addVariable = function () {\n      var newVariables = [];\n      var newSelectedVariables = [];\n      var newSelectedYears = [];\n      var nextVariableId = _this.state.nextVariableId + \"\";\n      var newDrp = React.createElement(\"div\", {\n        className: \"variableDropdown selectionElement\",\n        key: _this.state.nextVariableId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: _this.state.nextVariableId,\n        listItems: _this.props.variables,\n        selectItem: _this.selectVariable,\n        defaultText: _this.props.t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnSubtractDropDown\",\n        onClick: function onClick() {\n          return _this.subtractVariable(nextVariableId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"X\"), React.createElement(\"button\", {\n        className: \"btnSortAsc\",\n        onClick: function onClick() {\n          return _this.sortHospitals(nextVariableId, 'asc');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, _this.props.t('tableView.sortAsc')), React.createElement(\"button\", {\n        className: \"btnSortDesc\",\n        onClick: function onClick() {\n          return _this.sortHospitals(nextVariableId, 'desc');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, _this.props.t('tableView.sortDesc')), React.createElement(\"div\", {\n        className: \"yearDropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(DropdownMenu, {\n        id: _this.state.nextYearId,\n        listItems: [],\n        selectItem: _this.selectYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }))); // splits the next id ('var-x') into 'var' and 'x' and increments 'x' for vars and years\n\n      var id_parts = _this.state.nextVariableId.split(\"-\");\n\n      var nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n      id_parts = _this.state.nextYearId.split(\"-\");\n      var nextYearIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n      newVariables = [].concat(_toConsumableArray(_this.state.variableDropdowns), [newDrp]);\n      newSelectedVariables = [].concat(_toConsumableArray(_this.state.selectedVariables), [{}]);\n      newSelectedYears = [].concat(_toConsumableArray(_this.state.selectedYears), [{}]);\n\n      _this.setState({\n        nextVariableId: nextVariableIdInc,\n        nextYearId: nextYearIdInc,\n        selectedYears: newSelectedYears,\n        variableDropdowns: newVariables,\n        selectedVariables: newSelectedVariables\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.selectionChanged = function () {\n      _this.setState({\n        selectionChanged: true\n      });\n\n      var yearDropdowns = document.getElementsByClassName('yearDropdown');\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = yearDropdowns[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var d = _step2.value;\n          d.classList.remove('showYearDropdown');\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    };\n\n    _this.selectYear = function (item, senderId) {\n      // findIndex does the same as indexOf for arrays, but with a function as input\n      var index = _this.state.variableDropdowns.findIndex(function (item) {\n        return item.props.children[4].props.children.props.id === senderId;\n      });\n\n      var selectedYear;\n\n      if (_this.state.selectedVariables[index].is_time_series) {\n        selectedYear = Number(item.name);\n      } else {\n        selectedYear = item.name;\n      }\n\n      var updatedYears = update(_this.state.selectedYears, _defineProperty({}, index, {\n        $set: selectedYear\n      }));\n      var updatedDropdowns = update(_this.state.variableDropdowns, _defineProperty({}, index, {\n        props: {\n          children: {\n            4: {\n              props: {\n                children: {\n                  props: {\n                    selectedItem: {\n                      $set: item\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }));\n\n      _this.setState({\n        selectedYears: updatedYears,\n        variableDropdowns: updatedDropdowns\n      }, function () {\n        _this.props.retriggerTableGeneration();\n      });\n    };\n\n    _this.subtractVariable = function (senderId) {\n      // findIndex does the same as indexOf for arrays, but with a function as input\n      var index = _this.state.variableDropdowns.findIndex(function (item) {\n        return item.props.children[0].props.id === senderId;\n      });\n\n      var newSelectedVariables = _toConsumableArray(_this.state.selectedVariables); //create new copies of the arrays\n\n\n      var newVariableDropdowns = _toConsumableArray(_this.state.variableDropdowns);\n\n      newSelectedVariables.splice(index, 1);\n      newVariableDropdowns.splice(index, 1);\n\n      _this.setState({\n        selectedVariables: newSelectedVariables,\n        variableDropdowns: newVariableDropdowns\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.canTableBeSorted = function (shouldCheckForLoadedData) {\n      var shouldGenerate = true; // check if in each hospital dropdown something was selected\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = _this.state.selectedHospitals[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var hosp = _step3.value;\n\n          if (!hosp || Object.keys(hosp).length === 0 && hosp.constructor === Object) {\n            shouldGenerate = false;\n            break;\n          }\n        } // check the same for variables\n\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      if (shouldGenerate) {\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = _this.state.selectedVariables[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var variable = _step4.value;\n\n            if (!variable || Object.keys(variable).length === 0 && variable.constructor === Object) {\n              shouldGenerate = false;\n              break;\n            }\n\n            if (shouldCheckForLoadedData) {\n              // also check if for the selected variables the data was fetched\n              if (typeof _this.props.hospitals[0].attributes[variable.name] === 'undefined') {\n                shouldGenerate = false;\n                break;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n      }\n\n      if (!shouldGenerate) {\n        window.alert(_this.props.t('tableView.missingData'));\n      }\n\n      return shouldGenerate;\n    };\n\n    _this.sortHospitals = function (senderId, order) {\n      // first get the whole variable object using the senderId\n      // findIndex does the same as indexOf for arrays, but with a function as input\n      var senderIndex = _this.state.variableDropdowns.findIndex(function (item) {\n        return item.props.children[0].props.id === senderId;\n      });\n\n      var variable = _this.state.selectedVariables[senderIndex];\n      var year = _this.state.selectedYears[senderIndex]; // then create an array containing arrays of length 2 that contain the\n      // index of the selectedHospital and its value on the variable\n\n      var selectedHospitals = _this.state.selectedHospitals;\n      var referenceArr = [];\n\n      if (_this.canTableBeSorted(true)) {\n        var _loop = function _loop(i) {\n          // find the according hospital object from the hospitals array\n          var currentHosp = _this.props.hospitals.find(function (hosp) {\n            return hosp.name === selectedHospitals[i].name;\n          }); // const latestYear = Object.keys(currentHosp.attributes[variable.name])\n          //     .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n\n\n          var attributes = currentHosp.attributes[variable.name];\n          var value = '';\n\n          if (typeof attributes[year] !== 'undefined') {\n            value = attributes[year];\n          }\n\n          referenceArr.push([i, value]);\n        };\n\n        for (var i = 0; i < selectedHospitals.length; i++) {\n          _loop(i);\n        } // use the d3 sorting functions to sort referenceArr\n\n\n        if (order === \"asc\") referenceArr.sort(function (a, b) {\n          return d3.ascending(a[1], b[1]);\n        });else referenceArr.sort(function (a, b) {\n          return d3.descending(a[1], b[1]);\n        }); // according to the indices in the referenceArr, fill new sorted arrays\n        // for dropdowns and selected hospitals\n\n        var newHospitalDropdowns = [];\n        var newSelectedHospitals = [];\n\n        for (var i = 0; i < referenceArr.length; i++) {\n          var index = referenceArr[i][0];\n          newSelectedHospitals.push(selectedHospitals[index]);\n          newHospitalDropdowns.push(_this.state.hospitalDropdowns[index]);\n        } // then set the state\n\n\n        _this.setState({\n          hospitalDropdowns: newHospitalDropdowns,\n          selectedHospitals: newSelectedHospitals\n        });\n\n        _this.props.retriggerTableGeneration();\n      }\n    };\n\n    _this.selectVariable = function (item, senderId) {\n      // findIndex does the same as indexOf for arrays, but with a function as input\n      var index = _this.state.variableDropdowns.findIndex(function (item) {\n        return item.props.children[0].props.id === senderId;\n      });\n\n      _this.setState({\n        selectedVariables: update(_this.state.selectedVariables, _defineProperty({}, index, {\n          $set: item\n        })),\n        variableDropdowns: update(_this.state.variableDropdowns, _defineProperty({}, index, {\n          props: {\n            children: {\n              0: {\n                props: {\n                  selectedItem: {\n                    $set: item\n                  }\n                }\n              }\n            }\n          }\n        }))\n      });\n\n      _this.selectionChanged();\n    };\n\n    _this.submitTableData = function (data) {\n      var _this$state = _this.state,\n          selectedVariables = _this$state.selectedVariables,\n          selectedHospitals = _this$state.selectedHospitals,\n          selectedYears = _this$state.selectedYears;\n      var namedData = [];\n      var headers = [];\n      headers.push(\"Variable\");\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = selectedVariables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var v = _step5.value;\n          headers.push(v.text);\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      namedData.push(headers);\n      var years = [];\n      years.push(\"Year\");\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = selectedYears[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var y = _step6.value;\n          years.push(y);\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n\n      namedData.push(years);\n\n      for (var i = 0; i < data.length; i++) {\n        var row = [selectedHospitals[i].name].concat(data[i]);\n        namedData.push(row);\n      }\n\n      _this.props.setCSVData(namedData);\n\n      _this.setState({\n        csvData: namedData\n      });\n    };\n\n    _this.dataFetched = function () {\n      if (true) {\n        var updatedDropdowns = _this.state.variableDropdowns;\n        var updatedYears = _this.state.selectedYears;\n\n        for (var i = 0; i < _this.state.variableDropdowns.length; i++) {\n          // let dropdown = this.state.variableDropdowns[i];\n          var selectedVariable = _this.state.selectedVariables[i];\n          var years = new Set();\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n\n          try {\n            var _loop2 = function _loop2() {\n              var selectedHospital = _step7.value;\n\n              var hospital = _this.props.hospitals.find(function (hosp) {\n                return hosp.name === selectedHospital.name;\n              });\n\n              if (selectedVariable.is_time_series) {\n                var _arr = Object.keys(hospital.attributes[selectedVariable.name]);\n\n                for (var _i2 = 0; _i2 < _arr.length; _i2++) {\n                  var year = _arr[_i2];\n                  years.add(year);\n                }\n              } else {\n                years.add(_this.props.t('tableView.noTimeData'));\n              }\n            };\n\n            for (var _iterator7 = _this.state.selectedHospitals[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              _loop2();\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n\n          years = Array.from(years);\n          var selectedYear = years.sort()[years.length - 1];\n          var selectedItem = {\n            name: selectedYear\n          };\n          var yearsForDropdown = [];\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n\n          try {\n            for (var _iterator8 = years[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var year = _step8.value;\n              yearsForDropdown.push({\n                name: year\n              });\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n\n          yearsForDropdown.reverse();\n          updatedYears = update(updatedYears, _defineProperty({}, i, {\n            $set: selectedYear\n          }));\n          updatedDropdowns = update(updatedDropdowns, _defineProperty({}, i, {\n            props: {\n              children: {\n                4: {\n                  props: {\n                    children: {\n                      props: {\n                        listItems: {\n                          $set: yearsForDropdown\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }));\n          updatedDropdowns = update(updatedDropdowns, _defineProperty({}, i, {\n            props: {\n              children: {\n                4: {\n                  props: {\n                    children: {\n                      props: {\n                        selectedItem: {\n                          $set: selectedItem\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }));\n        }\n\n        _this.setState({\n          variableDropdowns: updatedDropdowns,\n          selectedYears: updatedYears\n        }, function () {\n          _this.props.retriggerTableGeneration();\n\n          var yearDropdowns = document.getElementsByClassName('yearDropdown');\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n\n          try {\n            for (var _iterator9 = yearDropdowns[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              var d = _step9.value;\n              d.classList.add('showYearDropdown');\n            }\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n        });\n      }\n    };\n\n    _this.resultTableAcknowledgedChange = function () {\n      _this.setState({\n        selectionChanged: false\n      });\n    };\n\n    _this.state = {\n      nextVariableId: 'var-' + 0,\n      variableDropdowns: [],\n      selectedVariables: [],\n      nextYearId: 'yea-' + 0,\n      selectedYears: [],\n      nextHospitalId: 'hos-' + 0,\n      hospitalDropdowns: [],\n      selectedHospitals: [],\n      dropdownsNeedUpdate: true,\n      csvData: [],\n      previousLanguage: _props.i18n.language,\n      selectionChanged: false\n    };\n    return _this;\n  }\n  /**\n   * componentDidUpdate - updates the dropdowns if needed and checks if the\n   *  language has changed -> if yes, the table is cleared\n   */\n\n\n  _createClass(InteractiveTable, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this2 = this;\n\n      if (this.props.hasLoaded && this.state.dropdownsNeedUpdate) {\n        this.updateAllDropdowns();\n      }\n\n      if (this.state.previousLanguage !== this.props.i18n.language) {\n        this.setState({\n          nextVariableId: 'var-' + 0,\n          variableDropdowns: [],\n          selectedVariables: [],\n          nextHospitalId: 'hos-' + 0,\n          hospitalDropdowns: [],\n          selectedHospitals: [],\n          previousLanguage: this.props.i18n.language,\n          languageDidChange: true\n        }, function () {\n          _this2.addHospital();\n\n          _this2.addVariable();\n        });\n      }\n    }\n    /**\n     * updateAllDropdowns - Fills the dropdown-lists that were present before\n     *  the api request was complete with the correct data. Otherwise they\n     *  would be empty lists.\n     *\n     * @param {Object} newProps if provided, these will be used to update the\n     *  dropdowns instead of this.props\n     */\n\n  }, {\n    key: \"componentWillReceiveProps\",\n\n    /**\n     * componentWillReceiveProps - when the language was changed, the listItems\n     *  of the existing dropdowns need an update to display the correct items\n     */\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.state.languageDidChange) {\n        if (this.props.variables[0].text !== nextProps.variables[0].text) {\n          this.setState({\n            languageDidChange: false\n          });\n          this.updateAllDropdowns(nextProps);\n        }\n      }\n    }\n    /**\n     * componentDidMount - Adds a dropdown on each dimension by default.\n     */\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.addHospital();\n      this.addVariable();\n    }\n    /**\n     * addHospital - Creates a new dropdown menu to select a hospital to\n     *  display, with a new unique id. Then updates the state accordingly.\n     */\n\n  }, {\n    key: \"render\",\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    value: function render() {\n      var _this3 = this;\n\n      var t = this.props.t;\n      return React.createElement(\"div\", {\n        className: \"interactiveTable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 611\n        },\n        __self: this\n      }, React.createElement(VariableSelector, {\n        className: \"variableSelector\",\n        variables: this.props.variables,\n        variableDropdowns: this.state.variableDropdowns,\n        addVariable: this.addVariable,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612\n        },\n        __self: this\n      }), React.createElement(HospitalSelector, {\n        className: \"hospitalSelector\",\n        hospitals: this.props.hospitals,\n        hospitalDropdowns: this.state.hospitalDropdowns,\n        selectedHospitals: this.state.selectedHospitals,\n        addHospital: this.addHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618\n        },\n        __self: this\n      }), React.createElement(ResultTable, {\n        className: \"resultTable\",\n        selectedHospitals: this.state.selectedHospitals,\n        selectedVariables: this.state.selectedVariables,\n        selectedYears: this.state.selectedYears,\n        hospitalData: this.props.hospitals,\n        dataLoaded: this.props.tableDataLoaded,\n        dataGenerated: this.props.tableDataGenerated,\n        submitTableData: this.submitTableData,\n        selectionChanged: this.state.selectionChanged,\n        changeAcknowledged: this.resultTableAcknowledgedChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: \"btnGenerateTable\",\n        onClick: function onClick() {\n          if (_this3.canTableBeSorted(false)) {\n            _this3.props.requestData(_this3.state.selectedVariables, _this3.dataFetched);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, t('tableView.btnCreateTable')), React.createElement(\"button\", {\n        className: \"btnAddAllHospitals\",\n        onClick: function onClick() {\n          return _this3.addAllHospitals();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 645\n        },\n        __self: this\n      }, t('tableView.btnAddAllHospitals')));\n    }\n  }]);\n\n  return InteractiveTable;\n}(Component);\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n * requestData: function that will be called to download the requested data\n * hasLoaded: bool that will be true if the data is loaded\n * retriggerTableGeneration: will cause resultTable to regenerate its table\n *  without resending a request\n * tableDataGenerated: will notify parent that ResultTable has finished\n *  generating the table (called from ResultTable)\n * tableDataLoaded: boolean that is true when the parent finished the request\n *  and false when not (will be set to false again by ResultTable after it\n *  finished table generation)\n */\n\n\nInteractiveTable.propTypes = {\n  variables: PropTypes.array.isRequired,\n  hospitals: PropTypes.array.isRequired,\n  requestData: PropTypes.func.isRequired,\n  hasLoaded: PropTypes.bool.isRequired,\n  retriggerTableGeneration: PropTypes.func.isRequired,\n  tableDataGenerated: PropTypes.func.isRequired,\n  tableDataLoaded: PropTypes.bool.isRequired\n};\nvar LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/InteractiveTable/InteractiveTable.js"],"names":["React","Component","PropTypes","HospitalSelector","VariableSelector","DropdownMenu","ResultTable","update","d3","withTranslation","InteractiveTable","props","updateAllDropdowns","newProps","newHospitalDropdowns","state","hospitalDropdowns","i","length","children","listItems","$set","hospitals","newVariableDropdowns","variableDropdowns","variables","setState","dropdownsNeedUpdate","dropdownsForceUpdate","addHospital","nextHospId","nextHospitalId","hosp","createNewHospital","hosp_id_parts","split","Number","newSelectedHospitals","selectedHospitals","newDropdowns","selectionChanged","addAllHospitals","hospDropdowns","selectedHosps","data","push","id","newSelectedHospital","newDropdown","selectHospital","t","subtractHospital","senderId","index","findIndex","item","newHospitalDropDowns","splice","selectedItem","addVariable","newVariables","newSelectedVariables","newSelectedYears","nextVariableId","newDrp","selectVariable","subtractVariable","sortHospitals","nextYearId","selectYear","id_parts","nextVariableIdInc","nextYearIdInc","selectedVariables","selectedYears","yearDropdowns","document","getElementsByClassName","d","classList","remove","selectedYear","is_time_series","name","updatedYears","updatedDropdowns","retriggerTableGeneration","canTableBeSorted","shouldCheckForLoadedData","shouldGenerate","Object","keys","constructor","variable","attributes","window","alert","order","senderIndex","year","referenceArr","currentHosp","find","value","sort","a","b","ascending","descending","submitTableData","namedData","headers","v","text","years","y","row","concat","setCSVData","csvData","dataFetched","selectedVariable","Set","selectedHospital","hospital","add","Array","from","yearsForDropdown","reverse","resultTableAcknowledgedChange","previousLanguage","i18n","language","hasLoaded","languageDidChange","nextProps","tableDataLoaded","tableDataGenerated","requestData","propTypes","array","isRequired","func","bool","LocalizedInteractiveTable"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './InteractiveTable.css';\nimport HospitalSelector from './HospitalSelector/HospitalSelector.js';\nimport VariableSelector from './VariableSelector/VariableSelector.js';\nimport DropdownMenu from './../DropdownMenu/DropdownMenu.js';\nimport ResultTable from './ResultTable/ResultTable.js';\nimport update from 'immutability-helper';\nimport * as d3 from \"d3\";\nimport { withTranslation } from 'react-i18next';\n\n/**\n * Represents the Table view which can be used to create and display a 2d-table\n *  to compare different hospitals and their values on selected variables\n *\n * The relevant state consists of an array that holds all dropdowns for hospitals\n *  and one that holds all selected items of those dropdowns. Those arrays\n *  exist for variables as well.\n */\nclass InteractiveTable extends Component {\n\n    /**\n     * constructor - initializes the component by calling the superclass's\n     *  constructor and setting the inital state\n     *\n     * @param  {object} props handed over by parent component\n     */\n    constructor(props) {\n        super(props)\n        this.state = {\n\t\t\tnextVariableId : 'var-' + 0,\n\t\t\tvariableDropdowns : [],\n            selectedVariables : [],\n\n            nextYearId : 'yea-' + 0,\n            selectedYears : [],\n\n            nextHospitalId : 'hos-' + 0,\n            hospitalDropdowns : [],\n            selectedHospitals : [],\n\n            dropdownsNeedUpdate : true,\n\t\t\tcsvData : [],\n\n            previousLanguage : props.i18n.language,\n            selectionChanged: false\n        }\n    }\n\n    /**\n     * componentDidUpdate - updates the dropdowns if needed and checks if the\n     *  language has changed -> if yes, the table is cleared\n     */\n    componentDidUpdate() {\n        if ((this.props.hasLoaded && this.state.dropdownsNeedUpdate)) {\n            this.updateAllDropdowns();\n        }\n\n        if (this.state.previousLanguage !== this.props.i18n.language) {\n\n            this.setState({\n                nextVariableId : 'var-' + 0,\n    \t\t\tvariableDropdowns : [],\n                selectedVariables : [],\n\n                nextHospitalId : 'hos-' + 0,\n                hospitalDropdowns : [],\n                selectedHospitals : [],\n\n                previousLanguage: this.props.i18n.language,\n\n                languageDidChange: true\n            }, () => {\n                this.addHospital();\n                this.addVariable();\n            });\n\n        }\n    }\n\n    /**\n     * updateAllDropdowns - Fills the dropdown-lists that were present before\n     *  the api request was complete with the correct data. Otherwise they\n     *  would be empty lists.\n     *\n     * @param {Object} newProps if provided, these will be used to update the\n     *  dropdowns instead of this.props\n     */\n    updateAllDropdowns = (newProps) => {\n        let props = this.props;\n        if (newProps) {\n            props = newProps;\n        }\n\n        let newHospitalDropdowns = this.state.hospitalDropdowns;\n        for (let i = 0; i < this.state.hospitalDropdowns.length; i++) {\n            newHospitalDropdowns = update(newHospitalDropdowns, {[i]: {props: {children: {0: {props: {listItems: {$set: props.hospitals}}}}}}});\n        }\n        let newVariableDropdowns = this.state.variableDropdowns;\n        for (let i = 0; i < this.state.variableDropdowns.length; i++) {\n            newVariableDropdowns = update(newVariableDropdowns, {[i]: {props: {children: {0: {props: {listItems: {$set: props.variables}}}}}}});\n        }\n        this.setState({\n            hospitalDropdowns : newHospitalDropdowns,\n            variableDropdowns : newVariableDropdowns,\n            dropdownsNeedUpdate : false,\n            dropdownsForceUpdate : false\n        });\n    }\n\n    /**\n     * componentWillReceiveProps - when the language was changed, the listItems\n     *  of the existing dropdowns need an update to display the correct items\n     */\n    componentWillReceiveProps(nextProps) {\n        if (this.state.languageDidChange) {\n            if (this.props.variables[0].text !== nextProps.variables[0].text) {\n                this.setState({\n                    languageDidChange : false\n                });\n                this.updateAllDropdowns(nextProps);\n            }\n        }\n    }\n\n\n    /**\n     * componentDidMount - Adds a dropdown on each dimension by default.\n     */\n    componentDidMount() {\n        this.addHospital();\n        this.addVariable();\n    }\n\n    /**\n     * addHospital - Creates a new dropdown menu to select a hospital to\n     *  display, with a new unique id. Then updates the state accordingly.\n     */\n    addHospital = () => {\n        let nextHospId = this.state.nextHospitalId + \"\";\n        let hosp = this.createNewHospital(nextHospId);\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n        let hosp_id_parts = nextHospId.split(\"-\");\n        nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n\n        let newSelectedHospitals = [...this.state.selectedHospitals, hosp[0]];\n        let newDropdowns = [...this.state.hospitalDropdowns, hosp[1]];\n\n        this.setState({\n            hospitalDropdowns : newDropdowns,\n            selectedHospitals : newSelectedHospitals,\n            nextHospitalId : nextHospId\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * addAllHospitals - Adds all hospitals available in this.props.hospitals to\n     *  the table, deleting existing ones.\n     */\n    addAllHospitals = () => {\n        let hospDropdowns = [];\n        let selectedHosps = [];\n\n        let nextHospId = this.state.nextHospitalId + \"\";\n\n        for (let hosp of this.props.hospitals) {\n            let data = this.createNewHospital(nextHospId, hosp);\n\n            selectedHosps.push(hosp);\n            hospDropdowns.push(data[1]);\n\n            // splits the next id ('var-x') into 'var' and 'x' and increments 'x'\n            let hosp_id_parts = nextHospId.split(\"-\");\n            nextHospId = hosp_id_parts[0] + \"-\" + (Number(hosp_id_parts[1]) + 1);\n        }\n\n        this.setState({\n            hospitalDropdowns : hospDropdowns,\n            selectedHospitals : selectedHosps,\n            nextHospitalId : nextHospId\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * createNewHospital - creates a new hospitalDropdown and the according\n     *  selectedVariable which is undefined by default, but can be set using\n     *  the parameter selectedHosp\n     *\n\t * @param {String} id of the new hospitalDropdown \n     * @param {Object} newSelectedHospital the hospital that will be selected by default\n     *\n     * @return {Array} Array containing the selectedHospital variable at index 0\n     *  and the new dropdown at index 1\n     */\n    createNewHospital = (id, newSelectedHospital) => {\n        let newDropdown = (\n            <div className='hospitalDropdown selectionElement' key={id}>\n                <DropdownMenu id={id}\n                    listItems={this.props.hospitals}\n                    selectItem={this.selectHospital}\n                    selectedItem={newSelectedHospital}\n                    defaultText={this.props.t('dropDowns.hospitalFallback')}\n                />\n                <button className=\"btnSubtractDropDown\" onClick={() => this.subtractHospital(id)}>X</button>\n            </div>\n        );\n        return [newSelectedHospital, newDropdown];\n    }\n\n    /**\n     * subtractHospital - Gets called when the remove button is clicked. Removes\n     *  the according dropdown from state.\n     *\n     * @param {String} senderId Id of the dropdown that should be removed\n     */\n    subtractHospital = (senderId) => {\n\t\t// findIndex does the same as indexOf for arrays, but with a function as input\n\t\tlet index = this.state.hospitalDropdowns\n\t\t\t.findIndex((item) => {return item.props.children[0].props.id === senderId});\n\t\t\n\t\tlet newSelectedHospitals = [...this.state.selectedHospitals]; // create a copy of the arrays (React state immutable)\n\t\tlet newHospitalDropDowns = [...this.state.hospitalDropdowns];\n\t\t\n\t\t// remove the hospital\n\t\tnewSelectedHospitals.splice(index,1);\n\t\tnewHospitalDropDowns.splice(index,1);\n\t\t\n        this.setState({\n\t\t\tselectedHospitals: newSelectedHospitals,\n\t\t\thospitalDropdowns: newHospitalDropDowns\n\t\t});\n        this.selectionChanged();\n    }\n\n    /**\n     * selectHospital - Called when a hospital is selected on a dropdown menu.\n     *  It uses the id of the dropdown that called this function to identify it's\n     *  index in the dropdowns array and update its displayed text. The index is\n     *  as well used to identify the according object in the array of selected\n     *  items and update it. Immutabilit-helper is used for that.\n     *\n     * @param {Object} item the selected item\n     * @param {String} senderId Id of the dropdown that selected something\n     */\n    selectHospital = (item, senderId) => {\n\t\t// findIndex does the same as indexOf for arrays, but with a function as input\n\t\tlet index = this.state.hospitalDropdowns\n\t\t\t.findIndex((item) => {return item.props.children[0].props.id === senderId});\n\t\t\n\n        this.setState({\n            // selectedHospitals : newList\n            selectedHospitals: update(this.state.selectedHospitals, {[index]: {$set: item}}),\n            hospitalDropdowns: update(this.state.hospitalDropdowns, {[index]: {props: {children: {0: {props: {selectedItem: {$set: item}}}}}}})\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * addVariable - Creates a new dropdown menu to select a variable to display,\n     *  with a new unique id. Then updates the state accordingly.\n     */\n\taddVariable = () => {\n        let newVariables = [];\n        let newSelectedVariables = [];\n        let newSelectedYears = [];\n\n        let nextVariableId = this.state.nextVariableId + \"\";\n\n        let newDrp = (\n            <div className=\"variableDropdown selectionElement\" key={this.state.nextVariableId}>\n                <DropdownMenu id={this.state.nextVariableId}\n                    listItems={this.props.variables}\n                    selectItem={this.selectVariable}\n                    defaultText={this.props.t('dropDowns.variablesFallback')}\n                />\n                <button className=\"btnSubtractDropDown\" onClick={() => this.subtractVariable(nextVariableId)}>X</button>\n                <button className=\"btnSortAsc\" onClick={() => this.sortHospitals(nextVariableId, 'asc')}>{this.props.t('tableView.sortAsc')}</button>\n                <button className=\"btnSortDesc\" onClick={() => this.sortHospitals(nextVariableId, 'desc')}>{this.props.t('tableView.sortDesc')}</button>\n                <div className=\"yearDropdown\">\n                    <DropdownMenu id={this.state.nextYearId}\n                            listItems={[]}\n                            selectItem={this.selectYear}\n                        />\n                </div>\n            </div>\n        );\n\n        // splits the next id ('var-x') into 'var' and 'x' and increments 'x' for vars and years\n        let id_parts = this.state.nextVariableId.split(\"-\");\n        let nextVariableIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n\n        id_parts = this.state.nextYearId.split(\"-\");\n        let nextYearIdInc = id_parts[0] + \"-\" + (Number(id_parts[1]) + 1);\n\n        newVariables = [...this.state.variableDropdowns, newDrp];\n        newSelectedVariables = [...this.state.selectedVariables, {}];\n        newSelectedYears = [...this.state.selectedYears, {}];\n\n        this.setState({\n            nextVariableId: nextVariableIdInc,\n            nextYearId: nextYearIdInc,\n            selectedYears: newSelectedYears,\n            variableDropdowns : newVariables,\n            selectedVariables : newSelectedVariables\n        });\n        this.selectionChanged();\n    }\n\n    /**\n     * selectionChanged - called when the selected variables or hospitals change.\n     *  This will notify the ResultTable to wipe itself (via props) and wait\n     *  for regeneration.\n     */\n    selectionChanged = () => {\n        this.setState({\n            selectionChanged: true\n        });\n        let yearDropdowns = document.getElementsByClassName('yearDropdown');\n        for(let d of yearDropdowns) {\n            d.classList.remove('showYearDropdown');\n        }\n    }\n\n    /**\n     * selectYear - called when something is selected in a yearDropdown. updates\n     *  the state and retriggers table generation.\n     */\n    selectYear = (item, senderId) => {\n\t\t// findIndex does the same as indexOf for arrays, but with a function as input\n\t\tlet index = this.state.variableDropdowns\n\t\t\t.findIndex((item) => {return item.props.children[4].props.children.props.id === senderId});\n\t\n        let selectedYear;\n        if (this.state.selectedVariables[index].is_time_series) {\n            selectedYear = Number(item.name);\n        } else {\n            selectedYear = item.name;\n        }\n        let updatedYears = update(this.state.selectedYears, {[index]: {$set: selectedYear}});\n        let updatedDropdowns = update(this.state.variableDropdowns, { [index]: {props: {children: {4: {props: {children: {props: {selectedItem: {$set: item}}}}}}}}});\n        this.setState({\n            selectedYears: updatedYears,\n            variableDropdowns: updatedDropdowns\n        }, () => {\n            this.props.retriggerTableGeneration();\n        });\n    }\n\n    /**\n     * subtractVariable - Gets called when the remove button is clicked.\n     *  Removes the according dropdown from state.\n     *\n     * @param {String} senderId Id of the dropdown that should be removed\n     */\n    subtractVariable = (senderId) => {\n\t\t// findIndex does the same as indexOf for arrays, but with a function as input\n\t\tlet index = this.state.variableDropdowns\n\t\t\t.findIndex((item) => {return item.props.children[0].props.id === senderId});\n\n\t\tlet newSelectedVariables = [...this.state.selectedVariables]; //create new copies of the arrays\n\t\tlet newVariableDropdowns = [...this.state.variableDropdowns];\n\t\t\n\t\tnewSelectedVariables.splice(index,1);\n\t\tnewVariableDropdowns.splice(index,1);\n\n        this.setState({\n\t\t\tselectedVariables: newSelectedVariables,\n\t\t\tvariableDropdowns: newVariableDropdowns\n\t\t});\n        this.selectionChanged();\n    }\n\n    /**\n     * canTableBeSorted - checks if in each dropdown something is selected,\n     *  and if the data has been fetched for these selected things.\n     *\n     * @return {bool} true, if everything is selected and the data is loaded,\n     *  false otherwise\n     */\n    canTableBeSorted = (shouldCheckForLoadedData) => {\n        let shouldGenerate = true;\n\n        // check if in each hospital dropdown something was selected\n        for (let hosp of this.state.selectedHospitals) {\n            if (!hosp || (Object.keys(hosp).length === 0 && hosp.constructor === Object)) {\n                shouldGenerate = false;\n                break;\n            }\n        }\n        // check the same for variables\n        if (shouldGenerate) {\n            for (let variable of this.state.selectedVariables) {\n                if (!variable || (Object.keys(variable).length === 0 && variable.constructor === Object)) {\n                    shouldGenerate = false;\n                    break;\n                }\n                if (shouldCheckForLoadedData) {\n                    // also check if for the selected variables the data was fetched\n                    if (typeof(this.props.hospitals[0].attributes[variable.name]) === 'undefined') {\n                        shouldGenerate = false;\n                        break;\n                    }\n                }\n            }\n        }\n        if (!shouldGenerate) {\n            window.alert(this.props.t('tableView.missingData'));\n        }\n\n        return shouldGenerate;\n    }\n\n    /**\n     * sortHospitals - Sorts selectedHospitals and hospitalDropdowns according\n     *  to their value on the variable with senderId.\n     *\n     * @param {String} senderId the id of the variable according to which the\n     *  hospitals should be sorted\n     * @param {String} order either 'asc' for sorting in ascending order or 'desc'\n     *  for sorting in descending order\n     */\n    sortHospitals = (senderId, order) => {\n        // first get the whole variable object using the senderId\n\t\t\n\t\t// findIndex does the same as indexOf for arrays, but with a function as input\n\t\tlet senderIndex = this.state.variableDropdowns\n\t\t\t.findIndex((item) => {return item.props.children[0].props.id === senderId});\n\t\t\n        let variable = this.state.selectedVariables[senderIndex];\n\t\tconst year = this.state.selectedYears[senderIndex];\n\n        // then create an array containing arrays of length 2 that contain the\n        // index of the selectedHospital and its value on the variable\n        let selectedHospitals = this.state.selectedHospitals;\n        let referenceArr = [];\n\n        if (this.canTableBeSorted(true)) {\n            for (let i = 0; i < selectedHospitals.length; i++) {\n\t\t\t\t\n\t\t\t\t// find the according hospital object from the hospitals array\n\t\t\t\tlet currentHosp = this.props.hospitals.find((hosp) => {return hosp.name === selectedHospitals[i].name;});\n\t\t\t\t\n                // const latestYear = Object.keys(currentHosp.attributes[variable.name])\n                //     .sort()[Object.keys(currentHosp.attributes[variable.name]).length -1];\n                \n                const attributes = currentHosp.attributes[variable.name];\n                let value = '';\n                if (typeof attributes[year] !== 'undefined') {\n                    value = attributes[year];\n                }\n                referenceArr.push([i, value]);\n            }\n\t\t\t\n\t\t\t// use the d3 sorting functions to sort referenceArr\n\t\t\tif(order === \"asc\")\n\t\t\t\treferenceArr.sort(function(a, b){ return d3.ascending(a[1], b[1]);});\n\t\t\telse\n\t\t\t\treferenceArr.sort(function(a, b){ return d3.descending(a[1], b[1]);});\n\n            // according to the indices in the referenceArr, fill new sorted arrays\n            // for dropdowns and selected hospitals\n            let newHospitalDropdowns = [];\n            let newSelectedHospitals = [];\n\n            for (let i = 0; i < referenceArr.length; i++) {\n                let index = referenceArr[i][0];\n                newSelectedHospitals.push(selectedHospitals[index]);\n                newHospitalDropdowns.push(this.state.hospitalDropdowns[index]);\n            }\n\n            // then set the state\n            this.setState({\n                hospitalDropdowns : newHospitalDropdowns,\n                selectedHospitals : newSelectedHospitals\n            });\n\n            this.props.retriggerTableGeneration();\n        }\n    }\n\n    /**\n     * selectVariable - Called when a variable is selected on a dropdown menu.\n     *  It uses the id of the dropdown that called this function to identify it's\n     *  index in the dropdowns array and update its displayed text. The index is\n     *  as well used to identify the according object in the array of selected\n     *  items and update it. Immutabilit-helper is used for that.\n     *\n     * @param {Object} item the selected item\n     * @param {String} senderId Id of the dropdown that selected something\n     */\n\tselectVariable = (item, senderId) => {\n\t\t// findIndex does the same as indexOf for arrays, but with a function as input\n\t\tlet index = this.state.variableDropdowns\n\t\t\t.findIndex((item) => {return item.props.children[0].props.id === senderId});\n\n\t\tthis.setState({\n\t\t\tselectedVariables: update(this.state.selectedVariables, {[index]: {$set: item}}),\n\t\t\tvariableDropdowns: update(this.state.variableDropdowns, {[index]: {props: {children: {0: {props: {selectedItem: {$set: item}}}}}}})\n        });\n        this.selectionChanged();\n\t}\n\n    /**\n     * submitTableData - Called when the ResultTable finished generating.\n     * Adds row and column names to the array for CSV export.\n     *\n     * @param {Object} data the generated 2D array\n     */\n    submitTableData = (data) => {\n        const {selectedVariables, selectedHospitals, selectedYears} = this.state;\n\n        let namedData = [];\n\n        let headers = [];\n        headers.push(\"Variable\");\n        for (let v of selectedVariables) {\n            headers.push(v.text);\n        }\n        namedData.push(headers);\n\n        let years = [];\n        years.push(\"Year\");\n        for (let y of selectedYears) {\n            years.push(y);\n        }\n        namedData.push(years);\n\n        for (let i = 0; i < data.length; i++) {\n            let row = [selectedHospitals[i].name].concat(data[i]);\n            namedData.push(row);\n        }\n\n        this.props.setCSVData(namedData);\n\n        this.setState({\n            csvData : namedData\n        });\n    }\n\n    /**\n     * dataFetched - Called when the API-Request is completed. Collects all the\n     *  years for that data exist for all selected hospitals and updates the\n     *  according yearDropdowns\n     */\n    dataFetched = () => {\n        if (true) {\n            let updatedDropdowns = this.state.variableDropdowns;\n            let updatedYears = this.state.selectedYears;\n            for (let i = 0; i < this.state.variableDropdowns.length; i++) {\n                // let dropdown = this.state.variableDropdowns[i];\n                let selectedVariable = this.state.selectedVariables[i];\n                let years = new Set();\n                for (let selectedHospital of this.state.selectedHospitals) {\n                    let hospital = this.props.hospitals.find((hosp) => {return hosp.name === selectedHospital.name;});\n                    if (selectedVariable.is_time_series) {\n                        for (let year of Object.keys(hospital.attributes[selectedVariable.name])){\n                            years.add(year);\n                        }\n                    } else {\n                        years.add(this.props.t('tableView.noTimeData'))\n                    }\n                }\n                years = Array.from(years);\n                const selectedYear = years.sort()[years.length - 1];\n                const selectedItem = { name: selectedYear };\n                let yearsForDropdown = [];\n                for (let year of years) {\n                    yearsForDropdown.push({ name: year});\n                }\n                yearsForDropdown.reverse();\n                updatedYears = update(updatedYears, {[i]: {$set: selectedYear}});\n                updatedDropdowns = update(updatedDropdowns, {[i]: {props: {children: {4: {props: {children: {props: {listItems: {$set: yearsForDropdown}}}}}}}}});\n                updatedDropdowns = update(updatedDropdowns, {[i]: {props: {children: {4: {props: {children: {props: {selectedItem: {$set: selectedItem}}}}}}}}});\n            }\n            this.setState({\n                variableDropdowns: updatedDropdowns,\n                selectedYears: updatedYears\n            }, () => {\n                this.props.retriggerTableGeneration();\n                let yearDropdowns = document.getElementsByClassName('yearDropdown');\n                for (let d of yearDropdowns) {\n                    d.classList.add('showYearDropdown');\n                }\n            });\n        }\n    }\n\n    /**\n     * resultTableAcknowledgedChange - Used by ResultTable to tell the\n     *  InteractiveTable that it wiped the table when the user changed the\n     *  selection of vars or hosps\n     */\n    resultTableAcknowledgedChange = () => {\n        this.setState({\n            selectionChanged: false\n        });\n    }\n\n    /**\n     * render - renders the component to the screen\n     *\n     * @return {JSX}  JSX of the component\n     */\n    render() {\n        const { t } = this.props;\n        return (\n            <div className=\"interactiveTable\">\n                <VariableSelector\n                    className=\"variableSelector\"\n                    variables={this.props.variables}\n                    variableDropdowns={this.state.variableDropdowns}\n\t\t\t\t\taddVariable={this.addVariable}\n                />\n                <HospitalSelector\n                    className=\"hospitalSelector\"\n                    hospitals={this.props.hospitals}\n                    hospitalDropdowns={this.state.hospitalDropdowns}\n                    selectedHospitals={this.state.selectedHospitals}\n                    addHospital={this.addHospital}\n                />\n                <ResultTable\n                    className=\"resultTable\"\n                    selectedHospitals={this.state.selectedHospitals}\n                    selectedVariables={this.state.selectedVariables}\n                    selectedYears={this.state.selectedYears}\n                    hospitalData={this.props.hospitals}\n                    dataLoaded={this.props.tableDataLoaded}\n                    dataGenerated={this.props.tableDataGenerated}\n                    submitTableData={this.submitTableData}\n                    selectionChanged={this.state.selectionChanged}\n                    changeAcknowledged={this.resultTableAcknowledgedChange}\n                />\n                <button\n                    className=\"btnGenerateTable\"\n                    onClick={() => {\n                        if(this.canTableBeSorted(false)) {\n                            this.props.requestData(this.state.selectedVariables, this.dataFetched);\n                        }\n                    }}>{t('tableView.btnCreateTable')}\n                </button>\n                <button\n                    className=\"btnAddAllHospitals\"\n                    onClick={() => this.addAllHospitals()}>{t('tableView.btnAddAllHospitals')}\n                </button>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * PropTypes:\n *\n * variables: list of variables one can choose from\n * hospitals: list of hospitals one can choose from\n * requestData: function that will be called to download the requested data\n * hasLoaded: bool that will be true if the data is loaded\n * retriggerTableGeneration: will cause resultTable to regenerate its table\n *  without resending a request\n * tableDataGenerated: will notify parent that ResultTable has finished\n *  generating the table (called from ResultTable)\n * tableDataLoaded: boolean that is true when the parent finished the request\n *  and false when not (will be set to false again by ResultTable after it\n *  finished table generation)\n */\nInteractiveTable.propTypes = {\n    variables: PropTypes.array.isRequired,\n    hospitals: PropTypes.array.isRequired,\n    requestData: PropTypes.func.isRequired,\n    hasLoaded: PropTypes.bool.isRequired,\n    retriggerTableGeneration: PropTypes.func.isRequired,\n    tableDataGenerated: PropTypes.func.isRequired,\n    tableDataLoaded: PropTypes.bool.isRequired\n}\n\nconst LocalizedInteractiveTable = withTranslation()(InteractiveTable);\nexport default LocalizedInteractiveTable;\n"]},"metadata":{},"sourceType":"module"}