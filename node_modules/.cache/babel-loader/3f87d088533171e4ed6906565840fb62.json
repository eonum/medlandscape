{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/src/components/LanguagePicker/LanguagePicker.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from \"react-i18next\";\nimport './LanguagePicker.css';\n/**\n* Basic component for selecting the active language\n*/\n\nvar LanguagePicker =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LanguagePicker, _Component);\n\n  function LanguagePicker() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LanguagePicker);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LanguagePicker)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      lang: 'de',\n      otherLang: 'fr'\n      /**\n      * onLanguageChange - Changes the language, and after that resends the\n      * initApiCall to retrieve the correct variable names.\n      */\n\n    };\n\n    _this.onLanguageChange = function () {\n      var code, other;\n\n      if (_this.state.lang === 'de') {\n        code = 'fr';\n        other = 'de';\n      } else {\n        code = 'de';\n        other = 'fr';\n      }\n\n      _this.props.i18n.changeLanguage(code).then(function () {\n        _this.props.changeLanguage();\n      });\n\n      _this.setState({\n        lang: code,\n        otherLang: other\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LanguagePicker, [{\n    key: \"render\",\n\n    /**\n    * render - rendes the component\n    *\n    * @return {JSX}  Component in JSX format\n    */\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"languagePicker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"langBtn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, this.state.lang.toUpperCase()), React.createElement(\"button\", {\n        className: \"hiddenLangBtn\",\n        onClick: function onClick() {\n          return _this2.onLanguageChange();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.state.otherLang.toUpperCase()));\n    }\n  }]);\n\n  return LanguagePicker;\n}(Component);\n/**\n * PropTypes:\n *\n * changeLanguage: Called when the language is changed.\n */\n\n\nLanguagePicker.propTypes = {\n  changeLanguage: PropTypes.func.isRequired\n  /**\n   * Convert the component using withTranslation() to have access to t() function\n   *  and other i18next props. Then export it.\n   */\n\n};\nvar LocalizedLanguagePicker = withTranslation()(LanguagePicker);\nexport default LocalizedLanguagePicker;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/src/components/LanguagePicker/LanguagePicker.js"],"names":["React","Component","PropTypes","withTranslation","LanguagePicker","state","lang","otherLang","onLanguageChange","code","other","props","i18n","changeLanguage","then","setState","toUpperCase","propTypes","func","isRequired","LocalizedLanguagePicker"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAO,sBAAP;AAEA;;;;IAGMC,c;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,IAAI,EAAG,IADH;AAEJC,MAAAA,SAAS,EAAG;AAGhB;;;;;AALQ,K;;UASRC,gB,GAAmB,YAAM;AACrB,UAAIC,IAAJ,EAAUC,KAAV;;AACA,UAAI,MAAKL,KAAL,CAAWC,IAAX,KAAoB,IAAxB,EAA8B;AAC1BG,QAAAA,IAAI,GAAG,IAAP;AACAC,QAAAA,KAAK,GAAG,IAAR;AACH,OAHD,MAGO;AACHD,QAAAA,IAAI,GAAG,IAAP;AACAC,QAAAA,KAAK,GAAG,IAAR;AACH;;AACD,YAAKC,KAAL,CAAWC,IAAX,CAAgBC,cAAhB,CAA+BJ,IAA/B,EAAqCK,IAArC,CAA0C,YAAM;AAC5C,cAAKH,KAAL,CAAWE,cAAX;AACH,OAFD;;AAGA,YAAKE,QAAL,CAAc;AACVT,QAAAA,IAAI,EAAGG,IADG;AAEVF,QAAAA,SAAS,EAAGG;AAFF,OAAd;AAIH,K;;;;;;;;AAGD;;;;;6BAKU;AAAA;;AACN,aACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,SAAS,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKL,KAAL,CAAWC,IAAX,CAAgBU,WAAhB,EADL,CADJ,EAII;AAAQ,QAAA,SAAS,EAAC,eAAlB;AAAkC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACR,gBAAL,EAAN;AAAA,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKH,KAAL,CAAWE,SAAX,CAAqBS,WAArB,EADL,CAJJ,CADJ;AAUH;;;;EA9CwBf,S;AAiD7B;;;;;;;AAKAG,cAAc,CAACa,SAAf,GAA2B;AACvBJ,EAAAA,cAAc,EAAEX,SAAS,CAACgB,IAAV,CAAeC;AAGnC;;;;;AAJ2B,CAA3B;AAQA,IAAMC,uBAAuB,GAAGjB,eAAe,GAAGC,cAAH,CAA/C;AACA,eAAegB,uBAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from \"react-i18next\";\nimport './LanguagePicker.css'\n\n/**\n* Basic component for selecting the active language\n*/\nclass LanguagePicker extends Component {\n\n    state = {\n        lang : 'de',\n        otherLang : 'fr'\n    }\n\n    /**\n    * onLanguageChange - Changes the language, and after that resends the\n    * initApiCall to retrieve the correct variable names.\n    */\n    onLanguageChange = () => {\n        let code, other;\n        if (this.state.lang === 'de') {\n            code = 'fr';\n            other = 'de';\n        } else {\n            code = 'de';\n            other = 'fr';\n        }\n        this.props.i18n.changeLanguage(code).then(() => {\n            this.props.changeLanguage();\n        });\n        this.setState({\n            lang : code,\n            otherLang : other\n        })\n    }\n\n\n    /**\n    * render - rendes the component\n    *\n    * @return {JSX}  Component in JSX format\n    */\n    render () {\n        return (\n            <div className=\"languagePicker\">\n                <button className=\"langBtn\">\n                    {this.state.lang.toUpperCase()}\n                </button>\n                <button className=\"hiddenLangBtn\" onClick={() => this.onLanguageChange()}>\n                    {this.state.otherLang.toUpperCase()}\n                </button>\n            </div>\n        );\n    }\n}\n\n/**\n * PropTypes:\n *\n * changeLanguage: Called when the language is changed.\n */\nLanguagePicker.propTypes = {\n    changeLanguage: PropTypes.func.isRequired,\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedLanguagePicker = withTranslation()(LanguagePicker)\nexport default LocalizedLanguagePicker;\n"]},"metadata":{},"sourceType":"module"}