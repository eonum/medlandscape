{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js';\nimport CentralPanel from './components/CentralPanel/CentralPanel.js';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      hospitals: [],\n      cantons: [],\n      // different variables applied to the different views\n      hospitalMapSelectedVariable: {},\n      cantonMapSelectedVariable: {},\n      boxPlotSelectedVariable: {},\n      // different hospital results stored per view\n      mapHospitals: [],\n      tableHospitals: [],\n      boxPlotHospitals: [],\n      regressionHospitals: [],\n      // results of the different filters\n      hospitalsByEnums: [],\n      hospitalsByType: [],\n      unfilteredHospitals: [],\n      filteredHospitals: [],\n      years: [],\n      selectedYear: \"\",\n      view: 1,\n      mapView: 1,\n      graphView: 1,\n      hasLoaded: false,\n      tableDataLoaded: false\n      /**\n      * Calls the API with specific query.\n      * @param  {String} query The specific query to use for the API call.\n      */\n\n    };\n\n    _this.applyVariables = function (query) {\n      console.log(\"FETCHING DATA, QUERY: \" + query);\n      var key;\n      return _this.apiCall(query).then(function (results) {\n        var _this$setState;\n\n        var years = _this.getYears(results);\n\n        if (_this.state.view === 1) {\n          key = _this.state.mapView === 1 ? \"mapHospitals\" : \"cantons\";\n        } else if (_this.state.view === 2) {\n          key = \"tableHospitals\";\n        } else {\n          key = _this.state.graphView === 1 ? \"boxPlotHospitals\" : \"regressionHospitals\";\n        }\n\n        _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"years\", years), _defineProperty(_this$setState, \"selectedYear\", years[0]), _defineProperty(_this$setState, \"hasLoaded\", _this.state.view !== 1 || _this.state.mapView !== 1), _this$setState), function () {\n          console.log(\"DATA FETCHED\");\n\n          if (_this.state.mapView === 1) {\n            _this.filterHospitals(); // only needed for hospitals while on the map View\n\n          }\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + _this.props.i18n.language + apiRequest + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      // fetching all hospitals from the API\n      _this.apiCall(\"hospitals\").then(function (result) {\n        _this.setState({\n          hospitals: result\n        });\n      }); // fetches all Variables from the API\n\n\n      _this.apiCall(\"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        }); // the \"type\" variable which is loaded with every request\n\n\n        var typeVar = result.filter(function (variable) {\n          return variable.name === \"Typ\";\n        }); // the default variable chosen when loading the app\n\n        _this.setVariable(result[1]);\n\n        var query = \"hospitals?variables=\";\n        query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n\n        _this.applyVariables(query);\n      });\n    };\n\n    _this.setVariable = function (item) {\n      console.log(\"============================\");\n      console.log(\"SETTING variable to \" + item.name);\n\n      var key = _this.getViewSpecificVariable();\n\n      if (_this.state[key] !== item) {\n        var _this$setState2;\n\n        _this.setState((_this$setState2 = {}, _defineProperty(_this$setState2, key, item), _defineProperty(_this$setState2, \"hasLoaded\", false), _this$setState2));\n      } else {\n        console.log(\"Same Variable selected, nothing to change.\");\n      }\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.filterHospitals = function () {\n      // console.log(\"FILTERING has started\");\n      var _this$state = _this.state,\n          hospitalsByEnums = _this$state.hospitalsByEnums,\n          hospitalsByType = _this$state.hospitalsByType,\n          mapHospitals = _this$state.mapHospitals; // console.log(\"hospitals by enums: \" + hospitalsByEnums.length);\n      // console.log(\"hospital by type: \" + hospitalsByType.length);\n\n      var filteredHospitals = [],\n          intersectingHospitals = [],\n          tmp = []; // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n\n      if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n        // in case of no matches, there would be no need to do intersection\n        if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n          // we have to compare names because the attribute of each hospital has a different length\n          for (var i = 0; i < hospitalsByType.length; i++) {\n            for (var j = 0; j < hospitalsByEnums.length; j++) {\n              if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                intersectingHospitals.push(hospitalsByEnums[j]);\n              }\n            }\n          }\n        } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n          intersectingHospitals = hospitalsByType > hospitalsByEnums ? hospitalsByType : hospitalsByEnums;\n        } else {\n          filteredHospitals = mapHospitals;\n        }\n\n        if (intersectingHospitals.length > 0) {\n          for (var _i = 0; _i < intersectingHospitals.length; _i++) {\n            for (var _j = 0; _j < mapHospitals.length; _j++) {\n              if (intersectingHospitals[_i].name === mapHospitals[_j].name) {\n                filteredHospitals.push(mapHospitals[_j]);\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"DATA FILTERED\");\n      var unfiltered = mapHospitals;\n\n      _this.setState({\n        filteredHospitals: filteredHospitals,\n        unfilteredHospitals: unfiltered,\n        hasLoaded: true\n      });\n    };\n\n    _this.getYears = function (objects) {\n      // console.log(\"GETTING YEARS\");\n      var name = _this.state[_this.getViewSpecificVariable()].name; // console.log(\"VAR: \" + name);\n      // console.log(\"OBJECTS: \");\n      // console.log(objects[0]);\n\n\n      var maxYears = [],\n          years;\n\n      for (var i = 0; i < objects.length; i++) {\n        years = Object.keys(objects[i].attributes[name]);\n        maxYears = years.length > maxYears.length ? years : maxYears;\n      } // console.log(\"END OF GET YEARS\");\n\n\n      return maxYears;\n    };\n\n    _this.getViewSpecificVariable = function () {\n      var v;\n\n      switch (_this.state.view) {\n        case 1:\n          v = _this.state.mapView === 1 ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\";\n          break;\n\n        case 3:\n          v = \"boxPlotSelectedVariable\";\n          break;\n\n        default:\n          v = \"hospitalMapSelectedVariable\";\n      }\n\n      return v;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.setView = function (view) {\n      console.log(\"SWITCHING TABVIEW\");\n\n      _this.setState({\n        view: view\n      });\n    };\n\n    _this.setMapView = function (view) {\n      console.log(\"SWITCHING MAPVIEW\");\n\n      _this.setState({\n        mapView: view\n      });\n    };\n\n    _this.setHospitalsByEnums = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByEnums: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n\n        _this.filterHospitals();\n      });\n    };\n\n    _this.setHospitalsByType = function (selectedHospitals) {\n      _this.setState({\n        hospitalsByType: selectedHospitals,\n        hasLoaded: false\n      }, function () {\n        console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n\n        _this.filterHospitals();\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          variables = _this$state2.variables,\n          hospitals = _this$state2.hospitals,\n          cantons = _this$state2.cantons,\n          hospitalMapSelectedVariable = _this$state2.hospitalMapSelectedVariable,\n          cantonMapSelectedVariable = _this$state2.cantonMapSelectedVariable,\n          boxPlotSelectedVariable = _this$state2.boxPlotSelectedVariable,\n          mapHospitals = _this$state2.mapHospitals,\n          tableHospitals = _this$state2.tableHospitals,\n          boxPlotHospitals = _this$state2.boxPlotHospitals,\n          regressionHospitals = _this$state2.regressionHospitals,\n          unfilteredHospitals = _this$state2.unfilteredHospitals,\n          filteredHospitals = _this$state2.filteredHospitals,\n          years = _this$state2.years,\n          selectedYear = _this$state2.selectedYear,\n          view = _this$state2.view,\n          mapView = _this$state2.mapView,\n          graphView = _this$state2.graphView,\n          hasLoaded = _this$state2.hasLoaded;\n      var viewSpecificObjects;\n      var viewSpecificVariable;\n\n      switch (view) {\n        case 1:\n          viewSpecificObjects = mapView === 1 ? filteredHospitals : cantons;\n          viewSpecificVariable = mapView === 1 ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n          break;\n\n        case 2:\n          viewSpecificObjects = tableHospitals;\n          break;\n\n        case 3:\n          viewSpecificObjects = graphView === 1 ? regressionHospitals : boxPlotHospitals;\n          viewSpecificVariable = boxPlotSelectedVariable;\n          break;\n\n        default:\n          viewSpecificObjects = mapHospitals;\n          viewSpecificVariable = hospitalMapSelectedVariable;\n          break;\n      }\n\n      if (hasLoaded) {\n        console.log(\"DATA READY\"); //console.log(\"PASSING VAR: \" + viewSpecificVariable.name);\n\n        console.log(\"PASSING OBJ: \" + viewSpecificObjects.length);\n        console.log(\"OBJ SAMPLE: \");\n        console.log(viewSpecificObjects[0]);\n      }\n\n      var centralPanel = view !== 1 ? React.createElement(CentralPanel, {\n        view: view,\n        variables: variables,\n        hospitals: hospitals,\n        hasLoaded: hasLoaded,\n        fetchData: this.applyVariables,\n        objects: viewSpecificObjects,\n        variableInfo: viewSpecificVariable,\n        year: selectedYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }) : null;\n      var slider;\n\n      if (years.length > 1 && view === 1 && Object.keys(viewSpecificVariable).length !== 0) {\n        slider = React.createElement(Slider, {\n          years: years,\n          selectedYear: selectedYear,\n          setYear: this.setYear,\n          hasLoaded: hasLoaded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 359\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, React.createElement(Maps, {\n        objects: viewSpecificObjects,\n        selectedVariable: viewSpecificVariable,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        view: view,\n        mapView: mapView,\n        setMapView: this.setMapView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }, React.createElement(ControlPanel, {\n        view: view,\n        setView: this.setView,\n        unfilteredHospitals: unfilteredHospitals,\n        setVariable: this.setVariable,\n        selectedVariable: viewSpecificVariable,\n        variables: variables,\n        fetchData: this.applyVariables,\n        filterByEnum: this.setHospitalsByEnums,\n        filterByType: this.setHospitalsByType,\n        year: selectedYear,\n        hasLoaded: hasLoaded,\n        mapView: mapView,\n        setMapView: this.setMapView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }), centralPanel, React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }), slider));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","Maps","withTranslation","ControlPanel","CentralPanel","LanguagePicker","Slider","apiURL","apiRequest","App","state","variables","hospitals","cantons","hospitalMapSelectedVariable","cantonMapSelectedVariable","boxPlotSelectedVariable","mapHospitals","tableHospitals","boxPlotHospitals","regressionHospitals","hospitalsByEnums","hospitalsByType","unfilteredHospitals","filteredHospitals","years","selectedYear","view","mapView","graphView","hasLoaded","tableDataLoaded","applyVariables","query","console","log","key","apiCall","then","results","getYears","setState","filterHospitals","fetch","props","i18n","language","res","json","initApiCall","result","typeVar","filter","variable","name","setVariable","encodeURIComponent","item","getViewSpecificVariable","tableDataGenerated","intersectingHospitals","tmp","length","i","j","push","unfiltered","objects","maxYears","Object","keys","attributes","v","setYear","year","setView","setMapView","setHospitalsByEnums","selectedHospitals","setHospitalsByType","viewSpecificObjects","viewSpecificVariable","centralPanel","slider","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js'\nimport CentralPanel from './components/CentralPanel/CentralPanel.js'\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nimport Slider from './components/Slider/Slider.js'\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables : [],\n        hospitals : [],\n        cantons : [],\n\n        // different variables applied to the different views\n        hospitalMapSelectedVariable : {},\n        cantonMapSelectedVariable : {},\n        boxPlotSelectedVariable : {},\n\n        // different hospital results stored per view\n        mapHospitals : [],\n        tableHospitals : [],\n        boxPlotHospitals : [],\n        regressionHospitals : [],\n\n        // results of the different filters\n        hospitalsByEnums : [],\n        hospitalsByType : [],\n        unfilteredHospitals : [],\n        filteredHospitals : [],\n\n        years : [],\n        selectedYear : \"\",\n\n        view : 1,\n        mapView : 1,\n        graphView : 1,\n\n        hasLoaded : false,\n        tableDataLoaded : false\n    }\n\n    /**\n    * Calls the API with specific query.\n    * @param  {String} query The specific query to use for the API call.\n    */\n    applyVariables = (query) => {\n        console.log(\"FETCHING DATA, QUERY: \" + query);\n        let key;\n        return this.apiCall(query).then((results) => {\n            let years = this.getYears(results);\n\n            if (this.state.view === 1) {\n                key = (this.state.mapView === 1) ? \"mapHospitals\" : \"cantons\";\n            } else if (this.state.view === 2) {\n                key = \"tableHospitals\";\n            } else {\n                key = (this.state.graphView === 1) ? \"boxPlotHospitals\" : \"regressionHospitals\";\n            }\n\n            this.setState({\n                [key] : results,\n                years : years,\n                selectedYear : years[0],\n                hasLoaded : (this.state.view !== 1 || this.state.mapView !== 1)\n            }, () => {\n                console.log(\"DATA FETCHED\");\n                if (this.state.mapView === 1) {\n                    this.filterHospitals(); // only needed for hospitals while on the map View\n                }\n            })\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + this.props.i18n.language + apiRequest + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        // fetching all hospitals from the API\n        this.apiCall(\"hospitals\").then((result) => {\n            this.setState({\n                hospitals : result\n            });\n        })\n\n        // fetches all Variables from the API\n        this.apiCall(\"variables\").then((result) => {\n            this.setState({\n                variables : result\n            });\n\n            // the \"type\" variable which is loaded with every request\n            let typeVar = result.filter((variable) => {\n                return (variable.name === \"Typ\");\n            })\n\n            // the default variable chosen when loading the app\n            this.setVariable(result[1]);\n            let query = \"hospitals?variables=\";\n            query += encodeURIComponent(result[1].name + \"$\" + typeVar[0].name);\n            this.applyVariables(query);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * @param  {Variable object} item The selected variable.\n    */\n    setVariable = (item) => {\n        console.log(\"============================\");\n        console.log(\"SETTING variable to \" + item.name);\n        let key = this.getViewSpecificVariable();\n\n        if (this.state[key] !== item) {\n            this.setState({\n                [key] : item,\n                hasLoaded : false\n            });\n        } else {\n            console.log(\"Same Variable selected, nothing to change.\");\n        }\n    }\n\n    /**\n     * Comment here please\n     */\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    /**\n     * Determines which Hospitals to display on the map according to fitlers.\n     * @return {Array} The array of hospitals to display.\n     */\n    filterHospitals = () => {\n        // console.log(\"FILTERING has started\");\n        const {hospitalsByEnums, hospitalsByType, mapHospitals} = this.state;\n        // console.log(\"hospitals by enums: \" + hospitalsByEnums.length);\n        // console.log(\"hospital by type: \" + hospitalsByType.length);\n        let filteredHospitals = [], intersectingHospitals = [], tmp = [];\n        // [0] === 0 is specified as \"no match\" in FilterEditor | HospitalTypeFilter => filteredHospitals stays empty\n        if (!(hospitalsByEnums[0] === 0 || hospitalsByType[0] === 0)) {\n\n            // in case of no matches, there would be no need to do intersection\n            if (hospitalsByEnums.length > 0 && hospitalsByType.length > 0) {\n                // we have to compare names because the attribute of each hospital has a different length\n                for (let i = 0; i < hospitalsByType.length; i++) {\n                    for (let j = 0; j < hospitalsByEnums.length; j++) {\n                        if (hospitalsByEnums[j].name === hospitalsByType[i].name) {\n                            intersectingHospitals.push(hospitalsByEnums[j]);\n                        }\n                    }\n                }\n            } else if (hospitalsByEnums.length > 0 || hospitalsByType.length > 0) {\n                intersectingHospitals = (hospitalsByType > hospitalsByEnums) ? hospitalsByType : hospitalsByEnums;\n            } else {\n                filteredHospitals = mapHospitals\n            }\n\n            if (intersectingHospitals.length > 0) {\n                for (let i = 0; i < intersectingHospitals.length; i++) {\n                    for (let j = 0; j < mapHospitals.length; j++) {\n                        if (intersectingHospitals[i].name === mapHospitals[j].name) {\n                            filteredHospitals.push(mapHospitals[j]);\n                        }\n                    }\n                }\n            }\n        }\n        console.log(\"DATA FILTERED\");\n        let unfiltered = mapHospitals;\n        this.setState({\n            filteredHospitals : filteredHospitals,\n            unfilteredHospitals : unfiltered,\n            hasLoaded : true\n        });\n    }\n\n    /**\n     * Returns list of available years for selected Variable.\n     * @return {Array} The available years.\n     */\n    getYears = (objects) => {\n        // console.log(\"GETTING YEARS\");\n        const {name} = this.state[this.getViewSpecificVariable()];\n        // console.log(\"VAR: \" + name);\n        // console.log(\"OBJECTS: \");\n        // console.log(objects[0]);\n        let maxYears = [], years;\n        for (var i = 0; i < objects.length; i++) {\n            years = Object.keys(objects[i].attributes[name]);\n            maxYears = (years.length > maxYears.length) ? years : maxYears;\n        }\n        // console.log(\"END OF GET YEARS\");\n        return maxYears;\n    }\n\n    getViewSpecificVariable = () => {\n        let v;\n        switch (this.state.view) {\n            case 1:\n                v = (this.state.mapView === 1) ? \"hospitalMapSelectedVariable\" : \"cantonMapSelectedVariable\"\n                break;\n            case 3:\n                v = \"boxPlotSelectedVariable\";\n                break;\n            default:\n                v = \"hospitalMapSelectedVariable\";\n        }\n        return v;\n    }\n\n    /**\n     * Setter for the selectedYear state variable.\n     * @param {String} year The selected year.\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year\n        })\n    }\n\n    /**\n     * Setter for the view state variable.\n     * @param {int} view The selected view.\n     */\n    setView = (view) => {\n        console.log(\"SWITCHING TABVIEW\");\n        this.setState({\n            view : view,\n        })\n    }\n\n    setMapView = (view) => {\n        console.log(\"SWITCHING MAPVIEW\");\n        this.setState({\n            mapView : view\n        })\n    }\n\n    /**\n     * Set hospitalsByEnums to the selected Hospital Variable\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByEnums = (selectedHospitals) => {\n        this.setState({\n            hospitalsByEnums : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            console.log(\"UPDATING filterhospitals from setHospitalsByEnums\");\n            this.filterHospitals();\n        })\n    }\n\n    /**\n     * Set hospitalsByType to selected Hospital Type\n     * @param {Array} selectedHospitals The selected hospitals.\n     */\n    setHospitalsByType = (selectedHospitals) => {\n        this.setState({\n            hospitalsByType : selectedHospitals,\n            hasLoaded : false\n        }, () => {\n            console.log(\"UPDATING filterhospitals from setHospitalsByType\");\n            this.filterHospitals();\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        const {\n            variables,\n            hospitals,\n            cantons,\n            hospitalMapSelectedVariable,\n            cantonMapSelectedVariable,\n            boxPlotSelectedVariable,\n            mapHospitals,\n            tableHospitals,\n            boxPlotHospitals,\n            regressionHospitals,\n            unfilteredHospitals,\n            filteredHospitals,\n            years,\n            selectedYear,\n            view,\n            mapView,\n            graphView,\n            hasLoaded\n        } = this.state;\n\n        let viewSpecificObjects;\n        let viewSpecificVariable;\n\n        switch (view) {\n            case 1:\n                viewSpecificObjects = (mapView === 1) ? filteredHospitals : cantons;\n                viewSpecificVariable = (mapView === 1) ? hospitalMapSelectedVariable : cantonMapSelectedVariable;\n                break;\n            case 2:\n                viewSpecificObjects = tableHospitals;\n                break;\n            case 3:\n                viewSpecificObjects = (graphView === 1) ? regressionHospitals : boxPlotHospitals;\n                viewSpecificVariable = boxPlotSelectedVariable;\n                break;\n            default:\n                viewSpecificObjects = mapHospitals;\n                viewSpecificVariable = hospitalMapSelectedVariable;\n                break;\n        }\n\n        if (hasLoaded) {\n            console.log(\"DATA READY\");\n            //console.log(\"PASSING VAR: \" + viewSpecificVariable.name);\n            console.log(\"PASSING OBJ: \" + viewSpecificObjects.length);\n            console.log(\"OBJ SAMPLE: \");\n            console.log(viewSpecificObjects[0]);\n        }\n\n        let centralPanel = (view !== 1)\n            ? (\n                <CentralPanel\n                    view={view}\n                    variables={variables}\n                    hospitals={hospitals}\n                    hasLoaded={hasLoaded}\n                    fetchData={this.applyVariables}\n\t\t\t\t\tobjects={viewSpecificObjects}\n                    variableInfo={viewSpecificVariable}\n                    year={selectedYear}\n                />\n            )\n            : null\n        ;\n\n        let slider;\n\n        if (years.length > 1 && view === 1 && Object.keys(viewSpecificVariable).length !== 0) {\n            slider = (<Slider years={years} selectedYear={selectedYear} setYear={this.setYear} hasLoaded={hasLoaded}/>);\n        }\n\n\n        return (\n\t\t\t<div className=\"App\">\n                <Maps\n                    objects={viewSpecificObjects}\n                    selectedVariable={viewSpecificVariable}\n                    year={selectedYear}\n                    hasLoaded={hasLoaded}\n                    view={view}\n                    mapView={mapView}\n                    setMapView={this.setMapView}\n                />\n                <div className=\"grid-container\">\n                    <ControlPanel\n                        view={view}\n                        setView={this.setView}\n                        unfilteredHospitals={unfilteredHospitals}\n                        setVariable={this.setVariable}\n                        selectedVariable={viewSpecificVariable}\n                        variables={variables}\n                        fetchData={this.applyVariables}\n                        filterByEnum={this.setHospitalsByEnums}\n                        filterByType={this.setHospitalsByType}\n                        year={selectedYear}\n                        hasLoaded={hasLoaded}\n                        mapView={mapView}\n                        setMapView={this.setMapView}\n                    />\n                    {centralPanel}\n                    <LanguagePicker resendInitApiCall={this.initApiCall} />\n                    {slider}\n                </div>\n\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}