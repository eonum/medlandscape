{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap/HospitalMap.js\";\nimport React, { Component } from \"react\";\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet';\nimport { withTranslation } from 'react-i18next';\nimport { numberFormat } from './../../utils.mjs';\n/*\n* Component to display the different hosptials on our map. Also displays the selected\n* HosptialVariable in context with our selected Hospitals on to our map\n*/\n\nvar HospitalMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HospitalMap, _Component);\n\n  function HospitalMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HospitalMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HospitalMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.calculateCircleColor = function (item) {\n      var color;\n\n      switch (item.attributes[\"Typ\"][_this.props.year]) {\n        // unispital\n        case \"K111\":\n          color = \"#a72a2a\";\n          break;\n        // allgemeinspital zentrumsversorgung\n\n        case \"K112\":\n          color = \"#a79f2a\";\n          break;\n        // allgemeinspital grundversorgung\n\n        case \"K121\":\n          color = \"#2da72a\";\n          break;\n\n        case \"K122\":\n          color = \"#2da72a\";\n          break;\n\n        case \"K123\":\n          color = \"#2da72a\";\n          break;\n        // psychiatrische klinik\n\n        case \"K211\":\n          color = \"#2a8ea7\";\n          break;\n\n        case \"K212\":\n          color = \"#2a8ea7\";\n          break;\n        // rehaklinik\n\n        case \"K221\":\n          color = \"#2d2aa7\";\n          break;\n        // spezialklinik\n        // other 5 cases, too lazy to switch them out\n\n        default:\n          color = \"#762aa7\";\n          break;\n      }\n\n      return color;\n    };\n\n    _this.getNormedRadius = function (item) {\n      if (_this.props.maxAndMin === 0) {\n        return 7;\n      } else {\n        var max = _this.props.maxAndMin.max;\n        var min = _this.props.maxAndMin.min; //const mean = this.props.maxAndMin.mean;\n        //const std = this.props.maxAndMin.std;\n        //const standardVal = ((this.props.returnData(item)-mean)/std);\n\n        var data = _this.props.returnData(item);\n\n        var biggestRadius = 50;\n        var a = (data + Math.abs(min)) / (max + Math.abs(min)) * Math.pow(biggestRadius, 2) * Math.PI;\n        var radius = Math.round(Math.sqrt(a / Math.PI));\n        return radius <= 7 ? 7 : radius;\n      }\n    };\n\n    _this.setNewStyle = function (e) {\n      e.target.setStyle({\n        weight: 3,\n        fillColor: \"#1996fa\",\n        color: \"#1996fa\"\n      });\n    };\n\n    _this.onMouseOut = function (item, e) {\n      if (!e.target.isPopupOpen()) _this.resetStyle(item, e);\n    };\n\n    _this.resetStyle = function (item, e) {\n      var oldColor = _this.calculateCircleColor(item);\n\n      e.target.setStyle({\n        weight: 2,\n        color: oldColor,\n        fillColor: oldColor\n      });\n    };\n\n    _this.onClick = function (e) {\n      _this.setNewStyle(e);\n\n      e.target.closeTooltip();\n    };\n\n    return _this;\n  }\n\n  _createClass(HospitalMap, [{\n    key: \"render\",\n\n    /**\n     * Creates circles to represent hospitals on a Map\n    * Adds popup an tooltip with hospital information to each circle\n    * @return {JSX}\n     */\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(LayerGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.props.data.map(function (item) {\n        return React.createElement(CircleMarker, {\n          key: _this2.props.data.indexOf(item),\n          center: {\n            lon: item.longitude,\n            lat: item.latitude\n          },\n          color: _this2.calculateCircleColor(item),\n          weight: \"2\" // defining how big the outline of circle is\n          ,\n          opacity: \"1\",\n          fillColor: _this2.calculateCircleColor(item),\n          fillOpacity: \"0.7\",\n          radius: _this2.getNormedRadius(item) // norming function is here\n          ,\n          onMouseOver: _this2.setNewStyle.bind(_this2),\n          onMouseOut: _this2.onMouseOut.bind(_this2, item),\n          onClick: _this2.onClick.bind(_this2),\n          onPopupClose: _this2.resetStyle.bind(_this2, item),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          sticky: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, item.name), React.createElement(Popup, {\n          maxWidth: \"250\",\n          closeButton: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(\"table\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(\"tbody\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, _this2.props.t(\"popup.hospital\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        }, item.name)), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, _this2.props.t(\"popup.address\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, React.createElement(\"dd\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, item.street, \",\"), item.city)), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, _this2.props.selectedVariable.text, \":\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, numberFormat(_this2.props.returnData(item))))))));\n      }));\n    }\n  }]);\n\n  return HospitalMap;\n}(Component);\n\nvar LocalizedHospitalMap = withTranslation()(HospitalMap);\nexport default LocalizedHospitalMap;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap/HospitalMap.js"],"names":["React","Component","CircleMarker","Popup","LayerGroup","Tooltip","withTranslation","numberFormat","HospitalMap","calculateCircleColor","item","color","attributes","props","year","getNormedRadius","maxAndMin","max","min","data","returnData","biggestRadius","a","Math","abs","pow","PI","radius","round","sqrt","setNewStyle","e","target","setStyle","weight","fillColor","onMouseOut","isPopupOpen","resetStyle","oldColor","onClick","closeTooltip","map","indexOf","lon","longitude","lat","latitude","bind","name","t","street","city","selectedVariable","text","LocalizedHospitalMap"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet'\nimport { withTranslation } from 'react-i18next';\nimport { numberFormat } from './../../utils.mjs';\n\n/*\n* Component to display the different hosptials on our map. Also displays the selected\n* HosptialVariable in context with our selected Hospitals on to our map\n*/\n\n\n\nclass HospitalMap extends Component {\n\n    /**\n     * Calculates and returns a rgb color\n     * @return {String} The rgb color as a string.\n     */\n\tcalculateCircleColor = (item) => {\n\t\tlet color;\n\t\tswitch (item.attributes[\"Typ\"][this.props.year]) {\n\t\t\t// unispital\n\t\t\tcase (\"K111\"):\n\t\t\t\tcolor = \"#a72a2a\";\n\t\t\t\tbreak;\n\t\t\t// allgemeinspital zentrumsversorgung\n\t\t\tcase (\"K112\"):\n\t\t\t\tcolor = \"#a79f2a\";\n\t\t\t\tbreak;\n\t\t\t// allgemeinspital grundversorgung\n\t\t\tcase (\"K121\"):\n\t\t\t\tcolor = \"#2da72a\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K122\"):\n\t\t\t\tcolor = \"#2da72a\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K123\"):\n\t\t\t\tcolor = \"#2da72a\";\n\t\t\t\tbreak;\n\t\t\t// psychiatrische klinik\n\t\t\tcase (\"K211\"):\n\t\t\t\tcolor = \"#2a8ea7\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K212\"):\n\t\t\t\tcolor = \"#2a8ea7\";\n\t\t\t\tbreak;\n\t\t\t// rehaklinik\n\t\t\tcase (\"K221\"):\n\t\t\t\tcolor = \"#2d2aa7\";\n\t\t\t\tbreak;\n\t\t\t// spezialklinik\n\t\t\t// other 5 cases, too lazy to switch them out\n\t\t\tdefault :\n\t\t\t\tcolor = \"#762aa7\";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn color;\n\t}\n\n    /**\n     * Computes the Radius for a hospital point.\n     * @param  {Hospital Object} item The hospital\n     * @return {int} size of the radius\n     */\n\tgetNormedRadius = (item) => {\n\t\tif (this.props.maxAndMin === 0) {\n\t\t\treturn 7;\n\t\t} else {\n\t\t\tconst max = this.props.maxAndMin.max;\n\t\t\tconst min = this.props.maxAndMin.min;\n\t\t\t//const mean = this.props.maxAndMin.mean;\n\t\t\t//const std = this.props.maxAndMin.std;\n\t\t\t//const standardVal = ((this.props.returnData(item)-mean)/std);\n\t\t\tconst data = this.props.returnData(item);\n\t\t\tconst biggestRadius = 50;\n\n\t\t\tconst a = ((data + Math.abs(min)) / (max + Math.abs(min))) * Math.pow(biggestRadius, 2) * Math.PI;\n\t\t\tlet radius = Math.round(Math.sqrt(a / Math.PI));\n\n\t\t\treturn (radius <= 7) ? 7 : radius;\n\t\t}\n\t}\n\n\t/**\n\t* Changes hospital style if you hover on a hospital with your mouse\n\t* @param {Object} e the event\n\t*/\n\tsetNewStyle = (e) => {\n\t\te.target.setStyle({\n\t\t\tweight: 3,\n\t\t\tfillColor: \"#1996fa\",\n\t\t\tcolor: \"#1996fa\"\n\t\t});\n\t}\n\n\t/**\n\t* Set back hospital style if you hover off a hospital with your mouse\n\t* @param {Object} e the event\n\t*/\n\tonMouseOut = (item, e) => {\n\t\tif (!e.target.isPopupOpen())\n\t\t\tthis.resetStyle(item, e);\n\t}\n\n\t/**\n\t* Set back hospital style\n\t* @param {Object} e the event\n\t*/\n\tresetStyle = (item, e) => {\n\t\tlet oldColor = this.calculateCircleColor(item);\n\t\te.target.setStyle({\n\t\t\tweight: 2,\n\t\t\tcolor: oldColor,\n\t\t\tfillColor: oldColor,\n\t\t});\n\t}\n\n\t/**\n\t* Define behaviour of click on hospital\n\t* @param {Object} e the event\n\t*/\n\tonClick = (e) => {\n\t\tthis.setNewStyle(e);\n\t\te.target.closeTooltip();\n\t}\n\n    /**\n     * Creates circles to represent hospitals on a Map\n\t * Adds popup an tooltip with hospital information to each circle\n\t * @return {JSX}\n     */\n\trender() {\n\t\treturn (\n\t\t\t<LayerGroup>\n\t\t\t\t{\n\t\t\t\t\tthis.props.data.map((item) => (\n          \t\t\t\t<CircleMarker\n          \t\t\t\t\tkey = {this.props.data.indexOf(item)}\n        \t\t\t\t\tcenter={{lon: item.longitude, lat: item.latitude}}\n\t\t\t\t\t\t\tcolor= {this.calculateCircleColor(item)}\n\t\t\t\t\t\t\tweight = \"2\" // defining how big the outline of circle is\n\t\t\t\t\t\t\topacity = \"1\"\n        \t\t\t\t\tfillColor = {this.calculateCircleColor(item)}\n\t\t\t\t\t\t\tfillOpacity = \"0.7\"\n        \t\t\t\t\tradius={this.getNormedRadius(item)} // norming function is here\n\t\t\t\t\t\t\tonMouseOver = {this.setNewStyle.bind(this)}\n\t\t\t\t\t\t\tonMouseOut = {this.onMouseOut.bind(this, item)}\n\t\t\t\t\t\t\tonClick = {this.onClick.bind(this)}\n\t\t\t\t\t\t\tonPopupClose = {this.resetStyle.bind(this, item)}\n        \t\t\t\t>\n        \t\t\t\t\t<Tooltip\n\t\t\t\t\t\t\t\tsticky = {true}>\n        \t\t\t\t\t\t{item.name}\n        \t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t<Popup\n\t\t\t\t\t\t\t\tmaxWidth = \"250\"\n\t\t\t\t\t\t\t\tcloseButton = {false}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{this.props.t(\"popup.hospital\")}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{item.name}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{this.props.t(\"popup.address\")}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td><dd>{item.street},</dd>{item.city}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<td>{this.props.selectedVariable.text}:</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{numberFormat(this.props.returnData(item))}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</Popup>\n        \t\t\t\t</CircleMarker>\n      \t             ))\n\t\t\t\t}\n\t\t\t</LayerGroup>\n\t\t)\n\t}\n}\nconst LocalizedHospitalMap = withTranslation()(HospitalMap);\nexport default LocalizedHospitalMap;\n"]},"metadata":{},"sourceType":"module"}