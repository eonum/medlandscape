{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport { CSVLink } from \"react-csv\";\nimport './ControlPanel.css';\n/**\n* ControlPanel-Component that contains different DropdownMenus for the selection in the\n* Map-Component, aswell as Icons to change to a different Components\n*\n*/\n\nvar ControlPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlPanel, _Component);\n\n  function ControlPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cantonVars: [],\n      hospitalVars: [],\n      enums: [],\n      selectedEnum: {},\n      csvData: []\n    };\n\n    _this.fetchData = function (variable) {\n      var name = variable.name,\n          variable_model = variable.variable_model;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      var query = key + \"?variables=\";\n      query += encodeURIComponent(name);\n\n      if (key === \"hospitals\") {\n        query += encodeURIComponent(\"$\" + _this.state.enums[7].name);\n\n        if (_this.state.selectedEnum !== undefined && key === \"hospitals\") {\n          query += encodeURIComponent(\"$\" + _this.state.selectedEnum.name);\n        }\n      }\n\n      return _this.props.fetchData(query);\n    };\n\n    _this.setEnum = function (variable) {\n      _this.setState({\n        selectedEnum: variable\n      }, function () {\n        if (Object.keys(variable).length > 0) {\n          _this.fetchData(_this.props.selectedVariable);\n        }\n      });\n    };\n\n    _this.setVariable = function (item) {\n      _this.props.setVariable(item);\n    };\n\n    _this.setTabView = function (view) {\n      var oldView = _this.props.view;\n\n      if (oldView !== view) {\n        _this.props.setView(view);\n\n        document.getElementById('t' + oldView).classList.toggle('selectedTab');\n        document.getElementById('t' + view).classList.toggle('selectedTab');\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ControlPanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // filtering the different variables after the first initialisation of variables\n      if (this.props.variables !== prevProps.variables) {\n        var cantonVars = [],\n            hospitalVars = [],\n            enums = [];\n        this.props.variables.forEach(function (variable) {\n          if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n            if (variable.name !== \"Ort\" && variable.name !== \"Adr\") {\n              // because those don't make much sense as they are attached to any hospital either way\n              hospitalVars.push(variable);\n            }\n          } else if (variable.variable_model === \"Canton\") {\n            cantonVars.push(variable);\n          } else {\n            enums.push(variable);\n          }\n        });\n        this.setState({\n          cantonVars: cantonVars,\n          hospitalVars: hospitalVars,\n          enums: enums\n        });\n      }\n\n      if (!this.props.hasLoaded && prevProps.hasLoaded) {\n        // if a dropdown has been selected that needs to fetch data\n        if (this.props.selectedVariable !== prevProps.selectedVariable && this.props.view !== 2) {\n          // specific views in which this can happen\n          if (this.props.mapView === prevProps.mapView && this.props.view === 1 && prevProps.view === 1) {\n            console.log(\"FETCHING on CP didUpdate, MAPVIEW variable: \" + this.props.selectedVariable.name);\n            this.fetchData(this.props.selectedVariable);\n          } else if (this.props.graphView === prevProps.graphView && this.props.view === 3 && prevProps.view === 3 && this.props.graphView !== 2) {\n            console.log(\"FETCHING on CP didUpdate, GRAPHVIEW variable: \" + this.props.selectedVariable.name);\n            this.fetchData(this.props.selectedVariable);\n          }\n        }\n      }\n    }\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          t = _this$props.t,\n          hasLoaded = _this$props.hasLoaded,\n          unfilteredHospitals = _this$props.unfilteredHospitals,\n          filterByEnum = _this$props.filterByEnum,\n          filterByType = _this$props.filterByType,\n          filterLinRegByType = _this$props.filterLinRegByType,\n          year = _this$props.year,\n          selectedVariable = _this$props.selectedVariable,\n          mapView = _this$props.mapView,\n          graphView = _this$props.graphView,\n          csvData = _this$props.csvData;\n      var _this$state = this.state,\n          hospitalVars = _this$state.hospitalVars,\n          cantonVars = _this$state.cantonVars,\n          enums = _this$state.enums,\n          selectedEnum = _this$state.selectedEnum;\n      var selectedCantonVar, selectedHospitalVar; // setting selectedItem for Dropdowns\n\n      if (mapView === 1) {\n        selectedHospitalVar = selectedVariable;\n      } else {\n        selectedCantonVar = selectedVariable;\n      }\n\n      var mapViewHospitals = React.createElement(\"div\", {\n        className: \"mapViewHospitals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(HospitalTypeFilter, {\n        hospitals: unfilteredHospitals,\n        filter: filterByType,\n        selectedYear: year,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.setVariable,\n        selectedItem: selectedHospitalVar,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, t('mapView.filter')), React.createElement(FilterEditor, {\n        hospitals: unfilteredHospitals,\n        filter: filterByEnum,\n        hasLoaded: hasLoaded,\n        selectedYear: year,\n        selectedEnum: selectedEnum,\n        variables: enums,\n        setEnum: this.setEnum,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }));\n      var mapViewCantons = React.createElement(\"div\", {\n        className: \"mapViewCantons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.setVariable,\n        selectedItem: selectedCantonVar,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }));\n      var mapViews = React.createElement(\"div\", {\n        className: \"view1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, t('mapView.title')), React.createElement(\"div\", {\n        className: \"viewSwitcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: mapView === 1 ? \"label selectedLabel\" : \"label\",\n        onClick: this.props.setMapView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, t('mapView.hospitals')), React.createElement(\"p\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"|\"), React.createElement(\"p\", {\n        className: mapView === 2 ? \"label selectedLabel\" : \"label\",\n        onClick: this.props.setMapView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, t('mapView.cantons')))), mapView === 1 ? mapViewHospitals : mapViewCantons);\n      var tableView = React.createElement(\"div\", {\n        className: \"view2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, t('tableView.title'))), React.createElement(CSVLink, {\n        data: csvData,\n        filename: \"medlandscapeCSV.csv\",\n        className: \"btnCreateCSV\",\n        ref: function ref(r) {\n          return _this2.csvLink = r;\n        },\n        target: \"_blank\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, t('tableView.btnCreateCSV')));\n      var boxPlotView = React.createElement(\"div\", {\n        className: \"graphView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.setVariable,\n        selectedItem: selectedHospitalVar,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }));\n      var linRegView = React.createElement(\"div\", {\n        className: \"graphView\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(HospitalTypeFilter, {\n        hospitals: unfilteredHospitals,\n        filter: filterLinRegByType,\n        selectedYear: year,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }));\n      var graphViews = React.createElement(\"div\", {\n        className: \"view3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, t('graphView.title')), React.createElement(\"div\", {\n        className: \"viewSwitcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: graphView === 1 ? \"label selectedLabel\" : \"label\",\n        onClick: this.props.setGraphView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, t('graphView.boxPlot')), React.createElement(\"p\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"|\"), React.createElement(\"p\", {\n        className: graphView === 2 ? \"label selectedLabel\" : \"label\",\n        onClick: this.props.setGraphView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, t('graphView.regression')))), graphView === 1 ? boxPlotView : linRegView);\n      var controlPanelView;\n\n      switch (this.props.view) {\n        case 1:\n          controlPanelView = mapViews;\n          break;\n\n        case 2:\n          controlPanelView = tableView;\n          break;\n\n        case 3:\n          controlPanelView = graphViews;\n          break;\n\n        default:\n          controlPanelView = mapViews;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tabs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"t1\",\n        className: \"tab selectedTab\",\n        onClick: this.setTabView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t2\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t3\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tabContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, controlPanelView));\n    }\n  }]);\n\n  return ControlPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js"],"names":["React","Component","DropdownMenu","FilterEditor","HospitalTypeFilter","withTranslation","CSVLink","ControlPanel","state","cantonVars","hospitalVars","enums","selectedEnum","csvData","fetchData","variable","name","variable_model","key","query","encodeURIComponent","undefined","props","setEnum","setState","Object","keys","length","selectedVariable","setVariable","item","setTabView","view","oldView","setView","document","getElementById","classList","toggle","prevProps","variables","forEach","variable_type","push","hasLoaded","mapView","console","log","graphView","t","unfilteredHospitals","filterByEnum","filterByType","filterLinRegByType","year","selectedCantonVar","selectedHospitalVar","mapViewHospitals","mapViewCantons","mapViews","setMapView","bind","tableView","r","csvLink","boxPlotView","linRegView","graphViews","setGraphView","controlPanelView","LocalizedControlPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport { CSVLink } from \"react-csv\";\nimport './ControlPanel.css'\n\n/**\n* ControlPanel-Component that contains different DropdownMenus for the selection in the\n* Map-Component, aswell as Icons to change to a different Components\n*\n*/\n\nclass ControlPanel extends Component {\n\n    state = {\n        cantonVars : [],\n        hospitalVars : [],\n        enums : [],\n        selectedEnum : {},\n        csvData : []\n    }\n\n    componentDidUpdate(prevProps) {\n        // filtering the different variables after the first initialisation of variables\n        if (this.props.variables !== prevProps.variables) {\n            let cantonVars = [], hospitalVars = [], enums = [];\n\n            this.props.variables.forEach((variable) => {\n                if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n                    if (variable.name !== \"Ort\" && variable.name !== \"Adr\") { // because those don't make much sense as they are attached to any hospital either way\n                        hospitalVars.push(variable);\n                    }\n                } else if (variable.variable_model === \"Canton\") {\n                    cantonVars.push(variable);\n                } else {\n                    enums.push(variable);\n                }\n            });\n\n            this.setState({\n                cantonVars : cantonVars,\n                hospitalVars : hospitalVars,\n                enums : enums,\n            });\n        }\n\n        if (!this.props.hasLoaded && prevProps.hasLoaded) {\n            // if a dropdown has been selected that needs to fetch data\n            if (this.props.selectedVariable !== prevProps.selectedVariable && this.props.view !== 2) {\n                // specific views in which this can happen\n                if (this.props.mapView === prevProps.mapView && this.props.view === 1 && prevProps.view === 1) {\n                    console.log(\"FETCHING on CP didUpdate, MAPVIEW variable: \" + this.props.selectedVariable.name);\n                    this.fetchData(this.props.selectedVariable);\n                } else if (this.props.graphView === prevProps.graphView && this.props.view === 3 && prevProps.view === 3 && this.props.graphView !== 2) {\n                    console.log(\"FETCHING on CP didUpdate, GRAPHVIEW variable: \" + this.props.selectedVariable.name);\n                    this.fetchData(this.props.selectedVariable);\n                }\n            }\n        }\n    }\n\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchData = (variable) => {\n        const {name, variable_model} = variable;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        let query = key + \"?variables=\";\n        query += encodeURIComponent(name)\n        if (key === \"hospitals\") {\n            query += encodeURIComponent(\"$\" + this.state.enums[7].name);\n            if (this.state.selectedEnum !== undefined && key === \"hospitals\") {\n                query += encodeURIComponent(\"$\" + this.state.selectedEnum.name);\n            }\n        }\n        return this.props.fetchData(query);\n    }\n\n    /**\n     * Sets the state for selected Enum variable\n     * Gets data after changing it\n     * @param {Variable Object} variable The chosen variable.\n     */\n    setEnum = (variable) => {\n        this.setState({\n            selectedEnum : variable\n        }, () => {\n            if (Object.keys(variable).length > 0) {\n                this.fetchData(this.props.selectedVariable);\n            }\n        });\n    }\n\n    /**\n     * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n     * then calls fetchData to fetch data from the API.\n     * @param  {Variable object} item The selected variable.\n     */\n    setVariable = (item) => {\n        this.props.setVariable(item);\n    }\n\n    /**\n     * sets the view to be displayed on the ControlPanel.\n     */\n    setTabView = (view) => {\n        let oldView = this.props.view;\n        if (oldView !== view) {\n            this.props.setView(view);\n            document.getElementById('t' + oldView).classList.toggle('selectedTab');\n            document.getElementById('t' + view).classList.toggle('selectedTab');\n        }\n\n    }\n\n    render() {\n\n        const {t, hasLoaded, unfilteredHospitals, filterByEnum, filterByType, filterLinRegByType, year, selectedVariable, mapView, graphView, csvData} = this.props;\n        const {hospitalVars, cantonVars, enums, selectedEnum} = this.state;\n\n        let selectedCantonVar, selectedHospitalVar;\n\n        // setting selectedItem for Dropdowns\n        if (mapView === 1) {\n            selectedHospitalVar = selectedVariable;\n        } else {\n            selectedCantonVar = selectedVariable;\n        }\n\n        let mapViewHospitals = (\n            <div className=\"mapViewHospitals\">\n                <HospitalTypeFilter\n                    hospitals={unfilteredHospitals}\n                    filter={filterByType}\n                    selectedYear={year}\n                    hasLoaded={hasLoaded}\n                />\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"hospitalVars\"\n                    listItems={hospitalVars}\n                    selectItem={this.setVariable}\n                    selectedItem={selectedHospitalVar}\n                    defaultText={t('dropDowns.variablesFallback')}\n                />\n                <p>{t('mapView.filter')}</p>\n                <FilterEditor\n                    hospitals={unfilteredHospitals}\n                    filter={filterByEnum}\n                    hasLoaded={hasLoaded}\n                    selectedYear={year}\n                    selectedEnum={selectedEnum}\n                    variables={enums}\n                    setEnum={this.setEnum}\n                />\n            </div>\n        )\n\n        let mapViewCantons = (\n            <div className=\"mapViewCantons\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.setVariable} selectedItem={selectedCantonVar} defaultText={t('dropDowns.variablesFallback')}/>\n            </div>\n        )\n\n        let mapViews = (\n            <div className=\"view1\">\n                <div className=\"header\">\n                    <h1>{t('mapView.title')}</h1>\n                    <div className=\"viewSwitcher\">\n                        <p className={(mapView === 1) ? \"label selectedLabel\" : \"label\"} onClick={this.props.setMapView.bind(this, 1)}>{t('mapView.hospitals')}</p>\n                        <p className=\"separator\">|</p>\n                        <p className={(mapView === 2) ? \"label selectedLabel\" : \"label\"} onClick={this.props.setMapView.bind(this, 2)}>{t('mapView.cantons')}</p>\n                    </div>\n                </div>\n                {\n                    (mapView === 1)\n                    ? mapViewHospitals\n                    : mapViewCantons\n                }\n            </div>\n        );\n\n        let tableView = (\n            <div className=\"view2\">\n                <div className=\"header\">\n                    <h1>{t('tableView.title')}</h1>\n                </div>\n                    <CSVLink\n                        data={csvData}\n                        filename=\"medlandscapeCSV.csv\"\n                        className=\"btnCreateCSV\"\n                        ref={(r) => this.csvLink = r}\n                        target=\"_blank\"\n                    >\n                        {t('tableView.btnCreateCSV')}\n                    </CSVLink>\n            </div>\n        );\n\n        let boxPlotView = (\n            <div className=\"graphView\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.setVariable} selectedItem={selectedHospitalVar}  defaultText={t('dropDowns.variablesFallback')}/>\n            </div>\n        );\n\n        let linRegView = (\n            <div className=\"graphView\">\n                <HospitalTypeFilter\n                    hospitals={unfilteredHospitals}\n                    filter={filterLinRegByType}\n                    selectedYear={year}\n                    hasLoaded={hasLoaded}\n                />\n            </div>\n        );\n\n        let graphViews = (\n            <div className=\"view3\">\n                <div className=\"header\">\n                    <h1>{t('graphView.title')}</h1>\n                    <div className=\"viewSwitcher\">\n                        <p className={(graphView === 1) ? \"label selectedLabel\" : \"label\"} onClick={this.props.setGraphView.bind(this, 1)}>{t('graphView.boxPlot')}</p>\n                        <p className=\"separator\">|</p>\n                        <p className={(graphView === 2) ? \"label selectedLabel\" : \"label\"} onClick={this.props.setGraphView.bind(this, 2)}>{t('graphView.regression')}</p>\n                    </div>\n                </div>\n                {\n                    (graphView === 1)\n                    ? boxPlotView\n                    : linRegView\n                }\n            </div>\n        );\n\n        let controlPanelView;\n        switch(this.props.view) {\n            case 1:\n                controlPanelView = mapViews;\n                break;\n            case 2:\n                controlPanelView = tableView;\n                break;\n            case 3:\n                controlPanelView = graphViews;\n                break;\n            default:\n                controlPanelView = mapViews;\n        }\n\n        return (\n\t\t\t<div className=\"control-panel\">\n                <div className=\"tabs\">\n                    <div id=\"t1\" className=\"tab selectedTab\" onClick={this.setTabView.bind(this, 1)}></div>\n                    <div id=\"t2\" className=\"tab\" onClick={this.setTabView.bind(this, 2)}></div>\n                    <div id=\"t3\" className=\"tab\" onClick={this.setTabView.bind(this, 3)}></div>\n                </div>\n                <div className=\"tabContent\">\n                    {controlPanelView}\n                </div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;\n"]},"metadata":{},"sourceType":"module"}