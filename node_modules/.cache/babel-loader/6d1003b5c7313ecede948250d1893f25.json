{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css';\n\nvar ControlPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlPanel, _Component);\n\n  function ControlPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      cantonVars: [],\n      hospitalVars: [],\n      enums: [],\n      mapView: 1,\n      selectedEnum: undefined,\n      filtered: false\n    };\n\n    _this.fetchMapData = function (variable) {\n      var name = variable.name,\n          variable_model = variable.variable_model;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      var query = key + \"?variables=\";\n      query += encodeURIComponent(variable.name + \"$\" + _this.state.enums[7].name);\n      return _this.props.fetchData(key, query);\n    };\n\n    _this.fetchEnumData = function (variable) {\n      var name = _this.state.selectedEnum.name;\n      var query = \"hospitals?variables=\";\n      query += encodeURIComponent(variable.name + \"$\" + name + \"$\" + _this.state.enums[7].name);\n      return _this.props.fetchData(\"hospitals\", query);\n    };\n\n    _this.setEnum = function (variable) {\n      var answer;\n\n      _this.setState({\n        selectedEnum: variable\n      }, function () {\n        answer = _this.fetchEnumData(_this.props.selectedVariable);\n      });\n\n      return answer;\n    };\n\n    _this.selectVariable = function (item) {\n      _this.props.selectVariable(item);\n\n      if (_this.state.selectedEnum !== undefined) {\n        return _this.fetchMapData(item);\n      } else {\n        return _this.fetchEnumData(item);\n      }\n    };\n\n    _this.setTabView = function (view) {\n      var oldView = _this.props.view;\n\n      if (oldView !== view) {\n        _this.props.setView(view);\n\n        document.getElementById('t' + oldView).classList.toggle('selectedTab');\n        document.getElementById('t' + view).classList.toggle('selectedTab');\n      }\n    };\n\n    _this.setMapView = function (view) {\n      if (_this.state.view !== view) {\n        _this.setState({\n          mapView: view\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ControlPanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.state.filtered) {\n        var cantonVars = [],\n            hospitalVars = [],\n            enums = []; // filtering the different variables\n\n        this.props.variables.filter(function (variable) {\n          if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n            hospitalVars.push(variable);\n          } else if (variable.variable_model === \"Canton\") {\n            cantonVars.push(variable);\n          } else {\n            enums.push(variable);\n          }\n        });\n        this.setState({\n          cantonVars: cantonVars,\n          hospitalVars: hospitalVars,\n          enums: enums,\n          filtered: true\n        });\n      }\n    }\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          t = _this$props.t,\n          hasLoaded = _this$props.hasLoaded,\n          hospitals = _this$props.hospitals,\n          filterByEnum = _this$props.filterByEnum,\n          filterByType = _this$props.filterByType,\n          year = _this$props.year,\n          selectedVariable = _this$props.selectedVariable,\n          setSelectedHospitalTypes = _this$props.setSelectedHospitalTypes;\n      var _this$state = this.state,\n          hospitalVars = _this$state.hospitalVars,\n          cantonVars = _this$state.cantonVars,\n          enums = _this$state.enums;\n      var selectedCanton = {},\n          selectedHospital = {}; // setting selectedItem for Dropdowns\n\n      if (this.props.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = selectedVariable;\n        selectedCanton = undefined;\n      } else {\n        selectedCanton = selectedVariable;\n        selectedHospital = undefined;\n      }\n\n      var mapViewHospitals = React.createElement(\"div\", {\n        className: \"mapViewHospitals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(HospitalTypeFilter, {\n        hospitals: hospitals,\n        filter: filterByType,\n        selectedYear: year,\n        setTypes: setSelectedHospitalTypes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedHospital,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, t('mapView.filter')), React.createElement(FilterEditor, {\n        hospitals: hospitals,\n        filter: filterByEnum,\n        hasLoaded: hasLoaded,\n        selectedYear: year,\n        variables: enums,\n        setEnum: this.setEnum,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }));\n      var mapViewCantons = React.createElement(\"div\", {\n        className: \"mapViewCantons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedCanton,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }));\n      var mapView = React.createElement(\"div\", {\n        className: \"view1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, t('mapView.title')), React.createElement(\"div\", {\n        className: \"viewSwitcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"l1\",\n        className: this.state.mapView === 1 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, t('mapView.hospitals')), React.createElement(\"p\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"|\"), React.createElement(\"p\", {\n        id: \"l2\",\n        className: this.state.mapView === 2 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, t('mapView.cantons')))), this.state.mapView === 1 ? mapViewHospitals : mapViewCantons);\n      var tableView = React.createElement(\"div\", {\n        className: \"view2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, t('tableView.title'))));\n      var graphView = React.createElement(\"div\", {\n        className: \"view3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, t('graphView.title'))));\n      var controlPanelView;\n\n      switch (this.props.view) {\n        case 1:\n          controlPanelView = mapView;\n          break;\n\n        case 2:\n          controlPanelView = tableView;\n          break;\n\n        case 3:\n          controlPanelView = graphView;\n          break;\n\n        default:\n          controlPanelView = mapView;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tabs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"t1\",\n        className: \"tab selectedTab\",\n        onClick: this.setTabView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t2\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t3\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tabContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, controlPanelView));\n    }\n  }]);\n\n  return ControlPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js"],"names":["React","Component","DropdownMenu","FilterEditor","HospitalTypeFilter","withTranslation","ControlPanel","state","cantonVars","hospitalVars","enums","mapView","selectedEnum","undefined","filtered","fetchMapData","variable","name","variable_model","key","query","encodeURIComponent","props","fetchData","fetchEnumData","setEnum","answer","setState","selectedVariable","selectVariable","item","setTabView","view","oldView","setView","document","getElementById","classList","toggle","setMapView","variables","filter","variable_type","push","t","hasLoaded","hospitals","filterByEnum","filterByType","year","setSelectedHospitalTypes","selectedCanton","selectedHospital","mapViewHospitals","mapViewCantons","bind","tableView","graphView","controlPanelView","LocalizedControlPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css'\n\n\n\nclass ControlPanel extends Component {\n\n    state = {\n        cantonVars : [],\n        hospitalVars : [],\n        enums : [],\n        mapView : 1,\n        selectedEnum : undefined,\n        filtered : false\n    }\n\n    componentDidUpdate() {\n        if (!this.state.filtered) {\n            let cantonVars = [], hospitalVars = [], enums = [];\n\n            // filtering the different variables\n            this.props.variables.filter((variable) => {\n                if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n                    hospitalVars.push(variable);\n                } else if (variable.variable_model === \"Canton\") {\n                    cantonVars.push(variable);\n                } else {\n                    enums.push(variable);\n                }\n            });\n\n            this.setState({\n                cantonVars : cantonVars,\n                hospitalVars : hospitalVars,\n                enums : enums,\n                filtered : true\n            });\n        }\n\n    }\n\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchMapData = (variable) => {\n        const {name, variable_model} = variable;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        let query = key + \"?variables=\";\n        query += encodeURIComponent(variable.name + \"$\" + this.state.enums[7].name);\n        return this.props.fetchData(key, query);\n    }\n\n    /**\n     * Called when filtering Hospital variables.\n     * Prepares correct query to ask App.js\n     * Adds current selectedEnum to query.\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchEnumData = (variable) => {\n        const {name} = this.state.selectedEnum;\n        let query =\"hospitals?variables=\";\n        query += encodeURIComponent(variable.name + \"$\" + name + \"$\" + this.state.enums[7].name);\n        return this.props.fetchData(\"hospitals\", query);\n    }\n\n    /**\n     * Sets the state for selected Enum variable\n     * Gets data after changing it\n     * @param {Variable Object} variable The chosen variable.\n     */\n    setEnum = (variable) => {\n        let answer;\n        this.setState({\n            selectedEnum : variable\n        }, () => {\n            answer = this.fetchEnumData(this.props.selectedVariable);\n        });\n        return answer;\n    }\n\n    /**\n     * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n     * then calls fetchMapData to fetch data from the API.\n     * @param  {Variable object} item The selected variable.\n     */\n    selectVariable = (item) => {\n        this.props.selectVariable(item);\n        if (this.state.selectedEnum !== undefined) {\n            return this.fetchMapData(item);\n        } else {\n            return this.fetchEnumData(item);\n        }\n    }\n\n    /**\n     * sets the view to be displayed on the ControlPanel.\n     */\n    setTabView = (view) => {\n        let oldView = this.props.view;\n        if (oldView !== view) {\n            this.props.setView(view);\n            document.getElementById('t' + oldView).classList.toggle('selectedTab');\n            document.getElementById('t' + view).classList.toggle('selectedTab');\n        }\n    }\n\n    /**\n     * Sets the view to be displayed on the 'Maps' tab of the ControlPanel.\n     */\n    setMapView = (view) => {\n        if (this.state.view !== view) {\n            this.setState({\n                mapView : view\n            });\n        }\n    }\n\n    render() {\n\n        const {t, hasLoaded, hospitals, filterByEnum, filterByType, year, selectedVariable, setSelectedHospitalTypes} = this.props;\n        const {hospitalVars, cantonVars, enums} = this.state;\n\n        let selectedCanton = {}, selectedHospital = {};\n\n        // setting selectedItem for Dropdowns\n        if (this.props.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = selectedVariable;\n            selectedCanton = undefined;\n        } else {\n            selectedCanton = selectedVariable;\n            selectedHospital = undefined;\n        }\n\n        let mapViewHospitals = (\n            <div className=\"mapViewHospitals\">\n                <HospitalTypeFilter\n                    hospitals={hospitals}\n                    filter={filterByType}\n                    selectedYear={year}\n                    setTypes={setSelectedHospitalTypes}\n                />\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"hospitalVars\"\n                    listItems={hospitalVars}\n                    selectItem={this.selectVariable}\n                    selectedItem={selectedHospital}\n                    defaultText={t('dropDowns.variablesFallback')}\n                />\n                <p>{t('mapView.filter')}</p>\n                <FilterEditor\n                    hospitals={hospitals}\n                    filter={filterByEnum}\n                    hasLoaded={hasLoaded}\n                    selectedYear={year}\n                    variables={enums}\n                    setEnum={this.setEnum}\n                />\n            </div>\n        )\n\n        let mapViewCantons = (\n            <div className=\"mapViewCantons\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.selectVariable} selectedItem={selectedCanton} defaultText={t('dropDowns.variablesFallback')}/>\n            </div>\n        )\n\n        let mapView = (\n            <div className=\"view1\">\n                <div className=\"header\">\n                    <h1>{t('mapView.title')}</h1>\n                    <div className=\"viewSwitcher\">\n                        <p id=\"l1\" className={(this.state.mapView === 1) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 1)}>{t('mapView.hospitals')}</p>\n                        <p className=\"separator\">|</p>\n                        <p id=\"l2\" className={(this.state.mapView === 2) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 2)}>{t('mapView.cantons')}</p>\n                    </div>\n                </div>\n                {\n                    (this.state.mapView === 1)\n                    ? mapViewHospitals\n                    : mapViewCantons\n                }\n            </div>\n        );\n\n        let tableView = (\n            <div className=\"view2\">\n                <div className=\"header\">\n                    <h1>{t('tableView.title')}</h1>\n                </div>\n            </div>\n        );\n\n        let graphView = (\n            <div className=\"view3\">\n                <div className=\"header\">\n                    <h1>{t('graphView.title')}</h1>\n                </div>\n            </div>\n        );\n\n        let controlPanelView;\n        switch(this.props.view) {\n            case 1:\n                controlPanelView = mapView;\n                break;\n            case 2:\n                controlPanelView = tableView;\n                break;\n            case 3:\n                controlPanelView = graphView;\n                break;\n            default:\n                controlPanelView = mapView;\n        }\n\n        return (\n\t\t\t<div className=\"control-panel\">\n                <div className=\"tabs\">\n                    <div id=\"t1\" className=\"tab selectedTab\" onClick={this.setTabView.bind(this, 1)}></div>\n                    <div id=\"t2\" className=\"tab\" onClick={this.setTabView.bind(this, 2)}></div>\n                    <div id=\"t3\" className=\"tab\" onClick={this.setTabView.bind(this, 3)}></div>\n                </div>\n                <div className=\"tabContent\">\n                    {controlPanelView}\n                </div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;\n"]},"metadata":{},"sourceType":"module"}