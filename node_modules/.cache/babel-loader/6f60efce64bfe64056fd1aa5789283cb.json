{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js';\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      enums: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      selectedCantons: [],\n      selectedHospitals: [],\n      years: [],\n      selectedYear: \"\",\n      hasLoaded: false\n      /**\n      * Sets the selected variable as selectedVariable\n      * Fetches Cantons or Hospitals with the selectedVariable information.\n      * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n      * @param  {boolean} init Flag to see if initApiCall was called, if true: sets selectedHospitals to hospitals\n      */\n\n    };\n\n    _this.applyVariable = function (selectedVar) {\n      var name = selectedVar.name,\n          variable_model = selectedVar.variable_model;\n      var query = _this.props.i18n.language + apiRequest;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      query += key + \"?variables=\";\n      query += encodeURIComponent(selectedVar.name);\n\n      _this.apiCall(query).then(function (results) {\n        if (key === \"hospitals\") {\n          var _this$setState;\n\n          _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"selectedHospitals\", results), _this$setState));\n        } else {\n          _this.setState(_defineProperty({}, key, results));\n        }\n      }).then(function () {\n        var years = _this.getYears(_this.state.selectedVariable);\n\n        _this.setState({\n          years: years,\n          selectedYear: years[0],\n          hasLoaded: true\n        });\n      });\n    };\n\n    _this.enumHospitals = function (variable) {\n      var name = variable.name;\n      var query = _this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n      query += encodeURIComponent(_this.state.selectedVariable.name);\n      query += encodeURIComponent(name);\n      return _this.apiCall(query).then(function (results) {\n        _this.setState({\n          hospitals: results,\n          selectedHospitals: results\n        });\n      }).then(function () {\n        var years = _this.getYears(_this.state.selectedVariable);\n\n        _this.setState({\n          years: years,\n          selectedYear: years[0],\n          hasLoaded: true\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr,\n          enumVars = []; // fetches all Variables from the API\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"variables\").then(function (result) {\n        // filters out enum variables (relevant for FilterEditor)\n        enumVars = result.filter(function (obj) {\n          return obj.variable_type === \"enum\";\n        });\n\n        _this.setState({\n          variables: result,\n          enums: enumVars\n        });\n\n        _this.applyVariable(result[1]);\n      });\n    };\n\n    _this.selectVariable = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n\n      _this.applyVariable(item);\n    };\n\n    _this.checkboxSelectItem = function (object) {\n      var selectedObj = object.text ? \"selectedCantons\" : \"selectedHospitals\";\n      var newList = [];\n\n      if (_this.state[selectedObj].includes(object)) {\n        newList = _this.state[selectedObj].filter(function (checkedObj) {\n          return checkedObj !== object;\n        });\n      } else {\n        newList = [].concat(_toConsumableArray(_this.state[selectedObj]), [object]);\n      }\n\n      _this.setState(_defineProperty({}, selectedObj, newList));\n    };\n\n    _this.create2dArr = function (selectedObject) {\n      var arr = [];\n\n      for (var key in selectedObject) {\n        if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n          arr.push([key, selectedObject[key]]);\n        }\n      }\n\n      return arr;\n    };\n\n    _this.getYears = function (selectedVariable) {\n      var variable_model = selectedVariable.variable_model,\n          is_time_series = selectedVariable.is_time_series,\n          name = selectedVariable.name;\n      var selObj = variable_model === \"Hospital\" ? _this.state.selectedHospitals : _this.state.cantons;\n      var maxYears = [],\n          years;\n\n      for (var i = 0; i < selObj.length; i++) {\n        years = Object.keys(selObj[i].attributes[name]);\n        maxYears = years.length > maxYears.length ? years : maxYears;\n      }\n\n      return maxYears;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.updateSelectedHospitals = function (selectedHospitals) {\n      _this.setState({\n        selectedHospitals: selectedHospitals\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [];\n      var selectedCanton = {},\n          selectedHospital = {};\n      cantonVars = this.state.variables.filter(function (variable) {\n        return variable.variable_model === \"Canton\";\n      });\n      hospitalVars = this.state.variables.filter(function (variable) {\n        return variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\";\n      });\n\n      if (this.state.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.state.selectedVariable;\n        selectedCanton = cantonVars[0];\n      } else {\n        selectedCanton = this.state.selectedVariable;\n        selectedHospital = hospitalVars[0];\n      }\n\n      console.log(\"rendering\");\n      var t = this.props.t;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, t('variables.name_canton')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedCanton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, t('variables.name_hospital')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }), React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), this.state.years.length > 1 ? React.createElement(Slider, {\n        years: this.state.years,\n        selectedYear: this.state.selectedYear,\n        setYear: this.setYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }) : null), React.createElement(Maps, {\n        objects: this.state.selectedVariable.variable_model === \"Hospital\" ? this.state.selectedHospitals : this.state.cantons,\n        variableInfo: this.state.selectedVariable,\n        year: this.state.selectedYear,\n        hasLoaded: this.state.hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }), React.createElement(FilterEditor, {\n        hospitals: this.state.hospitals,\n        updateHospitals: this.updateSelectedHospitals,\n        fetchData: this.enumHospitals,\n        hasLoaded: this.state.hasLoaded,\n        selectedYear: this.state.selectedYear,\n        enums: this.state.enums,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","DropdownMenu","Maps","Slider","FilterEditor","withTranslation","LanguagePicker","apiURL","apiRequest","App","state","variables","enums","cantons","hospitals","selectedVariable","selectedCantons","selectedHospitals","years","selectedYear","hasLoaded","applyVariable","selectedVar","name","variable_model","query","props","i18n","language","key","encodeURIComponent","apiCall","then","results","setState","getYears","enumHospitals","variable","fetch","res","json","initApiCall","varResultArr","enumVars","result","filter","obj","variable_type","selectVariable","item","checkboxSelectItem","object","selectedObj","text","newList","includes","checkedObj","create2dArr","selectedObject","arr","push","is_time_series","selObj","maxYears","i","length","Object","keys","attributes","setYear","year","updateSelectedHospitals","cantonVars","hospitalVars","selectedCanton","selectedHospital","console","log","t","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js'\nimport FilterEditor from './components/FilterEditor/FilterEditor.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables: [],\n        enums : [],\n        cantons : [],\n        hospitals : [],\n\n        selectedVariable : {},\n        selectedCantons : [],\n        selectedHospitals : [],\n        years : [],\n        selectedYear : \"\",\n        hasLoaded : false\n    }\n\n    /**\n    * Sets the selected variable as selectedVariable\n    * Fetches Cantons or Hospitals with the selectedVariable information.\n    * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n    * @param  {boolean} init Flag to see if initApiCall was called, if true: sets selectedHospitals to hospitals\n    */\n    applyVariable = (selectedVar) => {\n        const {name, variable_model} = selectedVar;\n        let query = this.props.i18n.language + apiRequest;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        query += key + \"?variables=\";\n        query += encodeURIComponent(selectedVar.name);\n\n        this.apiCall(query).then((results) => {\n            if (key === \"hospitals\") {\n                this.setState({\n                    [key] : results,\n                    selectedHospitals : results\n                });\n            } else {\n                this.setState({\n                    [key] : results,\n                });\n            }\n        }).then(() => {\n            let years = this.getYears(this.state.selectedVariable);\n            this.setState({\n                years : years,\n                selectedYear : years[0],\n                hasLoaded : true\n            })\n        });\n    }\n\n    enumHospitals = (variable) => {\n        const {name} = variable;\n        let query = this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n        query += encodeURIComponent(this.state.selectedVariable.name);\n        query += encodeURIComponent(name);\n\n        return this.apiCall(query).then((results) => {\n            this.setState({\n                hospitals : results,\n                selectedHospitals : results\n            });\n        }).then(() => {\n            let years = this.getYears(this.state.selectedVariable);\n            this.setState({\n                years : years,\n                selectedYear : years[0],\n                hasLoaded : true\n            })\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        let varResultArr, enumVars = [];\n\n        // fetches all Variables from the API\n        this.apiCall((this.props.i18n.language + apiRequest + \"variables\")).then((result) => {\n            // filters out enum variables (relevant for FilterEditor)\n            enumVars = result.filter(obj => {\n                return obj.variable_type === \"enum\";\n            })\n            this.setState({\n                variables : result,\n                enums : enumVars\n            });\n            this.applyVariable(result[1]);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * then calls applyVariable to fetch data from the API.\n    * @param  {Variable object} item The selected variable.\n    */\n    selectVariable = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n        this.applyVariable(item);\n    }\n\n    /**\n    * Adds / removes objects to the respective List of selected canton / hospitals.\n    * @param  {Canton/Hospital object} object The object to add / remove from the list.\n    */\n    checkboxSelectItem = (object) => {\n        let selectedObj = (object.text) ? \"selectedCantons\" : \"selectedHospitals\";\n        let newList = [];\n        if (this.state[selectedObj].includes(object)) {\n            newList = this.state[selectedObj].filter(checkedObj => {\n                return checkedObj !== object;\n            });\n        } else {\n            newList = [...this.state[selectedObj], object];\n        }\n        this.setState({\n            [selectedObj] : newList\n        })\n    }\n\n    /**\n    * Creates a 2d array out of an object (Used for Table Component).\n    * @param  {Object} selectedObject The object to convert to a 2d array.\n    * @return {Array} The 2d array.\n    */\n    create2dArr = (selectedObject) => {\n        let arr = [];\n        for (var key in selectedObject) {\n            if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n                arr.push([key, selectedObject[key]]);\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * Returns list of available years depending on variable\n     * @param {Variable Object}\n     * @return {Array} The available years.\n     */\n    getYears = (selectedVariable) => {\n        const {variable_model, is_time_series, name} = selectedVariable;\n        let selObj = (variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons;\n        let maxYears = [], years;\n        for (var i = 0; i < selObj.length; i++) {\n            years = Object.keys(selObj[i].attributes[name]);\n            maxYears = (years.length > maxYears.length) ? years : maxYears\n        }\n        return maxYears;\n    }\n\n    /**\n     * [setYear description]\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year,\n        })\n    }\n\n    /**\n     * Set selectedHospitals to\n     * @param {Array} the selected hospitals.\n     */\n    updateSelectedHospitals = (selectedHospitals) => {\n        this.setState({\n            selectedHospitals : selectedHospitals\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        cantonVars = this.state.variables.filter(variable => {\n            return variable.variable_model === \"Canton\"\n        });\n\n        hospitalVars = this.state.variables.filter(variable => {\n            return (variable.variable_model === \"Hospital\") && (variable.variable_type !== \"enum\")\n        });\n\n        if (this.state.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.state.selectedVariable;\n            selectedCanton = cantonVars[0];\n        } else {\n            selectedCanton = this.state.selectedVariable;\n            selectedHospital = hospitalVars[0];\n        }\n        console.log(\"rendering\");\n        const { t } = this.props;\n\n        return (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t<div className=\"control-panel\">\n\t\t\t\t\t\t<p>{t('variables.name_canton')}</p>\n\t\t\t\t\t\t<DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.selectVariable} selectedItem={selectedCanton} />\n\t\t\t\t\t\t<p>{t('variables.name_hospital')}</p>\n\t\t\t\t\t\t<DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.selectVariable} selectedItem={selectedHospital} />\n\t\t\t\t\t\t<LanguagePicker resendInitApiCall={this.initApiCall} />\n\t\t\t\t\t</div>\n\t\t\t\t\t{\n\t\t\t\t\t\t(this.state.years.length > 1)\n\t\t\t\t\t\t? <Slider years={this.state.years} selectedYear={this.state.selectedYear} setYear={this.setYear}/>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<Maps objects={(this.state.selectedVariable.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons} variableInfo={this.state.selectedVariable} year={this.state.selectedYear} hasLoaded={this.state.hasLoaded} />\n\t\t\t\t<FilterEditor hospitals={this.state.hospitals} updateHospitals={this.updateSelectedHospitals} fetchData={this.enumHospitals} hasLoaded={this.state.hasLoaded} selectedYear={this.state.selectedYear} enums={this.state.enums} />\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}