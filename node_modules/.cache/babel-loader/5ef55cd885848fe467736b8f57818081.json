{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      var: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      selectedCantons: [],\n      selectedHospitals: [],\n      selectedYear: \"\",\n      hasLoaded: false\n      /**\n      * Fetches Cantons or Hospitals with the selected Variable information.\n      * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n      */\n\n    };\n\n    _this.applyVar = function (selectedVar) {\n      var name = selectedVar.name,\n          variable_model = selectedVar.variable_model;\n      var query = _this.props.i18n.language + apiRequest;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      query += key + \"?variables=\" + encodeURIComponent(name);\n\n      _this.apiCall(query).then(function (results) {\n        _this.setState(_defineProperty({}, key, results.map(function (obj) {\n          return obj;\n        })));\n      }).then(function () {\n        _this.setState({\n          hasLoaded: true,\n          selectedYear: _this.getYears()[0]\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr,\n          cantonResultArr = [];\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"variables\").then(function (result) {\n        varResultArr = result.map(function (obj) {\n          return obj;\n        });\n      }); // hospitals already fetched in applyVar()\n\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"cantons\").then(function (result) {\n        cantonResultArr = result.map(function (obj) {\n          return obj;\n        });\n      }).then(function () {\n        _this.setState({\n          var: varResultArr,\n          cantons: cantonResultArr,\n          selectedVariable: varResultArr[0]\n        });\n\n        _this.applyVar(varResultArr[0]);\n      });\n    };\n\n    _this.dropdownSelectItem = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n\n      _this.applyVar(item);\n    };\n\n    _this.checkboxSelectItem = function (object) {\n      var selectedObj = object.text ? \"selectedCantons\" : \"selectedHospitals\";\n      var newList = [];\n\n      if (_this.state[selectedObj].includes(object)) {\n        newList = _this.state[selectedObj].filter(function (checkedObj) {\n          return checkedObj !== object;\n        });\n      } else {\n        newList = [].concat(_toConsumableArray(_this.state[selectedObj]), [object]);\n      }\n\n      _this.setState(_defineProperty({}, selectedObj, newList));\n    };\n\n    _this.create2dArr = function (selectedObject) {\n      var arr = [];\n\n      for (var key in selectedObject) {\n        if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n          arr.push([key, selectedObject[key]]);\n        }\n      }\n\n      return arr;\n    };\n\n    _this.getYears = function () {\n      var selVar = _this.state.selectedVariable;\n      var selObj = selVar.variable_model === \"Hospital\" ? _this.state.hospitals : _this.state.cantons;\n      var years = selVar.is_time_series ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n      return years;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year,\n        hasLoaded: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [];\n      var selectedCanton = {},\n          selectedHospital = {};\n      hospitalVars = this.state.var.filter(function (variable) {\n        if (variable.variable_model === \"Hospital\") return variable;\n      });\n      cantonVars = this.state.var.filter(function (variable) {\n        if (variable.variable_model === \"Canton\") return variable;\n      });\n\n      if (this.state.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.state.selectedVariable;\n        selectedCanton = cantonVars[0];\n      } else {\n        selectedCanton = this.state.selectedVariable;\n        selectedHospital = hospitalVars[0];\n      }\n\n      var t = this.props.t;\n      years = this.state.hasLoaded ? this.getYears() : [];\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, t('variables.name_canton')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: selectedCanton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, t('variables.name_hospital')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: selectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }), React.createElement(LanguagePicker, {\n        resendInitApiCall: this.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), years.length > 1 ? React.createElement(Slider, {\n        years: years,\n        selectedYear: this.state.selectedYear,\n        setYear: this.setYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }) : null), React.createElement(Maps, {\n        objects: this.state.selectedVariable.variable_model === \"Hospital\" ? this.state.hospitals : this.state.cantons,\n        variableInfo: this.state.selectedVariable,\n        year: this.state.selectedYear,\n        hasLoaded: this.state.hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","DropdownMenu","Maps","Slider","withTranslation","LanguagePicker","apiURL","apiRequest","App","state","var","cantons","hospitals","selectedVariable","selectedCantons","selectedHospitals","selectedYear","hasLoaded","applyVar","selectedVar","name","variable_model","query","props","i18n","language","key","encodeURIComponent","apiCall","then","results","setState","map","obj","getYears","fetch","res","json","initApiCall","varResultArr","cantonResultArr","result","dropdownSelectItem","item","checkboxSelectItem","object","selectedObj","text","newList","includes","filter","checkedObj","create2dArr","selectedObject","arr","push","selVar","selObj","years","is_time_series","Object","keys","attributes","setYear","year","cantonVars","hospitalVars","selectedCanton","selectedHospital","variable","t","length","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from './components/DropdownMenu/DropdownMenu.js';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js'\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from './components/LanguagePicker/LanguagePicker.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        var: [],\n        cantons : [],\n        hospitals : [],\n\n        selectedVariable : {},\n        selectedCantons : [],\n        selectedHospitals : [],\n        selectedYear : \"\",\n        hasLoaded : false\n    }\n\n    /**\n    * Fetches Cantons or Hospitals with the selected Variable information.\n    * @param  {Variable Object} selectedVar The selected Variable to apply to Hospitals or Cantons.\n    */\n    applyVar = (selectedVar) => {\n        const {name, variable_model} = selectedVar;\n\n        let query = this.props.i18n.language + apiRequest;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        query += key + \"?variables=\" + encodeURIComponent(name);\n\n        this.apiCall(query).then((results) => {\n            this.setState({\n                [key] : results.map(obj => {\n                    return obj;\n                }),\n            });\n        }).then(() => {\n            this.setState({\n                hasLoaded : true,\n                selectedYear : this.getYears()[0]\n            })\n        })\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with several calls to the API.\n    */\n    initApiCall = () => {\n        let varResultArr, cantonResultArr = [];\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"variables\")).then((result) => {\n            varResultArr = result.map(obj => {\n                return obj;\n            })\n        });\n\n        // hospitals already fetched in applyVar()\n\n        this.apiCall((this.props.i18n.language + apiRequest + \"cantons\")).then((result) => {\n            cantonResultArr = result.map(obj => {\n                return obj;\n            })\n        }).then(() => {\n            this.setState({\n                var : varResultArr,\n                cantons : cantonResultArr,\n                selectedVariable : varResultArr[0]\n            });\n            this.applyVar(varResultArr[0]);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * then calls applyVar to fetch data from the API.\n    * @param  {Variable object} item The selected variable.\n    */\n    dropdownSelectItem = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n        this.applyVar(item);\n    }\n\n    /**\n    * Adds / removes objects to the respective List of selected canton / hospitals.\n    * @param  {Canton/Hospital object} object The object to add / remove from the list.\n    */\n    checkboxSelectItem = (object) => {\n        let selectedObj = (object.text) ? \"selectedCantons\" : \"selectedHospitals\";\n        let newList = [];\n        if (this.state[selectedObj].includes(object)) {\n            newList = this.state[selectedObj].filter(checkedObj => {\n                return checkedObj !== object;\n            });\n        } else {\n            newList = [...this.state[selectedObj], object];\n        }\n        this.setState({\n            [selectedObj] : newList\n        })\n    }\n\n    /**\n    * Creates a 2d array out of an object (Used for Table Component).\n    * @param  {Object} selectedObject The object to convert to a 2d array.\n    * @return {Array} The 2d array.\n    */\n    create2dArr = (selectedObject) => {\n        let arr = [];\n        for (var key in selectedObject) {\n            if (typeof selectedObject[key] !== 'object' && selectedObject[key] !== null) {\n                arr.push([key, selectedObject[key]]);\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * Returns list of available years depending on variable\n     * @return {Array} The available years.\n     */\n    getYears = () => {\n        let selVar = this.state.selectedVariable;\n        let selObj = (selVar.variable_model === \"Hospital\") ? this.state.hospitals : this.state.cantons;\n        let years = (selVar.is_time_series) ? Object.keys(selObj[0].attributes[selVar.name]) : [\"Aktuell\"];\n        return years;\n    }\n\n    /**\n     * [setYear description]\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year,\n            hasLoaded : true\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        hospitalVars = this.state.var.filter(variable => {\n            if (variable.variable_model === \"Hospital\")\n            return variable\n        })\n        cantonVars = this.state.var.filter(variable => {\n            if (variable.variable_model === \"Canton\")\n            return variable\n        })\n\n        if (this.state.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.state.selectedVariable;\n            selectedCanton = cantonVars[0];\n        } else {\n            selectedCanton = this.state.selectedVariable;\n            selectedHospital = hospitalVars[0];\n        }\n\n        const { t } = this.props;\n        years = (this.state.hasLoaded) ? this.getYears() : [];\n\n        return (\n\n            <div className=\"App\">\n                <div className=\"grid-container\">\n                    <div className=\"control-panel\">\n                        <p>{t('variables.name_canton')}</p>\n                        <DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.dropdownSelectItem} selectedItem={selectedCanton} />\n                        <p>{t('variables.name_hospital')}</p>\n                        <DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.dropdownSelectItem} selectedItem={selectedHospital} />\n                        <LanguagePicker resendInitApiCall={this.initApiCall} />\n                    </div>\n                    {\n                        (years.length > 1)\n                        ? <Slider years={years} selectedYear={this.state.selectedYear} setYear={this.setYear}/>\n                        : null\n                    }\n                </div>\n                <Maps objects={(this.state.selectedVariable.variable_model === \"Hospital\") ? this.state.hospitals : this.state.cantons} variableInfo={this.state.selectedVariable} year={this.state.selectedYear} hasLoaded={this.state.hasLoaded} />\n            </div>\n\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}