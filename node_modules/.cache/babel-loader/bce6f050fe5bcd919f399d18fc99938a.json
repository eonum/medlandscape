{"ast":null,"code":"import _toConsumableArray from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js';\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js';\nimport CentralPanel from './components/CentralPanel/CentralPanel.js';\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\nvar apiURL = \"https://qm1.ch/\";\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      variables: [],\n      enums: [],\n      cantons: [],\n      hospitals: [],\n      selectedVariable: {},\n      selectedCantons: [],\n      selectedHospitals: [],\n      years: [],\n      selectedYear: \"\",\n      view: 1,\n      hasLoaded: false,\n      tableDataLoaded: false\n      /**\n      * Calls the API with specific query\n      * @param {String} key String value that is either hospitals or cantons.\n      * @param  {String} query The specific query to use for the API call.\n      */\n\n    };\n\n    _this.applyVariables = function (key, query) {\n      return _this.apiCall(query).then(function (results) {\n        if (key === \"hospitals\") {\n          var _this$setState;\n\n          _this.setState((_this$setState = {}, _defineProperty(_this$setState, key, results), _defineProperty(_this$setState, \"selectedHospitals\", results), _this$setState));\n        } else {\n          _this.setState(_defineProperty({}, key, results));\n        }\n      }).then(function () {\n        var years = _this.getYears(_this.state.selectedVariable);\n\n        _this.setState({\n          years: years,\n          selectedYear: years[0],\n          hasLoaded: true\n        });\n      });\n    };\n\n    _this.apiCall = function (query) {\n      return fetch(apiURL + query).then(function (res) {\n        return res.json();\n      });\n    };\n\n    _this.initApiCall = function () {\n      var varResultArr = []; // fetches all Variables from the API\n\n      _this.apiCall(_this.props.i18n.language + apiRequest + \"variables\").then(function (result) {\n        _this.setState({\n          variables: result\n        });\n\n        _this.selectVariable(result[1]);\n\n        var query = _this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n        query += encodeURIComponent(result[1].name);\n\n        _this.applyVariables(\"cantons\", query);\n      });\n    };\n\n    _this.selectVariable = function (item) {\n      _this.setState({\n        selectedVariable: item,\n        hasLoaded: false\n      });\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.checkboxSelectItem = function (object) {\n      var selectedObj = object.text ? \"selectedCantons\" : \"selectedHospitals\";\n      var newList = [];\n\n      if (_this.state[selectedObj].includes(object)) {\n        newList = _this.state[selectedObj].filter(function (checkedObj) {\n          return checkedObj !== object;\n        });\n      } else {\n        newList = [].concat(_toConsumableArray(_this.state[selectedObj]), [object]);\n      }\n\n      _this.setState(_defineProperty({}, selectedObj, newList));\n    };\n\n    _this.getYears = function (selectedVariable) {\n      var variable_model = selectedVariable.variable_model,\n          is_time_series = selectedVariable.is_time_series,\n          name = selectedVariable.name;\n      var selObj = variable_model === \"Hospital\" ? _this.state.selectedHospitals : _this.state.cantons;\n      var maxYears = [],\n          years;\n\n      for (var i = 0; i < selObj.length; i++) {\n        years = Object.keys(selObj[i].attributes[name]);\n        maxYears = years.length > maxYears.length ? years : maxYears;\n      }\n\n      return maxYears;\n    };\n\n    _this.setYear = function (year) {\n      _this.setState({\n        selectedYear: year\n      });\n    };\n\n    _this.setView = function (view) {\n      _this.setState({\n        view: view\n      });\n    };\n\n    _this.updateSelectedHospitals = function (selectedHospitals) {\n      _this.setState({\n        selectedHospitals: selectedHospitals\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initApiCall();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Maps, {\n        objects: this.state.selectedVariable.variable_model === \"Hospital\" ? this.state.selectedHospitals : this.state.cantons,\n        variableInfo: this.state.selectedVariable,\n        year: this.state.selectedYear,\n        hasLoaded: this.state.hasLoaded,\n        view: this.state.view,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(ControlPanel, {\n        view: this.state.view,\n        setView: this.setView,\n        hospitals: this.state.hospitals,\n        selectVariable: this.selectVariable,\n        variables: this.state.variables,\n        resendInitApiCall: this.initApiCall,\n        fetchData: this.applyVariables,\n        updateHospitals: this.updateSelectedHospitals,\n        year: this.state.selectedYear,\n        hasLoaded: this.state.hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), this.state.years.length > 1 ? React.createElement(Slider, {\n        years: this.state.years,\n        selectedYear: this.state.selectedYear,\n        setYear: this.setYear,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }) : null, React.createElement(CentralPanel, {\n        view: this.state.view,\n        variables: this.state.variables,\n        hospitals: this.state.hospitals,\n        hasLoaded: this.state.hasLoaded,\n        fetchData: this.applyVariables,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/App.js"],"names":["React","Component","Maps","Slider","withTranslation","ControlPanel","CentralPanel","InteractiveTable","apiURL","apiRequest","App","state","variables","enums","cantons","hospitals","selectedVariable","selectedCantons","selectedHospitals","years","selectedYear","view","hasLoaded","tableDataLoaded","applyVariables","key","query","apiCall","then","results","setState","getYears","fetch","res","json","initApiCall","varResultArr","props","i18n","language","result","selectVariable","encodeURIComponent","name","item","tableDataGenerated","checkboxSelectItem","object","selectedObj","text","newList","includes","filter","checkedObj","variable_model","is_time_series","selObj","maxYears","i","length","Object","keys","attributes","setYear","year","setView","updateSelectedHospitals","LocalizedApp"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Maps from './components/Maps/Maps.js';\nimport Slider from './components/Slider/Slider.js'\nimport './App.css';\nimport { withTranslation } from 'react-i18next';\nimport ControlPanel from './components/ControlPanel/ControlPanel.js'\nimport CentralPanel from './components/CentralPanel/CentralPanel.js'\nimport InteractiveTable from './components/InteractiveTable/InteractiveTable.js';\n\nconst apiURL = \"https://qm1.ch/\";\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass App extends Component {\n\n    state = {\n        variables: [],\n        enums : [],\n        cantons : [],\n        hospitals : [],\n\n        selectedVariable : {},\n        selectedCantons : [],\n        selectedHospitals : [],\n        years : [],\n        selectedYear : \"\",\n        view : 1,\n        hasLoaded : false,\n        tableDataLoaded: false\n    }\n\n    /**\n    * Calls the API with specific query\n    * @param {String} key String value that is either hospitals or cantons.\n    * @param  {String} query The specific query to use for the API call.\n    */\n    applyVariables = (key, query) => {\n        return this.apiCall(query).then((results) => {\n            if (key === \"hospitals\") {\n                this.setState({\n                    [key] : results,\n                    selectedHospitals : results\n                });\n            } else {\n                this.setState({\n                    [key] : results,\n                });\n            }\n        }).then(() => {\n            let years = this.getYears(this.state.selectedVariable);\n            this.setState({\n                years : years,\n                selectedYear : years[0],\n                hasLoaded : true\n            })\n        });\n    }\n\n    /**\n    * Sends request to the API.\n    * @param  {String} query The request.\n    * @return {Promise} A Promise Object of the requested API call, results parsed as JSON.\n    */\n    apiCall = (query) => {\n        return fetch(apiURL + query).then(res => res.json());\n    }\n\n    /**\n    * Initialises the state variables with a call to the API.\n    */\n    initApiCall = () => {\n        let varResultArr = [];\n\n        // fetches all Variables from the API\n        this.apiCall((this.props.i18n.language + apiRequest + \"variables\")).then((result) => {\n            this.setState({\n                variables : result,\n            });\n            this.selectVariable(result[1]);\n            let query = this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n            query += encodeURIComponent(result[1].name);\n            this.applyVariables(\"cantons\", query);\n        });\n    }\n\n    /**\n    * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n    * then calls applyVariables to fetch data from the API.\n    * @param  {Variable object} item The selected variable.\n    */\n    selectVariable = (item) => {\n        this.setState({\n            selectedVariable : item,\n            hasLoaded : false\n        });\n    }\n\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\n    /**\n    * Adds / removes objects to the respective List of selected canton / hospitals.\n    * @param  {Canton/Hospital object} object The object to add / remove from the list.\n    */\n    checkboxSelectItem = (object) => {\n        let selectedObj = (object.text) ? \"selectedCantons\" : \"selectedHospitals\";\n        let newList = [];\n        if (this.state[selectedObj].includes(object)) {\n            newList = this.state[selectedObj].filter(checkedObj => {\n                return checkedObj !== object;\n            });\n        } else {\n            newList = [...this.state[selectedObj], object];\n        }\n        this.setState({\n            [selectedObj] : newList\n        })\n    }\n\n    /**\n     * Returns list of available years depending on variable\n     * @param {Variable Object}\n     * @return {Array} The available years.\n     */\n    getYears = (selectedVariable) => {\n        const {variable_model, is_time_series, name} = selectedVariable;\n        let selObj = (variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons;\n        let maxYears = [], years;\n        for (var i = 0; i < selObj.length; i++) {\n            years = Object.keys(selObj[i].attributes[name]);\n            maxYears = (years.length > maxYears.length) ? years : maxYears\n        }\n        return maxYears;\n    }\n\n    /**\n     * Setter for the selectedYear state variable.\n     * @param {String} year The selected year.\n     */\n    setYear = (year) => {\n        this.setState({\n            selectedYear : year\n        })\n    }\n\n    /**\n     * Setter for the view state variable.\n     * @param {int} view The selected view.\n     */\n    setView = (view) => {\n        this.setState({\n            view : view\n        })\n    }\n\n    /**\n     * Set selectedHospitals to\n     * @param {Array} the selected hospitals.\n     */\n    updateSelectedHospitals = (selectedHospitals) => {\n        this.setState({\n            selectedHospitals : selectedHospitals\n        })\n    }\n\n    componentDidMount() {\n        this.initApiCall();\n    }\n\n    render() {\n        return (\n\t\t\t<div className=\"App\">\n                <Maps\n                    objects={(this.state.selectedVariable.variable_model === \"Hospital\") ? this.state.selectedHospitals : this.state.cantons}\n                    variableInfo={this.state.selectedVariable}\n                    year={this.state.selectedYear}\n                    hasLoaded={this.state.hasLoaded}\n                    view={this.state.view}\n                />\n\t\t\t\t<div className=\"grid-container\">\n                    <ControlPanel\n                        view={this.state.view}\n                        setView={this.setView}\n                        hospitals={this.state.hospitals}\n                        selectVariable={this.selectVariable}\n                        variables={this.state.variables}\n                        resendInitApiCall={this.initApiCall}\n                        fetchData={this.applyVariables}\n                        updateHospitals={this.updateSelectedHospitals}\n                        year={this.state.selectedYear}\n                        hasLoaded={this.state.hasLoaded}\n                    />\n\t\t\t\t\t{\n\t\t\t\t\t\t(this.state.years.length > 1)\n\t\t\t\t\t\t? <Slider years={this.state.years} selectedYear={this.state.selectedYear} setYear={this.setYear}/>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n                    <CentralPanel\n                        view={this.state.view}\n                        variables={this.state.variables}\n\t\t\t\t\t\thospitals={this.state.hospitals}\n                        hasLoaded={this.state.hasLoaded}\n                        fetchData={this.applyVariables}\n                    />\n\t\t\t\t</div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedApp = withTranslation()(App);\nexport default LocalizedApp;\n"]},"metadata":{},"sourceType":"module"}