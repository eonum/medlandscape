{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/CentralPanel/CentralPanel.js\";\nimport React, { Component } from 'react';\nimport InteractiveTable from '../InteractiveTable/InteractiveTable.js';\nimport BoxPlot from '../Graphs/BoxPlot.js';\nimport LinearRegression from '../Graphs/LinearRegression.js';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport './centralPanel.css';\n/**\n* CentralPanel-Component that contains a div which is used to displayed\n* the InteractiveTable, BoxPlot and LinearRegression\n*/\n\nvar CentralPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CentralPanel, _Component);\n\n  function CentralPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CentralPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CentralPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tableDataLoaded: false\n      /**\n          * requestTableData - requests the Data tha is going to be used in the\n          *      table component, depending on the selected Variable\n          *\n          * @param {array} vars variables to request data of\n          * @param {function} callback function that is called when request finished\n          */\n\n    };\n\n    _this.requestTableData = function (vars, callback) {\n      var requestedVars = \"\";\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = vars[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var variable = _step.value;\n          requestedVars += variable.name + '$';\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (_this.props.view === 3) {\n        requestedVars += \"Typ\";\n      } else {\n        requestedVars = requestedVars.substring(0, requestedVars.length - 1);\n      }\n\n      requestedVars = encodeURIComponent(requestedVars);\n      var query = \"hospitals?variables=\" + requestedVars;\n\n      _this.props.fetchData(query).then(function () {\n        _this.setState({\n          tableDataLoaded: true\n        }, function () {\n          if (callback) {\n            callback();\n          }\n        });\n      });\n    };\n\n    _this.requestLinRegData = function (vars) {\n      var requestedVars = \"\";\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = vars[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var variable = _step2.value;\n          requestedVars += variable.name + '$';\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      requestedVars += \"Typ\";\n      requestedVars = encodeURIComponent(requestedVars);\n      var query = \"hospitals?variables=\" + requestedVars;\n\n      _this.props.fetchData(query);\n    };\n\n    _this.tableDataGenerated = function () {\n      _this.setState({\n        tableDataLoaded: false\n      });\n    };\n\n    _this.retriggerTableGeneration = function () {\n      _this.setState({\n        tableDataLoaded: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CentralPanel, [{\n    key: \"render\",\n\n    /**\n     * render - renders the component\n     *\n     * @return {JSX}  jsx of the component\n     */\n    value: function render() {\n      var _this$props = this.props,\n          objects = _this$props.objects,\n          hasLoaded = _this$props.hasLoaded,\n          selectedVariable = _this$props.selectedVariable,\n          year = _this$props.year,\n          setVariable = _this$props.setVariable,\n          setCSVData = _this$props.setCSVData;\n      var tableDataLoaded = this.state.tableDataLoaded;\n      var tableVars = this.props.variables.filter(function (variable) {\n        return variable.variable_model === \"Hospital\";\n      });\n      var regressionVars = tableVars.filter(function (variable) {\n        return variable.variable_type !== \"enum\" && variable.variable_type !== \"string\";\n      });\n      var tableView = React.createElement(InteractiveTable, {\n        variables: tableVars,\n        hospitals: objects,\n        requestData: this.requestTableData,\n        tableDataLoaded: tableDataLoaded,\n        tableDataGenerated: this.tableDataGenerated,\n        retriggerTableGeneration: this.retriggerTableGeneration,\n        setCSVData: setCSVData,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      });\n      var boxPlot = React.createElement(BoxPlot, {\n        objects: objects,\n        selectedVariable: selectedVariable,\n        year: year,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      });\n      var linReg = React.createElement(LinearRegression, {\n        hospitals: objects,\n        selectedVariable: selectedVariable,\n        setVariable: setVariable,\n        requestData: this.requestLinRegData,\n        variables: regressionVars,\n        year: year,\n        hasLoaded: hasLoaded,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      });\n      var graphView = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, this.props.graphView === 1 ? boxPlot : linReg);\n      var mainView;\n\n      switch (this.props.view) {\n        case 2:\n          mainView = tableView;\n          break;\n\n        case 3:\n          mainView = graphView;\n          break;\n\n        default:\n          mainView = null;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"central-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, mainView);\n    }\n  }]);\n\n  return CentralPanel;\n}(Component);\n/**\n * PropTypes:\n * view:\n * graphView:\n * variables: An array of all the variable objects.\n * hasLoaded: A boolean that signifies that all data has been fetched by the API and is ready to be manipulated.\n * fetchData: A function that is called when new data is needed from the API.\n * objects: An array of hospital objects.\n * setVariable: A function that passes the newly selected Variable to the parent component.\n * selectedVariable: A variable object (or array of two objects) that represent the currently selected Variable.\n * year: The currently selected year.\n */\n\n\nCentralPanel.propTypes = {\n  view: PropTypes.number.isRequired,\n  graphView: PropTypes.number.isRequired,\n  variables: PropTypes.array.isRequired,\n  hasLoaded: PropTypes.bool.isRequired,\n  fetchData: PropTypes.func.isRequired,\n  objects: PropTypes.array.isRequired,\n  setVariable: PropTypes.func.isRequired,\n  selectedVariable: PropTypes.object.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  setCSVData: PropTypes.func.isRequired,\n  year: PropTypes.string.isRequired\n  /**\n   * Convert the component using withTranslation() to have access to t() function\n   *  and other i18next props. Then export it.\n   */\n\n};\nvar LocalizedCentralPanel = withTranslation()(CentralPanel);\nexport default LocalizedCentralPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/CentralPanel/CentralPanel.js"],"names":["React","Component","InteractiveTable","BoxPlot","LinearRegression","PropTypes","withTranslation","CentralPanel","state","tableDataLoaded","requestTableData","vars","callback","requestedVars","variable","name","props","view","substring","length","encodeURIComponent","query","fetchData","then","setState","requestLinRegData","tableDataGenerated","retriggerTableGeneration","objects","hasLoaded","selectedVariable","year","setVariable","setCSVData","tableVars","variables","filter","variable_model","regressionVars","variable_type","tableView","boxPlot","linReg","graphView","mainView","propTypes","number","isRequired","array","bool","func","object","oneOfType","string","LocalizedCentralPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport InteractiveTable from '../InteractiveTable/InteractiveTable.js';\nimport BoxPlot from '../Graphs/BoxPlot.js';\nimport LinearRegression from '../Graphs/LinearRegression.js';\nimport PropTypes from 'prop-types';\nimport { withTranslation } from 'react-i18next';\nimport './centralPanel.css'\n\n/**\n* CentralPanel-Component that contains a div which is used to displayed\n* the InteractiveTable, BoxPlot and LinearRegression\n*/\nclass CentralPanel extends Component {\n\n    state = {\n        tableDataLoaded : false\n    }\n\n\t/**\n     * requestTableData - requests the Data tha is going to be used in the\n     *      table component, depending on the selected Variable\n     *\n     * @param {array} vars variables to request data of\n     * @param {function} callback function that is called when request finished\n     */\n    requestTableData = (vars, callback) => {\n        let requestedVars = \"\";\n\n        for (let variable of vars) {\n            requestedVars += variable.name + '$';\n        }\n\n        if (this.props.view === 3) {\n            requestedVars += \"Typ\";\n        } else {\n            requestedVars = requestedVars.substring(0, requestedVars.length - 1);\n        }\n\n        requestedVars = encodeURIComponent(requestedVars);\n\n        let query = \"hospitals?variables=\" + requestedVars;\n        this.props.fetchData(query).then(() => {\n            this.setState({\n                tableDataLoaded : true\n            }, () => { if (callback) { callback(); }});\n        })\n    }\n\n    /**\n     *  requestLinRegData - requests the Data tha is going to be used in the\n     *      table component, depending on the selected Variable\n     *\n     * @param {array} vars variables to request data of\n     */\n    requestLinRegData = (vars) => {\n        let requestedVars = \"\";\n\n        for (let variable of vars) {\n            requestedVars += variable.name + '$';\n        }\n        requestedVars += \"Typ\";\n        requestedVars = encodeURIComponent(requestedVars);\n        let query = \"hospitals?variables=\" + requestedVars;\n        this.props.fetchData(query);\n    }\n\n\t/**\n     *  tableDataGenerated - sets the state of the generated to \"not loaded\"\n     */\n    tableDataGenerated = () => {\n        this.setState({\n            tableDataLoaded : false\n        });\n    }\n\t/*\n    * retriggerTableGeneration - sets the state of the generated to \"loaded\"\n    *   informs the table to regenerate\n    */\n    retriggerTableGeneration = () => {\n        this.setState({\n            tableDataLoaded : true\n        });\n    }\n\n    /**\n     * render - renders the component\n     *\n     * @return {JSX}  jsx of the component\n     */\n    render() {\n        const { objects, hasLoaded, selectedVariable, year, setVariable, setCSVData} = this.props;\n        const { tableDataLoaded, } = this.state;\n        let tableVars = this.props.variables.filter((variable) => {\n            return (variable.variable_model === \"Hospital\");\n        });\n        let regressionVars = tableVars.filter((variable) => {\n            return(variable.variable_type !== \"enum\" && variable.variable_type !== \"string\");\n        })\n        let tableView = (\n            <InteractiveTable\n                variables={tableVars}\n                hospitals={objects}\n                requestData={this.requestTableData}\n                tableDataLoaded={tableDataLoaded}\n                tableDataGenerated={this.tableDataGenerated}\n                retriggerTableGeneration={this.retriggerTableGeneration}\n                setCSVData={setCSVData}\n                hasLoaded={hasLoaded}\n            />\n        );\n\n        let boxPlot = (\n            <BoxPlot\n                objects={objects}\n                selectedVariable={selectedVariable}\n                year={year}\n                hasLoaded={hasLoaded}\n            />\n        )\n\n        let linReg = (\n            <LinearRegression\n                hospitals={objects}\n                selectedVariable={selectedVariable}\n                setVariable={setVariable}\n                requestData={this.requestLinRegData}\n                variables={regressionVars}\n                year={year}\n                hasLoaded={hasLoaded}\n            />\n        )\n\n\t\tlet graphView = (\n\t\t\t<div>\n                {\n                    (this.props.graphView === 1)\n                    ? boxPlot\n                    : linReg\n                }\n\t\t\t</div>\n\t\t);\n\n        let mainView;\n        switch (this.props.view) {\n            case 2:\n                mainView = tableView;\n                break;\n            case 3:\n                mainView = graphView;\n                break;\n            default:\n                mainView = null;\n        }\n\n        return (\n\t\t\t<div className={\"central-panel\"}>\n            \t{mainView}\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * PropTypes:\n * view:\n * graphView:\n * variables: An array of all the variable objects.\n * hasLoaded: A boolean that signifies that all data has been fetched by the API and is ready to be manipulated.\n * fetchData: A function that is called when new data is needed from the API.\n * objects: An array of hospital objects.\n * setVariable: A function that passes the newly selected Variable to the parent component.\n * selectedVariable: A variable object (or array of two objects) that represent the currently selected Variable.\n * year: The currently selected year.\n */\n\nCentralPanel.propTypes = {\n\tview: PropTypes.number.isRequired,\n    graphView: PropTypes.number.isRequired,\n    variables: PropTypes.array.isRequired,\n\thasLoaded: PropTypes.bool.isRequired,\n    fetchData: PropTypes.func.isRequired,\n    objects: PropTypes.array.isRequired,\n    setVariable: PropTypes.func.isRequired,\n    selectedVariable: PropTypes.object.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n    setCSVData: PropTypes.func.isRequired,\n    year: PropTypes.string.isRequired,\n}\n\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedCentralPanel = withTranslation()(CentralPanel);\nexport default LocalizedCentralPanel;\n"]},"metadata":{},"sourceType":"module"}