{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/FilterEditor/FilterEditor.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport CheckboxList from '../CheckboxList/CheckboxList.js';\nimport HospitalTypeFilter from './HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './FilterEditor.css';\n/**\n * Example component to show how to work with react-i18next localization\n */\n\nvar FilterEditor =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FilterEditor, _Component);\n\n  function FilterEditor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, FilterEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FilterEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedEnum: undefined,\n      selectedValues: [],\n      titles: []\n    };\n\n    _this.dropdownSelectItem = function (item) {\n      var titles = [];\n\n      for (var i = 0; i < item.values.length; i++) {\n        titles.push(item.values[i] + \": \" + item.values_text[i]);\n      }\n\n      console.log(\"created titles:\");\n      console.log(titles);\n\n      _this.setState({\n        selectedEnum: item,\n        selectedValues: [],\n        mappingObject: titles\n      });\n\n      _this.props.setEnum(item);\n    };\n\n    _this.checkboxSelectItem = function (item) {\n      // removes item if in selectedValues\n      var values = _this.state.selectedValues.filter(function (value) {\n        return value !== item;\n      }); // adds item if not in selectedValues\n\n\n      if (values.length === _this.state.selectedValues.length) {\n        values.push(item);\n      }\n\n      _this.setState({\n        selectedValues: values\n      });\n\n      _this.filter(values);\n    };\n\n    _this.filter = function (selectedValues) {\n      var _this$props = _this.props,\n          selectedYear = _this$props.selectedYear,\n          hospitals = _this$props.hospitals;\n      var name = _this.state.selectedEnum.name;\n      var filteredHospitals = hospitals.filter(function (hospital) {\n        // Enum variables to be filtered with \"OR\"\n        if (name === \"KT\" || name === \"LA\" || name === \"RForm\" || name === \"Typ\") {\n          var counter = 0;\n\n          if (selectedYear in hospital.attributes[name]) {\n            var values = hospital.attributes[name][selectedYear];\n\n            for (var i = 0; i < selectedValues.length; i++) {\n              if (values.includes(selectedValues[i])) {\n                counter++;\n              }\n            }\n          }\n\n          if (counter === 0) {\n            return false;\n          }\n        } else {\n          // Enum variables to be filtered with \"AND\"\n          if (selectedYear in hospital.attributes[name]) {\n            var _values = hospital.attributes[name][selectedYear];\n\n            for (var _i = 0; _i < selectedValues.length; _i++) {\n              if (!_values.includes(selectedValues[_i])) {\n                return false;\n              }\n            }\n          } else {\n            return false;\n          }\n        }\n\n        return true;\n      });\n\n      _this.props.updateHospitals(filteredHospitals);\n    };\n\n    return _this;\n  }\n\n  _createClass(FilterEditor, [{\n    key: \"render\",\n    value: function render() {\n      var t = this.props.t;\n      return React.createElement(\"div\", {\n        className: \"filter-editor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Spitaltyp\"), !!this.props.variables[7] ? React.createElement(HospitalTypeFilter, {\n        item: this.props.variables[7],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }) : null, React.createElement(DropdownMenu, {\n        id: \"filterDropDown\",\n        listItems: this.props.variables,\n        selectItem: this.dropdownSelectItem,\n        selectedItem: this.state.selectedEnum,\n        defaultText: t('dropDowns.filterFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), this.state.selectedEnum !== undefined ? React.createElement(\"div\", {\n        className: \"filterCheckbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, t('mapView.checkbox')), React.createElement(CheckboxList, {\n        items: this.state.selectedEnum.values,\n        checkboxSelectItem: this.checkboxSelectItem,\n        titles: this.state.titles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })) : null);\n    }\n  }]);\n\n  return FilterEditor;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedFilterEditor = withTranslation()(FilterEditor);\nexport default LocalizedFilterEditor;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/FilterEditor/FilterEditor.js"],"names":["React","Component","DropdownMenu","CheckboxList","HospitalTypeFilter","withTranslation","FilterEditor","state","selectedEnum","undefined","selectedValues","titles","dropdownSelectItem","item","i","values","length","push","values_text","console","log","setState","mappingObject","props","setEnum","checkboxSelectItem","filter","value","selectedYear","hospitals","name","filteredHospitals","hospital","counter","attributes","includes","updateHospitals","t","variables","LocalizedFilterEditor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport CheckboxList from '../CheckboxList/CheckboxList.js';\nimport HospitalTypeFilter from './HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './FilterEditor.css'\n\n/**\n * Example component to show how to work with react-i18next localization\n */\nclass FilterEditor extends Component {\n\tstate = {\n        selectedEnum : undefined,\n        selectedValues : [],\n\t\ttitles : [],\n\t};\n\n\t/**\n    *\n    */\n    dropdownSelectItem = (item) => {\n\t\tlet titles = [];\n\t\tfor (let i = 0; i < item.values.length; i++)\n\t\t\ttitles.push(item.values[i] + \": \" + item.values_text[i]);\n\n\t\tconsole.log(\"created titles:\");\n\t\tconsole.log(titles);\n\n        this.setState({\n            selectedEnum : item,\n            selectedValues : [],\n            mappingObject : titles,\n        });\n        this.props.setEnum(item);\n\t}\n\n    checkboxSelectItem = (item) => {\n        // removes item if in selectedValues\n        let values = this.state.selectedValues.filter((value) => {\n            return (value !== item)\n        });\n\n        // adds item if not in selectedValues\n        if (values.length === this.state.selectedValues.length) {\n            values.push(item);\n        }\n\n        this.setState({\n            selectedValues : values\n        })\n\n\t\tthis.filter(values);\n    }\n\n\tfilter = (selectedValues) => {\n\t\tconst {selectedYear, hospitals} = this.props;\n        const {name} = this.state.selectedEnum;\n\n\t\tlet filteredHospitals = hospitals.filter((hospital) => {\n            // Enum variables to be filtered with \"OR\"\n            if (name === \"KT\" || name === \"LA\" || name === \"RForm\" || name === \"Typ\") {\n                let counter = 0;\n                if (selectedYear in hospital.attributes[name]) {\n                    const values = hospital.attributes[name][selectedYear];\n                    for (let i = 0; i < selectedValues.length; i++) {\n                        if (values.includes(selectedValues[i])) {\n                            counter++;\n                        }\n                    }\n                }\n                if (counter === 0) {\n                    return false;\n                }\n            } else { // Enum variables to be filtered with \"AND\"\n                if (selectedYear in hospital.attributes[name]) {\n                    const values = hospital.attributes[name][selectedYear];\n                    for (let i = 0; i < selectedValues.length; i++) {\n                        if (!values.includes(selectedValues[i])) {\n                            return false;\n                        }\n                    }\n                } else {\n                    return false;\n                }\n            }\n\t\t\treturn true;\n\t\t});\n\n\t\tthis.props.updateHospitals(filteredHospitals);\n\t}\n\n    render () {\n        const { t } = this.props;\n        return (\n\t\t\t<div className=\"filter-editor\">\n\t\t\t\t<p>Spitaltyp</p>\n\t\t\t\t{\n\t\t\t\t\t(!!this.props.variables[7]) ? <HospitalTypeFilter item={this.props.variables[7]} /> : null\n\t\t\t\t}\n\t\t\t\t<DropdownMenu id=\"filterDropDown\" listItems={this.props.variables} selectItem={this.dropdownSelectItem} selectedItem={this.state.selectedEnum} defaultText={t('dropDowns.filterFallback')}/>\n                {\n\t\t\t\t\t(this.state.selectedEnum !== undefined)\n\t\t\t\t\t?\n\t\t\t\t\t<div className=\"filterCheckbox\">\n\t\t\t\t\t\t<p>{t('mapView.checkbox')}</p>\n\t\t\t\t\t\t<CheckboxList items={this.state.selectedEnum.values} checkboxSelectItem={this.checkboxSelectItem} titles={this.state.titles} />\n\t\t\t\t\t</div>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedFilterEditor = withTranslation()(FilterEditor);\nexport default LocalizedFilterEditor;\n"]},"metadata":{},"sourceType":"module"}