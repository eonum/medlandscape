{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css';\n\nvar ControlPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlPanel, _Component);\n\n  function ControlPanel(props) {\n    var _this;\n\n    _classCallCheck(this, ControlPanel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ControlPanel).call(this, props));\n\n    _this.fetchMapData = function (variable) {\n      var name = variable.name,\n          variable_model = variable.variable_model;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      var query = key + \"?variables=\";\n      query += encodeURIComponent(variable.name);\n      return _this.props.fetchData(key, query);\n    };\n\n    _this.fetchEnumData = function (variable) {\n      var name = _this.state.selectedEnum.name;\n      var query = \"hospitals?variables=\";\n      query += encodeURIComponent(variable.name + \"$\" + name);\n      return _this.props.fetchData(\"hospitals\", query);\n    };\n\n    _this.setEnum = function (variable) {\n      _this.setState({\n        selectedEnum: variable\n      }, function () {\n        _this.fetchEnumData(_this.props.selectedVariable);\n      });\n    };\n\n    _this.selectVariable = function (item) {\n      _this.props.selectVariable(item);\n\n      if (!_this.state.selectedEnum) {\n        return _this.fetchMapData(item);\n      } else {\n        return _this.fetchEnumData(item);\n      }\n    };\n\n    _this.setTabView = function (view) {\n      var oldView = _this.props.view;\n\n      if (oldView !== view) {\n        _this.props.setView(view);\n\n        document.getElementById('t' + oldView).classList.toggle('selectedTab');\n        document.getElementById('t' + view).classList.toggle('selectedTab');\n      }\n    };\n\n    _this.setMapView = function (view) {\n      if (_this.state.view !== view) {\n        _this.setState({\n          mapView: view\n        });\n      }\n    };\n\n    var cantonVars = [],\n        hospitalVars = [],\n        enums = []; // filtering the different variables\n\n    props.variables.filter(function (variable) {\n      if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n        hospitalVars.push(variable);\n      } else if (variable.variable_model === \"Canton\") {\n        cantonVars.push(variable);\n      } else {\n        enums.push(variable);\n      }\n    });\n    _this.state = {\n      cantonVars: cantonVars,\n      hospitalVars: hospitalVars,\n      enums: enums,\n      mapView: 1,\n      selectedEnum: undefined\n    };\n    return _this;\n  }\n  /**\n   * Called when asking for a Variable to be displayed on the map\n   * Prepares correct query to ask App.js\n   * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n   */\n\n\n  _createClass(ControlPanel, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          t = _this$props.t,\n          hasLoaded = _this$props.hasLoaded,\n          hospitals = _this$props.hospitals,\n          updateHospitals = _this$props.updateHospitals,\n          year = _this$props.year,\n          selectedVariable = _this$props.selectedVariable;\n      var _this$state = this.state,\n          hospitalVars = _this$state.hospitalVars,\n          cantonVars = _this$state.cantonVars,\n          enums = _this$state.enums;\n      var selectedCanton = {},\n          selectedHospital = {}; // setting selectedItem for Dropdowns\n\n      if (this.props.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = selectedVariable;\n        selectedCanton = undefined;\n      } else {\n        selectedCanton = selectedVariable;\n        selectedHospital = undefined;\n      }\n\n      var mapViewHospitals = React.createElement(\"div\", {\n        className: \"mapViewHospitals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(HospitalTypeFilter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, t('mapView.filter')), React.createElement(FilterEditor, {\n        hospitals: hospitals,\n        updateHospitals: updateHospitals,\n        hasLoaded: hasLoaded,\n        selectedYear: year,\n        variables: enums,\n        setEnum: this.setEnum,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }));\n      var mapViewCantons = React.createElement(\"div\", {\n        className: \"mapViewCantons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedCanton,\n        defaultText: t('dropDowns.variablesFallback'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }));\n      var mapView = React.createElement(\"div\", {\n        className: \"view1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, t('mapView.title')), React.createElement(\"div\", {\n        className: \"viewSwitcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"l1\",\n        className: this.state.mapView === 1 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, t('mapView.hospitals')), React.createElement(\"p\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"|\"), React.createElement(\"p\", {\n        id: \"l2\",\n        className: this.state.mapView === 2 ? \"label selectedLabel\" : \"label\",\n        onClick: this.setMapView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, t('mapView.cantons')))), this.state.mapView === 1 ? mapViewHospitals : mapViewCantons);\n      var tableView = React.createElement(\"div\", {\n        className: \"view2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, t('tableView.title'))));\n      var graphView = React.createElement(\"div\", {\n        className: \"view3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, t('graphView.title'))));\n      var controlPanelView;\n\n      switch (this.props.view) {\n        case 1:\n          controlPanelView = mapView;\n          break;\n\n        case 2:\n          controlPanelView = tableView;\n          break;\n\n        case 3:\n          controlPanelView = graphView;\n          break;\n\n        default:\n          controlPanelView = mapView;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tabs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"t1\",\n        className: \"tab selectedTab\",\n        onClick: this.setTabView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t2\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t3\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tabContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, controlPanelView));\n    }\n  }]);\n\n  return ControlPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js"],"names":["React","Component","DropdownMenu","FilterEditor","HospitalTypeFilter","withTranslation","ControlPanel","props","fetchMapData","variable","name","variable_model","key","query","encodeURIComponent","fetchData","fetchEnumData","state","selectedEnum","setEnum","setState","selectedVariable","selectVariable","item","setTabView","view","oldView","setView","document","getElementById","classList","toggle","setMapView","mapView","cantonVars","hospitalVars","enums","variables","filter","variable_type","push","undefined","t","hasLoaded","hospitals","updateHospitals","year","selectedCanton","selectedHospital","mapViewHospitals","mapViewCantons","bind","tableView","graphView","controlPanelView","LocalizedControlPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport HospitalTypeFilter from '../HospitalTypeFilter/HospitalTypeFilter.js';\nimport { withTranslation } from 'react-i18next';\nimport './ControlPanel.css'\n\n\n\nclass ControlPanel extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let cantonVars = [], hospitalVars = [], enums = [];\n\n        // filtering the different variables\n        props.variables.filter(variable => {\n            if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n                hospitalVars.push(variable);\n            } else if (variable.variable_model === \"Canton\") {\n                cantonVars.push(variable);\n            } else {\n                enums.push(variable);\n            }\n        });\n\n\n        this.state = {\n            cantonVars : cantonVars,\n            hospitalVars : hospitalVars,\n            enums : enums,\n            mapView : 1,\n            selectedEnum : undefined\n        }\n    }\n\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchMapData = (variable) => {\n        const {name, variable_model} = variable;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        let query = key + \"?variables=\";\n        query += encodeURIComponent(variable.name);\n        return this.props.fetchData(key, query);\n    }\n\n    /**\n     * Called when filtering Hospital variables.\n     * Prepares correct query to ask App.js\n     * Adds current selectedEnum to query.\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchEnumData = (variable) => {\n        const {name} = this.state.selectedEnum;\n        let query =\"hospitals?variables=\";\n        query += encodeURIComponent(variable.name + \"$\" + name);\n        return this.props.fetchData(\"hospitals\", query);\n    }\n\n    /**\n     * Sets the state for selected Enum variable\n     * Gets data after changing it\n     * @param {Variable Object} variable The chosen variable.\n     */\n    setEnum = (variable) => {\n        this.setState({\n            selectedEnum : variable\n        }, () => {\n            this.fetchEnumData(this.props.selectedVariable);\n        })\n    }\n\n    /**\n     * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n     * then calls fetchMapData to fetch data from the API.\n     * @param  {Variable object} item The selected variable.\n     */\n    selectVariable = (item) => {\n        this.props.selectVariable(item);\n        if (!this.state.selectedEnum) {\n            return this.fetchMapData(item);\n        } else {\n            return this.fetchEnumData(item);\n        }\n    }\n\n    /**\n     * sets the view to be displayed on the ControlPanel.\n     */\n    setTabView = (view) => {\n        let oldView = this.props.view;\n        if (oldView !== view) {\n            this.props.setView(view);\n            document.getElementById('t' + oldView).classList.toggle('selectedTab');\n            document.getElementById('t' + view).classList.toggle('selectedTab');\n        }\n    }\n\n    /**\n     * Sets the view to be displayed on the 'Maps' tab of the ControlPanel.\n     */\n    setMapView = (view) => {\n        if (this.state.view !== view) {\n            this.setState({\n                mapView : view\n            });\n        }\n    }\n\n    render() {\n\n        const {t, hasLoaded, hospitals, updateHospitals, year, selectedVariable} = this.props;\n        const {hospitalVars, cantonVars, enums} = this.state;\n\n        let selectedCanton = {}, selectedHospital = {};\n\n        // setting selectedItem for Dropdowns\n        if (this.props.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = selectedVariable;\n            selectedCanton = undefined;\n        } else {\n            selectedCanton = selectedVariable;\n            selectedHospital = undefined;\n        }\n\n        let mapViewHospitals = (\n            <div className=\"mapViewHospitals\">\n                <HospitalTypeFilter />\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.selectVariable} selectedItem={selectedHospital}/>\n                <p>{t('mapView.filter')}</p>\n                <FilterEditor\n                        hospitals={hospitals}\n                        updateHospitals={updateHospitals}\n                        hasLoaded={hasLoaded}\n                        selectedYear={year}\n                        variables={enums}\n                        setEnum={this.setEnum}\n                />\n            </div>\n        )\n\n        let mapViewCantons = (\n            <div className=\"mapViewCantons\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.selectVariable} selectedItem={selectedCanton} defaultText={(t('dropDowns.variablesFallback'))}/>\n            </div>\n        )\n\n        let mapView = (\n            <div className=\"view1\">\n                <div className=\"header\">\n                    <h1>{t('mapView.title')}</h1>\n                    <div className=\"viewSwitcher\">\n                        <p id=\"l1\" className={(this.state.mapView === 1) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 1)}>{t('mapView.hospitals')}</p>\n                        <p className=\"separator\">|</p>\n                        <p id=\"l2\" className={(this.state.mapView === 2) ? \"label selectedLabel\" : \"label\"} onClick={this.setMapView.bind(this, 2)}>{t('mapView.cantons')}</p>\n                    </div>\n                </div>\n                {\n                    (this.state.mapView === 1)\n                    ? mapViewHospitals\n                    : mapViewCantons\n                }\n            </div>\n        );\n\n        let tableView = (\n            <div className=\"view2\">\n                <div className=\"header\">\n                    <h1>{t('tableView.title')}</h1>\n                </div>\n            </div>\n        );\n\n        let graphView = (\n            <div className=\"view3\">\n                <div className=\"header\">\n                    <h1>{t('graphView.title')}</h1>\n                </div>\n            </div>\n        );\n\n        let controlPanelView;\n        switch(this.props.view) {\n            case 1:\n                controlPanelView = mapView;\n                break;\n            case 2:\n                controlPanelView = tableView;\n                break;\n            case 3:\n                controlPanelView = graphView;\n                break;\n            default:\n                controlPanelView = mapView;\n        }\n\n        return (\n\t\t\t<div className=\"control-panel\">\n                <div className=\"tabs\">\n                    <div id=\"t1\" className=\"tab selectedTab\" onClick={this.setTabView.bind(this, 1)}></div>\n                    <div id=\"t2\" className=\"tab\" onClick={this.setTabView.bind(this, 2)}></div>\n                    <div id=\"t3\" className=\"tab\" onClick={this.setTabView.bind(this, 3)}></div>\n                </div>\n                <div className=\"tabContent\">\n                    {controlPanelView}\n                </div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;\n"]},"metadata":{},"sourceType":"module"}