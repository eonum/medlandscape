{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js\";\nimport React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from '../LanguagePicker/LanguagePicker.js';\nimport './ControlPanel.css';\nvar apiRequest = \"/api/medical_landscape/\";\n\nvar ControlPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ControlPanel, _Component);\n\n  function ControlPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ControlPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ControlPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedVariable: {},\n      mapView: 1\n      /**\n       * Called when asking for a Variable to be displayed on the map\n       * Prepares correct query to ask App.js\n       * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n       */\n\n    };\n\n    _this.fetchMapData = function (variable) {\n      var name = variable.name,\n          variable_model = variable.variable_model;\n      var query = _this.props.i18n.language + apiRequest;\n      var key = variable_model === \"Hospital\" ? \"hospitals\" : \"cantons\";\n      query += key + \"?variables=\";\n      query += encodeURIComponent(variable.name);\n      return _this.props.fetchData(key, query);\n    };\n\n    _this.fetchEnumData = function (variable) {\n      var name = variable.name;\n      var query = _this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n      query += encodeURIComponent(_this.state.selectedVariable.name + \"$\");\n      query += encodeURIComponent(name);\n      return _this.props.fetchData(\"hospitals\", query);\n    };\n\n    _this.selectVariable = function (item) {\n      console.log(\"variable selection\");\n\n      _this.setState({\n        selectedVariable: item\n      });\n\n      _this.props.selectVariable(item);\n\n      return _this.fetchMapData(item);\n    };\n\n    _this.setTabView = function (view) {\n      if (_this.props.view !== view) {\n        document.getElementById('t1').classList.toggle('selectedTab');\n        document.getElementById('t2').classList.toggle('selectedTab');\n        document.getElementById('t3').classList.toggle('selectedTab');\n\n        _this.props.setView(view);\n      }\n    };\n\n    _this.setMapView = function (view) {\n      if (_this.state.mapView !== view) {\n        document.getElementById('l1').classList.toggle('selectedLabel');\n        document.getElementById('l2').classList.toggle('selectedLabel');\n\n        _this.setState({\n          mapView: view\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(ControlPanel, [{\n    key: \"render\",\n    value: function render() {\n      var cantonVars = [],\n          hospitalVars = [],\n          years = [],\n          enums = [];\n      var selectedCanton = {},\n          selectedHospital = {};\n      this.props.variables.filter(function (variable) {\n        if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n          hospitalVars.push(variable);\n        } else if (variable.variable_model === \"Canton\") {\n          cantonVars.push(variable);\n        } else {\n          enums.push(variable);\n        }\n      });\n\n      if (this.state.selectedVariable.variable_model === \"Hospital\") {\n        selectedHospital = this.state.selectedVariable;\n        selectedCanton = cantonVars[0];\n      } else {\n        selectedCanton = this.state.selectedVariable;\n        selectedHospital = hospitalVars[0];\n      }\n\n      var t = this.props.t;\n      var mapViewHospitals = React.createElement(\"div\", {\n        className: \"mapViewHospitals\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"hospitalVars\",\n        listItems: hospitalVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedHospital,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(FilterEditor, {\n        hospitals: this.props.hospitals,\n        updateHospitals: this.props.updateHospitals,\n        fetchData: this.fetchEnumData,\n        hasLoaded: this.props.hasLoaded,\n        selectedYear: this.props.year,\n        variables: enums,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n      var mapViewCantons = React.createElement(\"div\", {\n        className: \"mapViewCantons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, t('mapView.variables')), React.createElement(DropdownMenu, {\n        id: \"cantonVars\",\n        listItems: cantonVars,\n        selectItem: this.selectVariable,\n        selectedItem: selectedCanton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }));\n      var mapView = React.createElement(\"div\", {\n        className: \"view1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, t('mapView.title')), React.createElement(\"div\", {\n        className: \"viewSwitcher\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"l1\",\n        className: \"label selectedLabel\",\n        onClick: this.setMapView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, t('mapView.hospitals')), React.createElement(\"p\", {\n        className: \"separator\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"||\"), React.createElement(\"p\", {\n        id: \"l2\",\n        className: \"label\",\n        onClick: this.setMapView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, t('mapView.cantons')))), this.state.mapView === 1 ? mapViewHospitals : mapViewCantons);\n      var tableView = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"test\");\n      var graphView = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"test2\");\n      var selectedView;\n\n      switch (this.props.view) {\n        case 1:\n          selectedView = mapView;\n          break;\n\n        case 2:\n          selectedView = tableView;\n          break;\n\n        case 3:\n          selectedView = graphView;\n          break;\n\n        default:\n          selectedView = mapView;\n      }\n\n      return React.createElement(\"div\", {\n        className: \"control-panel\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"tabs\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"t1\",\n        className: \"tab selectedTab\",\n        onClick: this.props.setView.bind(this, 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t2\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"t3\",\n        className: \"tab\",\n        onClick: this.setTabView.bind(this, 3),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"tabContent\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, selectedView, React.createElement(LanguagePicker, {\n        resendInitApiCall: this.props.initApiCall,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ControlPanel;\n}(Component);\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\n\n\nvar LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/ControlPanel/ControlPanel.js"],"names":["React","Component","DropdownMenu","FilterEditor","withTranslation","LanguagePicker","apiRequest","ControlPanel","state","selectedVariable","mapView","fetchMapData","variable","name","variable_model","query","props","i18n","language","key","encodeURIComponent","fetchData","fetchEnumData","selectVariable","item","console","log","setState","setTabView","view","document","getElementById","classList","toggle","setView","setMapView","cantonVars","hospitalVars","years","enums","selectedCanton","selectedHospital","variables","filter","variable_type","push","t","mapViewHospitals","hospitals","updateHospitals","hasLoaded","year","mapViewCantons","bind","tableView","graphView","selectedView","initApiCall","LocalizedControlPanel"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DropdownMenu from '../DropdownMenu/DropdownMenu.js';\nimport FilterEditor from '../FilterEditor/FilterEditor.js';\nimport { withTranslation } from 'react-i18next';\nimport LanguagePicker from '../LanguagePicker/LanguagePicker.js';\nimport './ControlPanel.css'\n\nlet apiRequest = \"/api/medical_landscape/\";\n\nclass ControlPanel extends Component {\n\n    state = {\n        selectedVariable : {},\n        mapView : 1\n    }\n\n\n    /**\n     * Called when asking for a Variable to be displayed on the map\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchMapData = (variable) => {\n        const {name, variable_model} = variable;\n        let query = this.props.i18n.language + apiRequest;\n        let key = (variable_model === \"Hospital\") ? \"hospitals\" : \"cantons\";\n        query += key + \"?variables=\";\n        query += encodeURIComponent(variable.name);\n        return this.props.fetchData(key, query);\n    }\n\n    /**\n     * Called when filtering Hospital variables.\n     * Prepares correct query to ask App.js\n     * @param  {Variable Object} variable The selected Variable to apply to Hospitals or Cantons.\n     */\n    fetchEnumData = (variable) => {\n        const {name} = variable;\n        let query = this.props.i18n.language + apiRequest + \"hospitals?variables=\";\n        query += encodeURIComponent(this.state.selectedVariable.name + \"$\");\n        query += encodeURIComponent(name);\n        return this.props.fetchData(\"hospitals\", query);\n    }\n\n\n    /**\n     * Sets the state variable selectedVariable to the selected variable from a DropdownMenu Component,\n     * then calls fetchMapData to fetch data from the API.\n     * @param  {Variable object} item The selected variable.\n     */\n    selectVariable = (item) => {\n        console.log(\"variable selection\");\n        this.setState({\n            selectedVariable : item,\n        });\n        this.props.selectVariable(item);\n        return this.fetchMapData(item);\n    }\n\n    setTabView = (view) => {\n        if (this.props.view !== view) {\n            document.getElementById('t1').classList.toggle('selectedTab');\n            document.getElementById('t2').classList.toggle('selectedTab');\n            document.getElementById('t3').classList.toggle('selectedTab');\n            this.props.setView(view);\n        }\n    }\n\n    setMapView = (view) => {\n        if (this.state.mapView !== view) {\n            document.getElementById('l1').classList.toggle('selectedLabel');\n            document.getElementById('l2').classList.toggle('selectedLabel');\n            this.setState({\n                mapView : view\n            });\n        }\n    }\n\n\n    render() {\n        let cantonVars = [], hospitalVars = [], years = [], enums = [];\n        let selectedCanton = {}, selectedHospital = {};\n\n        this.props.variables.filter(variable => {\n            if (variable.variable_model === \"Hospital\" && variable.variable_type !== \"enum\") {\n                hospitalVars.push(variable);\n            } else if (variable.variable_model === \"Canton\") {\n                cantonVars.push(variable);\n            } else {\n                enums.push(variable);\n            }\n        });\n\n        if (this.state.selectedVariable.variable_model === \"Hospital\") {\n            selectedHospital = this.state.selectedVariable;\n            selectedCanton = cantonVars[0];\n        } else {\n            selectedCanton = this.state.selectedVariable;\n            selectedHospital = hospitalVars[0];\n        }\n\n        const { t } = this.props;\n\n        let mapViewHospitals = (\n            <div className=\"mapViewHospitals\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"hospitalVars\" listItems={hospitalVars} selectItem={this.selectVariable} selectedItem={selectedHospital} />\n                <FilterEditor hospitals={this.props.hospitals} updateHospitals={this.props.updateHospitals} fetchData={this.fetchEnumData} hasLoaded={this.props.hasLoaded} selectedYear={this.props.year} variables={enums} />\n            </div>\n        )\n        let mapViewCantons = (\n            <div className=\"mapViewCantons\">\n                <p>{t('mapView.variables')}</p>\n                <DropdownMenu id=\"cantonVars\" listItems={cantonVars} selectItem={this.selectVariable} selectedItem={selectedCanton} />\n            </div>\n        )\n\n        let mapView = (\n            <div className=\"view1\">\n                <div className=\"header\">\n                    <h1>{t('mapView.title')}</h1>\n                    <div className=\"viewSwitcher\">\n                        <p id=\"l1\" className=\"label selectedLabel\" onClick={this.setMapView.bind(this, 1)}>{t('mapView.hospitals')}</p>\n                        <p className=\"separator\">||</p>\n                        <p id=\"l2\" className=\"label\" onClick={this.setMapView.bind(this, 2)}>{t('mapView.cantons')}</p>\n                    </div>\n                </div>\n                {\n                    (this.state.mapView === 1)\n                    ? mapViewHospitals\n                    : mapViewCantons\n                }\n            </div>\n        )\n\n        let tableView = (\n            <p>test</p>\n        );\n        let graphView = (\n            <p>test2</p>\n        );\n\n        let selectedView;\n        switch(this.props.view) {\n            case 1:\n                selectedView = mapView;\n                break;\n            case 2:\n                selectedView = tableView;\n                break;\n            case 3:\n                selectedView = graphView;\n                break;\n            default:\n                selectedView = mapView;\n        }\n\n\n        return (\n\t\t\t<div className=\"control-panel\">\n                <div className=\"tabs\">\n                    <div id=\"t1\" className=\"tab selectedTab\" onClick={this.props.setView.bind(this, 1)}></div>\n                    <div id=\"t2\" className=\"tab\" onClick={this.setTabView.bind(this, 2)}></div>\n                    <div id=\"t3\" className=\"tab\" onClick={this.setTabView.bind(this, 3)}></div>\n                </div>\n                <div className=\"tabContent\">\n                    {selectedView}\n                    <LanguagePicker resendInitApiCall={this.props.initApiCall} />\n                </div>\n\t\t\t</div>\n        );\n    }\n}\n\n/**\n * Convert the component using withTranslation() to have access to t() function\n *  and other i18next props. Then export it.\n */\nconst LocalizedControlPanel = withTranslation()(ControlPanel);\nexport default LocalizedControlPanel;\n"]},"metadata":{},"sourceType":"module"}