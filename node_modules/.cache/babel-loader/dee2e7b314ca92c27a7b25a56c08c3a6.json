{"ast":null,"code":"import _defineProperty from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/Maps.js\";\nimport React, { Component } from 'react';\nimport { Map, TileLayer, ZoomControl } from 'react-leaflet';\nimport './Maps.css';\nimport Control from 'react-leaflet-control';\nimport MapInfo from '../MapInfo/MapInfo.js';\nimport HospitalMap from './HospitalMap.js';\nimport CantonMap from './CantonMap.js';\n/**\n* Maps is the entity we use to draw a map.\n* The rendered JSX also consists of the buttons and mapInfo that should be rendered.\n* The current position of the map center and zoom are stored in the state.\n*/\n\nvar Maps =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Maps, _Component);\n\n  function Maps() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Maps);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Maps)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      filteredHospitals: {},\n      filteredCantons: {},\n      filtered: false,\n      lat: 46.798473,\n      lng: 8.231726,\n      zoom: 8\n    };\n\n    _this.returnData = function (item) {\n      var varName = _this.props.selectedVariable.name;\n      var values = item.attributes[varName];\n      var data;\n\n      if (values !== undefined) {\n        data = values[_this.props.year] ? values[_this.props.year] : \"noValue\";\n      } else {\n        data = \"noVariable\";\n      }\n\n      return data;\n    };\n\n    _this.setMaxAndMin = function (objects) {\n      var min = 1000000000000,\n          max = 0,\n          sum = 0,\n          counter = 0;\n      objects.map(function (obj) {\n        var val = _this.returnData(obj);\n\n        if (obj.name !== \"Ganze Schweiz\") {\n          max = max < val ? val : max;\n          min = min > val ? val : min;\n          sum += val;\n          counter++;\n        }\n      }); // const mean = sum/counter;\n      // sum = 0;\n      //\n      // this.state.filteredObjects.map((obj) => {\n      //     let val = this.returnData(obj);\n      //     if (obj.name !== \"Ganze Schweiz\") {\n      //         const squareDif = Math.pow(val - mean, 2);\n      //         sum += squareDif;\n      //     }\n      // })\n      //\n      // const meanSquareDif = sum/counter;\n      // const std = Math.sqrt(meanSquareDif);\n\n      return {\n        // mean: mean,\n        // std: std,\n        max: max,\n        min: min\n      };\n    };\n\n    _this.isNormable = function () {\n      var type = _this.props.selectedVariable.variable_type;\n      return type === \"float\" || type === \"number\" || type === \"percentage\" || type === \"relevance\";\n    };\n\n    _this.resetView = function () {\n      _this.setState({\n        lat: 46.798473 + 0.1 * Math.random(),\n        lng: 8.231726 + 0.1 * Math.random(),\n        zoom: 8\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Maps, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (this.state.filtered && !prevProps.hasLoaded) {\n        this.setState({\n          filtered: false\n        });\n      }\n\n      if (this.props.hasLoaded && !prevProps.hasLoaded) {\n        var _this$setState;\n\n        console.log(\"FILTERING on Maps componentDidUpdate\");\n        var filteredObjects = this.props.objects.filter(function (object) {\n          var value = _this2.returnData(object);\n\n          if (value === \"noVariable\") {//console.log(\"object does not contain variable \" + this.props.selectedVariable.name);\n            //console.log(object);\n          }\n\n          return value !== \"noValue\";\n        });\n        var key = this.props.mapView === 1 ? \"filteredHospitals\" : \"filteredCantons\";\n        this.setState((_this$setState = {}, _defineProperty(_this$setState, key, filteredObjects), _defineProperty(_this$setState, \"filtered\", true), _this$setState));\n      }\n    }\n    /**\n        * Returns the values stored in a this.props.objects canton/hospital\n        * @param  {Canton || Hospital Object} item The object to extract the values from\n        * @return {int || float || string} The selected entry in the item.values object\n        */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props = this.props,\n          objects = _this$props.objects,\n          selectedVariable = _this$props.selectedVariable,\n          view = _this$props.view,\n          mapView = _this$props.mapView,\n          year = _this$props.year,\n          hasLoaded = _this$props.hasLoaded;\n      var _this$state = this.state,\n          filteredHospitals = _this$state.filteredHospitals,\n          filteredCantons = _this$state.filteredCantons,\n          filtered = _this$state.filtered,\n          lat = _this$state.lat,\n          lng = _this$state.lng,\n          zoom = _this$state.zoom;\n      var mapInfo = null;\n      var componentToRender = null;\n\n      if (hasLoaded && filtered && view === 1) {\n        console.log(\"MAPS RENDER\");\n        console.log(\"STATE:\");\n        console.log(this.state);\n        console.log(\"MAPS RECIEVED:\");\n        console.log(\"VAR: \" + selectedVariable.name);\n        console.log(\"OBJ:\");\n        console.log(this.props.objects[0]);\n        var hospitalMaxAndMin = mapView === 1 && this.isNormable() ? this.setMaxAndMin(filteredHospitals) : 0;\n        var cantonMaxAndMin = mapView === 2 && selectedVariable !== undefined ? this.setMaxAndMin(filteredCantons) : 0;\n        componentToRender = mapView === 1 ? React.createElement(HospitalMap, {\n          data: filteredHospitals,\n          returnData: this.returnData,\n          maxAndMin: hospitalMaxAndMin,\n          selectedVariable: selectedVariable,\n          year: year,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }) : React.createElement(CantonMap, {\n          data: filteredCantons,\n          returnData: this.returnData,\n          maxAndMin: this.setMaxAndMin(filteredCantons),\n          selectedVariable: selectedVariable,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        });\n        mapInfo = React.createElement(MapInfo, {\n          mapView: mapView,\n          year: year,\n          selectedVariable: selectedVariable,\n          nrOfObjects: mapView === 1 ? filteredHospitals.length : filteredCantons.length,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Map // set up map\n      , {\n        className: \"map\",\n        center: [lat, lng],\n        zoom: zoom,\n        minZoom: 8 // set minimum zoom level\n        ,\n        maxZoom: 16 // set maximum zoom level\n        ,\n        zoomControl: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(ZoomControl, {\n        style: \"borderRadius=25px;\",\n        position: \"topright\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(Control, {\n        position: \"topright\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"rV\",\n        className: \"resetView\",\n        onClick: function onClick() {\n          return _this3.resetView();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      })), React.createElement(TileLayer // add background layer\n      , {\n        attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        url: \"https://api.mapbox.com/styles/v1/nathi/cjf8cggx93p3u2qrqrgwoh5nh/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibmF0aGkiLCJhIjoiY2pmOGJ4ZXJmMXMyZDJ4bzRoYWRxbzhteCJ9.x2dbGjsVZTA9HLw6VWaQow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }), mapInfo, componentToRender);\n    }\n  }]);\n\n  return Maps;\n}(Component);\n\nexport default Maps;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/Maps.js"],"names":["React","Component","Map","TileLayer","ZoomControl","Control","MapInfo","HospitalMap","CantonMap","Maps","state","filteredHospitals","filteredCantons","filtered","lat","lng","zoom","returnData","item","varName","props","selectedVariable","name","values","attributes","data","undefined","year","setMaxAndMin","objects","min","max","sum","counter","map","obj","val","isNormable","type","variable_type","resetView","setState","Math","random","prevProps","hasLoaded","console","log","filteredObjects","filter","object","value","key","mapView","view","mapInfo","componentToRender","hospitalMaxAndMin","cantonMaxAndMin","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Map, TileLayer, ZoomControl } from 'react-leaflet'\nimport './Maps.css';\nimport Control from 'react-leaflet-control';\nimport MapInfo from '../MapInfo/MapInfo.js';\nimport HospitalMap from './HospitalMap.js';\nimport CantonMap from './CantonMap.js';\n\n/**\n* Maps is the entity we use to draw a map.\n* The rendered JSX also consists of the buttons and mapInfo that should be rendered.\n* The current position of the map center and zoom are stored in the state.\n*/\nclass Maps extends Component {\n\tstate = {\n\t\tfilteredHospitals : {},\n\t\tfilteredCantons : {},\n\t\tfiltered : false,\n\t\tlat : 46.798473,\n\t\tlng : 8.231726,\n\t\tzoom : 8,\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\n\t\tif (this.state.filtered && !prevProps.hasLoaded) {\n\t\t\tthis.setState({\n\t\t\t\tfiltered : false\n\t\t\t})\n\t\t}\n\n\t\tif (this.props.hasLoaded && !prevProps.hasLoaded) {\n\t\t\tconsole.log(\"FILTERING on Maps componentDidUpdate\");\n\t\t\tlet filteredObjects = this.props.objects.filter((object) => {\n\t\t\t\tlet value = this.returnData(object)\n\t\t\t\tif (value === \"noVariable\") {\n\t\t\t\t\t//console.log(\"object does not contain variable \" + this.props.selectedVariable.name);\n\t\t\t\t\t//console.log(object);\n\t\t\t\t}\n\t\t\t\treturn (value !== \"noValue\");\n\t\t\t});\n\t\t\tlet key = (this.props.mapView === 1) ? \"filteredHospitals\" : \"filteredCantons\"\n\t\t\tthis.setState({\n\t\t\t\t[key] : filteredObjects,\n\t\t\t\tfiltered : true\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n     * Returns the values stored in a this.props.objects canton/hospital\n     * @param  {Canton || Hospital Object} item The object to extract the values from\n     * @return {int || float || string} The selected entry in the item.values object\n     */\n\treturnData = (item) => {\n        let varName = this.props.selectedVariable.name;\n\t\tlet values = item.attributes[varName];\n\t\tlet data;\n\t\tif (values !== undefined) {\n\t\t\tdata = (values[this.props.year]) ? values[this.props.year] : \"noValue\";\n\t\t} else {\n\t\t\tdata = \"noVariable\"\n\t\t}\n\t\treturn data;\n\t}\n\n\t/**\n   * Iterates through this.props.objects and finds mean, standard deviation, max and min values.\n   * @return {Object} Object.min minimum, Object.max maximum, Object.mean mean, Object.std standard deviation,\n \t*/\n\tsetMaxAndMin = (objects) => {\n        let min = 1000000000000, max = 0, sum = 0, counter = 0;\n\n        objects.map((obj) => {\n            let val = this.returnData(obj);\n            if (obj.name !== \"Ganze Schweiz\") {\n                max = (max < val) ? val : max;\n                min = (min > val) ? val : min;\n                sum += val;\n                counter++;\n            }\n        })\n\n        // const mean = sum/counter;\n        // sum = 0;\n\t\t//\n        // this.state.filteredObjects.map((obj) => {\n        //     let val = this.returnData(obj);\n        //     if (obj.name !== \"Ganze Schweiz\") {\n        //         const squareDif = Math.pow(val - mean, 2);\n        //         sum += squareDif;\n        //     }\n        // })\n\t\t//\n        // const meanSquareDif = sum/counter;\n        // const std = Math.sqrt(meanSquareDif);\n\n        return {\n            // mean: mean,\n            // std: std,\n            max: max,\n            min: min\n        }\n\t}\n\n\t/**\n\t* Checks if the selected Variable passed through this.props.varInfo\n\t* is normable (a number or similar).\n\t* @return {Boolean}\n\t*/\n\tisNormable = () => {\n\t\tlet type = this.props.selectedVariable.variable_type;\n\t\treturn (type === \"float\" || type === \"number\" || type === \"percentage\" || type === \"relevance\");\n\t}\n\n\t/**\n\t* Resets view to original position.\n\t* Math.random is needed so react does detect a state change and re-renders.\n\t*/\n \tresetView = () => {\n\t\tthis.setState({\n\t\t\tlat : 46.798473 + 0.1 * Math.random(),\n\t\t\tlng : 8.231726 + 0.1 * Math.random(),\n\t\t\tzoom : 8,\n\t\t})\n\t}\n\n\trender() {\n\t\tconst {objects, selectedVariable, view, mapView, year, hasLoaded} = this.props;\n\t\tconst {filteredHospitals, filteredCantons, filtered, lat, lng, zoom} = this.state;\n\n\t\tlet mapInfo = null;\n\t\tlet componentToRender = null;\n\n        if (hasLoaded && filtered && view === 1) {\n\t\t\tconsole.log(\"MAPS RENDER\");\n\t\t\tconsole.log(\"STATE:\");\n\t\t\tconsole.log(this.state);\n\t\t\tconsole.log(\"MAPS RECIEVED:\");\n\t\t\tconsole.log(\"VAR: \" + selectedVariable.name);\n\t\t\tconsole.log(\"OBJ:\");\n\t\t\tconsole.log(this.props.objects[0]);\n\n\t\t\tlet hospitalMaxAndMin = (mapView === 1 && this.isNormable()) ? this.setMaxAndMin(filteredHospitals) : 0;\n\t\t\tlet cantonMaxAndMin = (mapView === 2 && selectedVariable !== undefined) ? this.setMaxAndMin(filteredCantons) : 0;\n\n\t\t\tcomponentToRender = (mapView === 1)\n            ? (\n\t\t\t\t<HospitalMap\n\t\t\t\t\tdata={filteredHospitals}\n\t\t\t\t\treturnData={this.returnData}\n\t\t\t\t\tmaxAndMin={hospitalMaxAndMin}\n\t\t\t\t\tselectedVariable={selectedVariable}\n\t\t\t\t\tyear={year}\n\t\t\t\t/>\n            )\n            : (\n\t\t\t\t<CantonMap\n\t\t\t\t\tdata={filteredCantons}\n\t\t\t\t\treturnData={this.returnData}\n\t\t\t\t\tmaxAndMin={this.setMaxAndMin(filteredCantons)}\n\t\t\t\t\tselectedVariable={selectedVariable}\n\t\t\t\t/>\n            );\n\n\n            mapInfo = (\n                <MapInfo\n\t\t\t\t\tmapView={mapView}\n                    year={year}\n                    selectedVariable={selectedVariable}\n                    nrOfObjects={(mapView === 1) ? filteredHospitals.length : filteredCantons.length}\n                />\n            )\n        }\n\n        return (\n        \t<Map // set up map\n                className=\"map\"\n        \t\tcenter={[lat, lng]}\n        \t\tzoom={zoom}\n        \t\tminZoom={8} // set minimum zoom level\n        \t\tmaxZoom={16} // set maximum zoom level\n\t\t\t\tzoomControl={false}\n        \t>\n\t\t\t\t<ZoomControl\n\t\t\t\t\tstyle=\"borderRadius=25px;\"\n\t\t\t\t\tposition=\"topright\"\n\t\t\t\t/>\n\t\t\t\t<Control position=\"topright\">\n\t\t\t          \t<div\n\t\t\t\t\t\t\tid=\"rV\"\n\t\t\t\t\t\t\tclassName=\"resetView\"\n\t\t\t\t\t\t\tonClick={() => this.resetView()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t</div>\n\t\t      \t</Control>\n        \t\t<TileLayer // add background layer\n        \t\t\tattribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        \t\t\turl=\"https://api.mapbox.com/styles/v1/nathi/cjf8cggx93p3u2qrqrgwoh5nh/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoibmF0aGkiLCJhIjoiY2pmOGJ4ZXJmMXMyZDJ4bzRoYWRxbzhteCJ9.x2dbGjsVZTA9HLw6VWaQow\"\n        \t\t/>\n                {mapInfo}\n        \t\t{componentToRender}\n        \t</Map>\n        )\n\t}\n}\n\nexport default Maps;\n"]},"metadata":{},"sourceType":"module"}