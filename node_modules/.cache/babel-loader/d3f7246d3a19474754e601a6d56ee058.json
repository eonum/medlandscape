{"ast":null,"code":"// d3.tip\n// Copyright (c) 2013 Justin Palmer\n//\n// Tooltips for d3.js SVG visualizations\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module with d3 as a dependency.\n    define(['d3'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // CommonJS\n    module.exports = function (d3) {\n      d3.tip = factory(d3);\n      return d3.tip;\n    };\n  } else {\n    // Browser global.\n    root.d3.tip = factory(root.d3);\n  }\n})(this, function (d3) {\n  // Public - contructs a new tooltip\n  //\n  // Returns a tip\n  return function () {\n    var direction = d3_tip_direction,\n        offset = d3_tip_offset,\n        html = d3_tip_html,\n        node = initNode(),\n        svg = null,\n        point = null,\n        target = null;\n\n    function tip(vis) {\n      svg = getSVGNode(vis);\n      point = svg.createSVGPoint();\n      document.body.appendChild(node);\n    } // Public - show the tooltip on the screen\n    //\n    // Returns a tip\n\n\n    tip.show = function () {\n      var args = Array.prototype.slice.call(arguments);\n      if (args[args.length - 1] instanceof SVGElement) target = args.pop();\n      var content = html.apply(this, args),\n          poffset = offset.apply(this, args),\n          dir = direction.apply(this, args),\n          nodel = getNodeEl(),\n          i = directions.length,\n          coords,\n          scrollTop = document.documentElement.scrollTop || document.body.scrollTop,\n          scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;\n      nodel.html(content).style({\n        opacity: 1,\n        'pointer-events': 'all'\n      });\n\n      while (i--) {\n        nodel.classed(directions[i], false);\n      }\n\n      coords = direction_callbacks.get(dir).apply(this);\n      nodel.classed(dir, true).style({\n        top: coords.top + poffset[0] + scrollTop + 'px',\n        left: coords.left + poffset[1] + scrollLeft + 'px'\n      });\n      return tip;\n    }; // Public - hide the tooltip\n    //\n    // Returns a tip\n\n\n    tip.hide = function () {\n      var nodel = getNodeEl();\n      nodel.style({\n        opacity: 0,\n        'pointer-events': 'none'\n      });\n      return tip;\n    }; // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.\n    //\n    // n - name of the attribute\n    // v - value of the attribute\n    //\n    // Returns tip or attribute value\n\n\n    tip.attr = function (n, v) {\n      if (arguments.length < 2 && typeof n === 'string') {\n        return getNodeEl().attr(n);\n      } else {\n        var args = Array.prototype.slice.call(arguments);\n        d3.selection.prototype.attr.apply(getNodeEl(), args);\n      }\n\n      return tip;\n    }; // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.\n    //\n    // n - name of the property\n    // v - value of the property\n    //\n    // Returns tip or style property value\n\n\n    tip.style = function (n, v) {\n      if (arguments.length < 2 && typeof n === 'string') {\n        return getNodeEl().style(n);\n      } else {\n        var args = Array.prototype.slice.call(arguments);\n        d3.selection.prototype.style.apply(getNodeEl(), args);\n      }\n\n      return tip;\n    }; // Public: Set or get the direction of the tooltip\n    //\n    // v - One of n(north), s(south), e(east), or w(west), nw(northwest),\n    //     sw(southwest), ne(northeast) or se(southeast)\n    //\n    // Returns tip or direction\n\n\n    tip.direction = function (v) {\n      if (!arguments.length) return direction;\n      direction = v == null ? v : d3.functor(v);\n      return tip;\n    }; // Public: Sets or gets the offset of the tip\n    //\n    // v - Array of [x, y] offset\n    //\n    // Returns offset or\n\n\n    tip.offset = function (v) {\n      if (!arguments.length) return offset;\n      offset = v == null ? v : d3.functor(v);\n      return tip;\n    }; // Public: sets or gets the html value of the tooltip\n    //\n    // v - String value of the tip\n    //\n    // Returns html value or tip\n\n\n    tip.html = function (v) {\n      if (!arguments.length) return html;\n      html = v == null ? v : d3.functor(v);\n      return tip;\n    }; // Public: destroys the tooltip and removes it from the DOM\n    //\n    // Returns a tip\n\n\n    tip.destroy = function () {\n      if (node) {\n        getNodeEl().remove();\n        node = null;\n      }\n\n      return tip;\n    };\n\n    function d3_tip_direction() {\n      return 'n';\n    }\n\n    function d3_tip_offset() {\n      return [0, 0];\n    }\n\n    function d3_tip_html() {\n      return ' ';\n    }\n\n    var direction_callbacks = d3.map({\n      n: direction_n,\n      s: direction_s,\n      e: direction_e,\n      w: direction_w,\n      nw: direction_nw,\n      ne: direction_ne,\n      sw: direction_sw,\n      se: direction_se\n    }),\n        directions = direction_callbacks.keys();\n\n    function direction_n() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.n.y - node.offsetHeight,\n        left: bbox.n.x - node.offsetWidth / 2\n      };\n    }\n\n    function direction_s() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.s.y,\n        left: bbox.s.x - node.offsetWidth / 2\n      };\n    }\n\n    function direction_e() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.e.y - node.offsetHeight / 2,\n        left: bbox.e.x\n      };\n    }\n\n    function direction_w() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.w.y - node.offsetHeight / 2,\n        left: bbox.w.x - node.offsetWidth\n      };\n    }\n\n    function direction_nw() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.nw.y - node.offsetHeight,\n        left: bbox.nw.x - node.offsetWidth\n      };\n    }\n\n    function direction_ne() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.ne.y - node.offsetHeight,\n        left: bbox.ne.x\n      };\n    }\n\n    function direction_sw() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.sw.y,\n        left: bbox.sw.x - node.offsetWidth\n      };\n    }\n\n    function direction_se() {\n      var bbox = getScreenBBox();\n      return {\n        top: bbox.se.y,\n        left: bbox.e.x\n      };\n    }\n\n    function initNode() {\n      var node = d3.select(document.createElement('div'));\n      node.style({\n        position: 'absolute',\n        top: 0,\n        opacity: 0,\n        'pointer-events': 'none',\n        'box-sizing': 'border-box'\n      });\n      return node.node();\n    }\n\n    function getSVGNode(el) {\n      el = el.node();\n      if (el.tagName.toLowerCase() === 'svg') return el;\n      return el.ownerSVGElement;\n    }\n\n    function getNodeEl() {\n      if (node === null) {\n        node = initNode(); // re-add node to DOM\n\n        document.body.appendChild(node);\n      }\n\n      ;\n      return d3.select(node);\n    } // Private - gets the screen coordinates of a shape\n    //\n    // Given a shape on the screen, will return an SVGPoint for the directions\n    // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),\n    // sw(southwest).\n    //\n    //    +-+-+\n    //    |   |\n    //    +   +\n    //    |   |\n    //    +-+-+\n    //\n    // Returns an Object {n, s, e, w, nw, sw, ne, se}\n\n\n    function getScreenBBox() {\n      var targetel = target || d3.event.target;\n\n      while ('undefined' === typeof targetel.getScreenCTM && 'undefined' === targetel.parentNode) {\n        targetel = targetel.parentNode;\n      }\n\n      var bbox = {},\n          matrix = targetel.getScreenCTM(),\n          tbbox = targetel.getBBox(),\n          width = tbbox.width,\n          height = tbbox.height,\n          x = tbbox.x,\n          y = tbbox.y;\n      point.x = x;\n      point.y = y;\n      bbox.nw = point.matrixTransform(matrix);\n      point.x += width;\n      bbox.ne = point.matrixTransform(matrix);\n      point.y += height;\n      bbox.se = point.matrixTransform(matrix);\n      point.x -= width;\n      bbox.sw = point.matrixTransform(matrix);\n      point.y -= height / 2;\n      bbox.w = point.matrixTransform(matrix);\n      point.x += width;\n      bbox.e = point.matrixTransform(matrix);\n      point.x -= width / 2;\n      point.y -= height / 2;\n      bbox.n = point.matrixTransform(matrix);\n      point.y += height;\n      bbox.s = point.matrixTransform(matrix);\n      return bbox;\n    }\n\n    return tip;\n  };\n});","map":null,"metadata":{},"sourceType":"script"}