{"ast":null,"code":"import _classCallCheck from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap.js\";\nimport React, { Component } from \"react\";\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet';\nimport { withTranslation } from 'react-i18next';\n\nvar HospitalMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(HospitalMap, _Component);\n\n  function HospitalMap() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, HospitalMap);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(HospitalMap)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.calculateCircleColor = function (item) {\n      var color;\n\n      switch (item.attributes[\"Typ\"][_this.props.year]) {\n        case \"K111\":\n          color = \"aqua\";\n          break;\n\n        case \"K112\":\n          color = \"fuchsia\";\n          break;\n\n        case \"K121\":\n          color = \"red\";\n          break;\n\n        case \"K122\":\n          color = \"red\";\n          break;\n\n        case \"K123\":\n          color = \"red\";\n          break;\n\n        case \"K211\":\n          color = \"LimeGreen\";\n          break;\n\n        case \"K212\":\n          color = \"LimeGreen\";\n          break;\n\n        case \"K221\":\n          color = \"SaddleBrown\";\n          break;\n        // other 5 cases, too lazy to switch them out\n\n        default:\n          color = \"navy\";\n          break;\n      }\n\n      return color;\n    };\n\n    _this.getNormedRadius = function (item) {\n      var max = _this.props.maxAndMin.max;\n      var min = _this.props.maxAndMin.min;\n      var mean = _this.props.maxAndMin.mean;\n      var std = _this.props.maxAndMin.std; //const standardVal = ((this.props.returnData(item)-mean)/std);\n\n      var data = _this.props.returnData(item);\n\n      var biggestRadius = 50;\n      var a = (data + Math.abs(min)) / (max + Math.abs(min)) * Math.pow(biggestRadius, 2) * Math.PI;\n      var radius = Math.sqrt(a / Math.PI);\n\n      if (data === max) {\n        console.log(item.name + \", max: \" + max + \", min: \" + min + \", radius: \" + radius);\n      }\n\n      return radius;\n    };\n\n    _this.setNewStyle = function (e) {\n      e.target.setStyle({\n        weight: 2\n      });\n    };\n\n    _this.onMouseOut = function (e) {\n      if (!e.target.isPopupOpen()) _this.resetStyle(e);\n    };\n\n    _this.resetStyle = function (e) {\n      e.target.setStyle({\n        weight: 0\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(HospitalMap, [{\n    key: \"render\",\n\n    /**\n     * Creates circles to represent hospitals on a Map\n    * Adds popup an tooltip with hospital information to each circle\n    * @return {JSX}\n     */\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(LayerGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.props.data.map(function (item) {\n        return React.createElement(CircleMarker, {\n          key: _this2.props.data.indexOf(item),\n          center: {\n            lon: item.longitude,\n            lat: item.latitude\n          },\n          color: _this2.calculateCircleColor(item),\n          opacity: \"0.9\",\n          weight: \"0\" // defining how big the outline of circle is\n          ,\n          radius: _this2.getNormedRadius(item) // norming function is here\n          ,\n          onMouseOver: _this2.setNewStyle.bind(_this2),\n          onMouseOut: _this2.onMouseOut.bind(_this2),\n          onClick: _this2.setNewStyle.bind(_this2),\n          onPopupClose: _this2.resetStyle.bind(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(Tooltip, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, item.name), React.createElement(Popup, {\n          maxWidth: \"250\",\n          closeButton: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"table\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, _this2.props.t(\"popup.hospital\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, item.name)), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }, _this2.props.t(\"popup.address\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, React.createElement(\"dd\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, item.street, \",\"), item.city)), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, _this2.props.variableInfo.text, \":\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, _this2.props.returnData(item))))));\n      }));\n    }\n  }]);\n\n  return HospitalMap;\n}(Component);\n\nvar LocalizedHospitalMap = withTranslation()(HospitalMap);\nexport default LocalizedHospitalMap;","map":{"version":3,"sources":["/Users/moriarty/Documents/UniBe/PSE/medlandscape/medlandscape-app/src/components/Maps/HospitalMap.js"],"names":["React","Component","CircleMarker","Popup","LayerGroup","Tooltip","withTranslation","HospitalMap","calculateCircleColor","item","color","attributes","props","year","getNormedRadius","max","maxAndMin","min","mean","std","data","returnData","biggestRadius","a","Math","abs","pow","PI","radius","sqrt","console","log","name","setNewStyle","e","target","setStyle","weight","onMouseOut","isPopupOpen","resetStyle","map","indexOf","lon","longitude","lat","latitude","bind","t","street","city","variableInfo","text","LocalizedHospitalMap"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { CircleMarker, Popup, LayerGroup, Tooltip } from 'react-leaflet'\nimport { withTranslation } from 'react-i18next';\n\nclass HospitalMap extends Component {\n\n    /**\n     * Calculates and returns a rgb color\n     * @return {String} The rgb color as a string.\n     */\n\tcalculateCircleColor = (item) => {\n\t\tlet color;\n\t\tswitch (item.attributes[\"Typ\"][this.props.year]) {\n\t\t\tcase (\"K111\"):\n\t\t\t\tcolor = \"aqua\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K112\"):\n\t\t\t\tcolor = \"fuchsia\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K121\"):\n\t\t\t\tcolor = \"red\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K122\"):\n\t\t\t\tcolor = \"red\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K123\"):\n\t\t\t\tcolor = \"red\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K211\"):\n\t\t\t\tcolor = \"LimeGreen\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K212\"):\n\t\t\t\tcolor = \"LimeGreen\";\n\t\t\t\tbreak;\n\t\t\tcase (\"K221\"):\n\t\t\t\tcolor = \"SaddleBrown\";\n\t\t\t\tbreak;\n\t\t\t// other 5 cases, too lazy to switch them out\n\t\t\tdefault :\n\t\t\t\tcolor = \"navy\";\n\t\t\t\tbreak;\n\t\t}\n\t\treturn color;\n\t}\n\n    /**\n     * Computes the Radius for a hospital point.\n     * @param  {Hospital Object} item The hospital\n     * @return {int} size of the radius\n     */\n\tgetNormedRadius = (item) => {\n\t\tconst max = this.props.maxAndMin.max;\n\t\tconst min = this.props.maxAndMin.min;\n\t\tconst mean = this.props.maxAndMin.mean;\n\t\tconst std = this.props.maxAndMin.std;\n\t\t//const standardVal = ((this.props.returnData(item)-mean)/std);\n        const data = this.props.returnData(item);\n        const biggestRadius = 50;\n\n\t\tconst a = ((data + Math.abs(min)) / (max + Math.abs(min))) * Math.pow(biggestRadius, 2) * Math.PI;\n        let radius = Math.sqrt(a / Math.PI);\n        if (data === max) {\n            console.log(item.name + \", max: \" + max + \", min: \" + min + \", radius: \" + radius);\n        }\n\n\t\treturn radius;\n\t}\n\n\t/**\n\t* Changes hospital style if you hover on a hospital with your mouse\n\t* @param {Object} e the event\n\t*/\n\tsetNewStyle = (e) => {\n\t\te.target.setStyle({weight: 2});\n\t}\n\n\t/**\n\t* Set back hospital style if you hover off a hospital with your mouse\n\t* @param {Object} e the event\n\t*/\n\tonMouseOut = (e) => {\n\t\tif (!e.target.isPopupOpen())\n\t\t\tthis.resetStyle(e);\n\t}\n\n\t/**\n\t* Set back hospital style\n\t* @param {Object} e the event\n\t*/\n\tresetStyle = (e) => {\n\t\te.target.setStyle({weight: 0});\n\t}\n\n    /**\n     * Creates circles to represent hospitals on a Map\n\t * Adds popup an tooltip with hospital information to each circle\n\t * @return {JSX}\n     */\n\trender() {\n\t\treturn (\n\t\t\t<LayerGroup>\n\t\t\t\t{\n\t\t\t\t\tthis.props.data.map((item) => (\n          \t\t\t\t<CircleMarker\n          \t\t\t\t\tkey = {this.props.data.indexOf(item)}\n        \t\t\t\t\tcenter={{lon: item.longitude, lat: item.latitude}}\n        \t\t\t\t\tcolor = {this.calculateCircleColor(item)}\n        \t\t\t\t\topacity = \"0.9\"\n        \t\t\t\t\tweight = \"0\" // defining how big the outline of circle is\n        \t\t\t\t\tradius={this.getNormedRadius(item)} // norming function is here\n\t\t\t\t\t\t\tonMouseOver = {this.setNewStyle.bind(this)}\n\t\t\t\t\t\t\tonMouseOut = {this.onMouseOut.bind(this)}\n\t\t\t\t\t\t\tonClick = {this.setNewStyle.bind(this)}\n\t\t\t\t\t\t\tonPopupClose = {this.resetStyle.bind(this)}\n        \t\t\t\t>\n        \t\t\t\t\t<Tooltip>\n        \t\t\t\t\t\t{item.name}\n        \t\t\t\t\t</Tooltip>\n\t\t\t\t\t\t\t<Popup\n\t\t\t\t\t\t\t\tmaxWidth = \"250\"\n\t\t\t\t\t\t\t\tcloseButton = {false}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td>{this.props.t(\"popup.hospital\")}</td>\n\t\t\t\t\t\t\t\t\t\t<td>{item.name}</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td>{this.props.t(\"popup.address\")}</td>\n\t\t\t\t\t\t\t\t\t\t<td><dd>{item.street},</dd>{item.city}</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t<td>{this.props.variableInfo.text}:</td>\n\t\t\t\t\t\t\t\t\t\t<td>{this.props.returnData(item)}</td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</Popup>\n        \t\t\t\t</CircleMarker>\n      \t             ))\n\t\t\t\t}\n\t\t\t</LayerGroup>\n\t\t)\n\t}\n}\nconst LocalizedHospitalMap = withTranslation()(HospitalMap);\nexport default LocalizedHospitalMap;\n"]},"metadata":{},"sourceType":"module"}